
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080076e8  080076e8  000086e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007870  08007870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007874  08007874  00008874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08007878  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cbc  20000220  08007a98  00009220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000edc  08007a98  00009edc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017033  00000000  00000000  00009249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038f5  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00009c78  00000000  00000000  00023b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f28  00000000  00000000  0002d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c91  00000000  00000000  0002e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b684  00000000  00000000  0002f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018d89  00000000  00000000  0004aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000914a5  00000000  00000000  000637b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f4c5b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003564  00000000  00000000  000f4ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000003e  00000000  00000000  000f8204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	080076cc 	.word	0x080076cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	080076cc 	.word	0x080076cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	@ 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d46:	2afd      	cmp	r2, #253	@ 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	@ 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b510      	push	{r4, lr}
 800110e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001110:	f001 f9f6 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x24>)
 8001116:	fba2 2000 	umull	r2, r0, r2, r0
 800111a:	0980      	lsrs	r0, r0, #6
 800111c:	f000 f882 	bl	8001224 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001120:	2200      	movs	r2, #0
 8001122:	4621      	mov	r1, r4
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001128:	f000 f83a 	bl	80011a0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800112c:	2000      	movs	r0, #0
 800112e:	bd10      	pop	{r4, pc}
 8001130:	10624dd3 	.word	0x10624dd3

08001134 <HAL_Init>:
{
 8001134:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001136:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_Init+0x20>)
 8001138:	6813      	ldr	r3, [r2, #0]
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f81b 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ffe0 	bl	800110c <HAL_InitTick>
  HAL_MspInit();
 800114c:	f004 f8b6 	bl	80052bc <HAL_MspInit>
}
 8001150:	2000      	movs	r0, #0
 8001152:	bd08      	pop	{r3, pc}
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001158:	4a02      	ldr	r2, [pc, #8]	@ (8001164 <HAL_IncTick+0xc>)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000023c 	.word	0x2000023c

08001168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001168:	4b01      	ldr	r3, [pc, #4]	@ (8001170 <HAL_GetTick+0x8>)
 800116a:	6818      	ldr	r0, [r3, #0]
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000023c 	.word	0x2000023c

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001174:	b082      	sub	sp, #8
 8001176:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
  while((HAL_GetTick() - tickstart) < Delay)
  {
  }
}
 8001178:	b002      	add	sp, #8
 800117a:	4770      	bx	lr

0800117c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4907      	ldr	r1, [pc, #28]	@ (800119c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800117e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001180:	0203      	lsls	r3, r0, #8
 8001182:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800118a:	0412      	lsls	r2, r2, #16
 800118c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_NVIC_SetPriority+0x64>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	f1c3 0c07 	rsb	ip, r3, #7
 80011ae:	f1bc 0f04 	cmp.w	ip, #4
 80011b2:	bf28      	it	cs
 80011b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b8:	f103 0e04 	add.w	lr, r3, #4
 80011bc:	f1be 0f06 	cmp.w	lr, #6
 80011c0:	bf8c      	ite	hi
 80011c2:	3b03      	subhi	r3, #3
 80011c4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c6:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80011ca:	fa0e fc0c 	lsl.w	ip, lr, ip
 80011ce:	ea21 010c 	bic.w	r1, r1, ip
 80011d2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	fa0e fe03 	lsl.w	lr, lr, r3
 80011d8:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) < 0)
 80011de:	2800      	cmp	r0, #0
 80011e0:	db09      	blt.n	80011f6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	0109      	lsls	r1, r1, #4
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80011ea:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80011ee:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011f2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	f000 000f 	and.w	r0, r0, #15
 80011fa:	0109      	lsls	r1, r1, #4
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <HAL_NVIC_SetPriority+0x68>)
 8001200:	5419      	strb	r1, [r3, r0]
 8001202:	e7f6      	b.n	80011f2 <HAL_NVIC_SetPriority+0x52>
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000ed14 	.word	0xe000ed14

0800120c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800120c:	0941      	lsrs	r1, r0, #5
 800120e:	f000 001f 	and.w	r0, r0, #31
 8001212:	2301      	movs	r3, #1
 8001214:	4083      	lsls	r3, r0
 8001216:	4a02      	ldr	r2, [pc, #8]	@ (8001220 <HAL_NVIC_EnableIRQ+0x14>)
 8001218:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	3801      	subs	r0, #1
 8001226:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800122a:	d20b      	bcs.n	8001244 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001230:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_SYSTICK_Config+0x24>)
 8001234:	21f0      	movs	r1, #240	@ 0xf0
 8001236:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123a:	2000      	movs	r0, #0
 800123c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	2207      	movs	r2, #7
 8001240:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001242:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001244:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800124c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800124e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001252:	6913      	ldr	r3, [r2, #16]
 8001254:	bf0c      	ite	eq
 8001256:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800125a:	f023 0304 	bicne.w	r3, r3, #4
 800125e:	6113      	str	r3, [r2, #16]
  }
}
 8001260:	4770      	bx	lr

08001262 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001262:	4770      	bx	lr

08001264 <HAL_SYSTICK_IRQHandler>:
{
 8001264:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001266:	f7ff fffc 	bl	8001262 <HAL_SYSTICK_Callback>
}
 800126a:	bd08      	pop	{r3, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	b083      	sub	sp, #12
 8001272:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001274:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4e8f      	ldr	r6, [pc, #572]	@ (80014b4 <HAL_GPIO_Init+0x248>)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001278:	4c8f      	ldr	r4, [pc, #572]	@ (80014b8 <HAL_GPIO_Init+0x24c>)
      switch (GPIO_Init->Mode)
 800127a:	4d90      	ldr	r5, [pc, #576]	@ (80014bc <HAL_GPIO_Init+0x250>)
 800127c:	f8df e240 	ldr.w	lr, [pc, #576]	@ 80014c0 <HAL_GPIO_Init+0x254>
 8001280:	4694      	mov	ip, r2
 8001282:	e0b4      	b.n	80013ee <HAL_GPIO_Init+0x182>
 8001284:	45a9      	cmp	r9, r5
 8001286:	d00f      	beq.n	80012a8 <HAL_GPIO_Init+0x3c>
 8001288:	d906      	bls.n	8001298 <HAL_GPIO_Init+0x2c>
 800128a:	45f1      	cmp	r9, lr
 800128c:	d00c      	beq.n	80012a8 <HAL_GPIO_Init+0x3c>
 800128e:	f8df a234 	ldr.w	sl, [pc, #564]	@ 80014c4 <HAL_GPIO_Init+0x258>
 8001292:	45d1      	cmp	r9, sl
 8001294:	d008      	beq.n	80012a8 <HAL_GPIO_Init+0x3c>
 8001296:	e01b      	b.n	80012d0 <HAL_GPIO_Init+0x64>
 8001298:	f8df a22c 	ldr.w	sl, [pc, #556]	@ 80014c8 <HAL_GPIO_Init+0x25c>
 800129c:	45d1      	cmp	r9, sl
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x3c>
 80012a0:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 80012a4:	45d1      	cmp	r9, sl
 80012a6:	d10f      	bne.n	80012c8 <HAL_GPIO_Init+0x5c>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80012a8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80012ac:	f1bc 0f00 	cmp.w	ip, #0
 80012b0:	f000 80f1 	beq.w	8001496 <HAL_GPIO_Init+0x22a>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80012b4:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 80012b8:	bf0c      	ite	eq
 80012ba:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80012be:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c2:	f04f 0c08 	mov.w	ip, #8
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_Init+0x64>
      switch (GPIO_Init->Mode)
 80012c8:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 80012cc:	45d1      	cmp	r9, sl
 80012ce:	d0eb      	beq.n	80012a8 <HAL_GPIO_Init+0x3c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d0:	2fff      	cmp	r7, #255	@ 0xff
 80012d2:	bf99      	ittee	ls
 80012d4:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80012d6:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d8:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80012dc:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80012e0:	f8d9 8000 	ldr.w	r8, [r9]
 80012e4:	f04f 0b0f 	mov.w	fp, #15
 80012e8:	fa0b fb0a 	lsl.w	fp, fp, sl
 80012ec:	ea28 080b 	bic.w	r8, r8, fp
 80012f0:	fa0c fa0a 	lsl.w	sl, ip, sl
 80012f4:	ea48 080a 	orr.w	r8, r8, sl
 80012f8:	f8c9 8000 	str.w	r8, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80012fc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001300:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 8001304:	d06f      	beq.n	80013e6 <HAL_GPIO_Init+0x17a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800130a:	f048 0801 	orr.w	r8, r8, #1
 800130e:	f8c6 8018 	str.w	r8, [r6, #24]
 8001312:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8001316:	f008 0801 	and.w	r8, r8, #1
 800131a:	f8cd 8004 	str.w	r8, [sp, #4]
 800131e:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2];
 8001322:	f023 0803 	bic.w	r8, r3, #3
 8001326:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 800132a:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 800132e:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001332:	f003 0b03 	and.w	fp, r3, #3
 8001336:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800133a:	f04f 090f 	mov.w	r9, #15
 800133e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001342:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001346:	f8df 9184 	ldr.w	r9, [pc, #388]	@ 80014cc <HAL_GPIO_Init+0x260>
 800134a:	4548      	cmp	r0, r9
 800134c:	f000 80a6 	beq.w	800149c <HAL_GPIO_Init+0x230>
 8001350:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001354:	4548      	cmp	r0, r9
 8001356:	f000 80a4 	beq.w	80014a2 <HAL_GPIO_Init+0x236>
 800135a:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800135e:	4548      	cmp	r0, r9
 8001360:	f000 80a2 	beq.w	80014a8 <HAL_GPIO_Init+0x23c>
 8001364:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001368:	4548      	cmp	r0, r9
 800136a:	bf14      	ite	ne
 800136c:	f04f 0904 	movne.w	r9, #4
 8001370:	f04f 0903 	moveq.w	r9, #3
 8001374:	fa09 f90b 	lsl.w	r9, r9, fp
 8001378:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2] = temp;
 800137c:	f8c8 9008 	str.w	r9, [r8, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001384:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8001388:	f8d4 8000 	ldr.w	r8, [r4]
 800138c:	bf14      	ite	ne
 800138e:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001392:	ea28 0807 	biceq.w	r8, r8, r7
 8001396:	f8c4 8000 	str.w	r8, [r4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800139e:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80013a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80013a6:	bf14      	ite	ne
 80013a8:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80013ac:	ea28 0807 	biceq.w	r8, r8, r7
 80013b0:	f8c4 8004 	str.w	r8, [r4, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80013b8:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80013bc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80013c0:	bf14      	ite	ne
 80013c2:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80013c6:	ea28 0807 	biceq.w	r8, r8, r7
 80013ca:	f8c4 8008 	str.w	r8, [r4, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ce:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80013d2:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80013d6:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80013da:	bf14      	ite	ne
 80013dc:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80013e0:	ea28 0707 	biceq.w	r7, r8, r7
 80013e4:	60e7      	str	r7, [r4, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80013e6:	3301      	adds	r3, #1
 80013e8:	3204      	adds	r2, #4
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d05f      	beq.n	80014ae <HAL_GPIO_Init+0x242>
    ioposition = ((uint32_t)0x01) << position;
 80013ee:	f04f 0801 	mov.w	r8, #1
 80013f2:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	f8d1 9000 	ldr.w	r9, [r1]
 80013fa:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80013fe:	ea38 0909 	bics.w	r9, r8, r9
 8001402:	d1f0      	bne.n	80013e6 <HAL_GPIO_Init+0x17a>
      switch (GPIO_Init->Mode)
 8001404:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001408:	f1b9 0f12 	cmp.w	r9, #18
 800140c:	f63f af3a 	bhi.w	8001284 <HAL_GPIO_Init+0x18>
 8001410:	f1b9 0f12 	cmp.w	r9, #18
 8001414:	f63f af5c 	bhi.w	80012d0 <HAL_GPIO_Init+0x64>
 8001418:	f20f 0a04 	addw	sl, pc, #4
 800141c:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8001420:	080012a9 	.word	0x080012a9
 8001424:	0800146d 	.word	0x0800146d
 8001428:	0800147d 	.word	0x0800147d
 800142c:	08001491 	.word	0x08001491
 8001430:	080012d1 	.word	0x080012d1
 8001434:	080012d1 	.word	0x080012d1
 8001438:	080012d1 	.word	0x080012d1
 800143c:	080012d1 	.word	0x080012d1
 8001440:	080012d1 	.word	0x080012d1
 8001444:	080012d1 	.word	0x080012d1
 8001448:	080012d1 	.word	0x080012d1
 800144c:	080012d1 	.word	0x080012d1
 8001450:	080012d1 	.word	0x080012d1
 8001454:	080012d1 	.word	0x080012d1
 8001458:	080012d1 	.word	0x080012d1
 800145c:	080012d1 	.word	0x080012d1
 8001460:	080012d1 	.word	0x080012d1
 8001464:	08001473 	.word	0x08001473
 8001468:	08001487 	.word	0x08001487
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800146c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8001470:	e72e      	b.n	80012d0 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001472:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001476:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800147a:	e729      	b.n	80012d0 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001480:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8001484:	e724      	b.n	80012d0 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001486:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800148a:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 800148e:	e71f      	b.n	80012d0 <HAL_GPIO_Init+0x64>
      switch (GPIO_Init->Mode)
 8001490:	f04f 0c00 	mov.w	ip, #0
 8001494:	e71c      	b.n	80012d0 <HAL_GPIO_Init+0x64>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001496:	f04f 0c04 	mov.w	ip, #4
 800149a:	e719      	b.n	80012d0 <HAL_GPIO_Init+0x64>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800149c:	f04f 0900 	mov.w	r9, #0
 80014a0:	e768      	b.n	8001374 <HAL_GPIO_Init+0x108>
 80014a2:	f04f 0901 	mov.w	r9, #1
 80014a6:	e765      	b.n	8001374 <HAL_GPIO_Init+0x108>
 80014a8:	f04f 0902 	mov.w	r9, #2
 80014ac:	e762      	b.n	8001374 <HAL_GPIO_Init+0x108>
        }
      }
    }
  }
}
 80014ae:	b003      	add	sp, #12
 80014b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010400 	.word	0x40010400
 80014bc:	10220000 	.word	0x10220000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10320000 	.word	0x10320000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	40010800 	.word	0x40010800

080014d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	b10a      	cbz	r2, 80014d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	6101      	str	r1, [r0, #16]
 80014d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014d6:	0409      	lsls	r1, r1, #16
 80014d8:	6101      	str	r1, [r0, #16]
  }
}
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80014dc:	68c3      	ldr	r3, [r0, #12]
 80014de:	4059      	eors	r1, r3
 80014e0:	60c1      	str	r1, [r0, #12]
}
 80014e2:	4770      	bx	lr

080014e4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80014ec:	d101      	bne.n	80014f2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80014ee:	2000      	movs	r0, #0
}
 80014f0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f8:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014fa:	2304      	movs	r3, #4
 80014fc:	6383      	str	r3, [r0, #56]	@ 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80014fe:	2320      	movs	r3, #32
 8001500:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_UNLOCK(hi2c);
 8001504:	2300      	movs	r3, #0
 8001506:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	4770      	bx	lr

0800150e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800150e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001512:	4604      	mov	r4, r0
 8001514:	460d      	mov	r5, r1
 8001516:	4616      	mov	r6, r2
  tickstart = HAL_GetTick();
 8001518:	f7ff fe26 	bl	8001168 <HAL_GetTick>
 800151c:	4680      	mov	r8, r0
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800151e:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8001522:	e030      	b.n	8001586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800152a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800152c:	6822      	ldr	r2, [r4, #0]
 800152e:	6953      	ldr	r3, [r2, #20]
 8001530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001534:	6153      	str	r3, [r2, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001536:	2304      	movs	r3, #4
 8001538:	63a3      	str	r3, [r4, #56]	@ 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 800153a:	2320      	movs	r3, #32
 800153c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hi2c);
 8001540:	2300      	movs	r3, #0
 8001542:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8001546:	2001      	movs	r0, #1
}
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800154c:	b12e      	cbz	r6, 800155a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 800154e:	f7ff fe0b 	bl	8001168 <HAL_GetTick>
 8001552:	eba0 0008 	sub.w	r0, r0, r8
 8001556:	42b0      	cmp	r0, r6
 8001558:	d915      	bls.n	8001586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
        hi2c->State= HAL_I2C_STATE_READY;
 800155a:	2320      	movs	r3, #32
 800155c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hi2c);
 8001560:	2300      	movs	r3, #0
 8001562:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e7ee      	b.n	8001548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	ea25 0303 	bic.w	r3, r5, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	b193      	cbz	r3, 800159c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800157e:	d1d1      	bne.n	8001524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x16>
    if(Timeout != HAL_MAX_DELAY)
 8001580:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001584:	d1e2      	bne.n	800154c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001586:	2f01      	cmp	r7, #1
 8001588:	d0ef      	beq.n	800156a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	ea25 0303 	bic.w	r3, r5, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
 800159a:	e7d5      	b.n	8001548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
 800159c:	2000      	movs	r0, #0
 800159e:	e7d3      	b.n	8001548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>

080015a0 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80015a6:	f7ff fddf 	bl	8001168 <HAL_GetTick>
 80015aa:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015b4:	d118      	bne.n	80015e8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff ff94 	bl	80014e4 <I2C_IsAcknowledgeFailed>
 80015bc:	b9b0      	cbnz	r0, 80015ec <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if(Timeout != HAL_MAX_DELAY)
 80015be:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80015c2:	d0f3      	beq.n	80015ac <I2C_WaitOnTXEFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80015c4:	b125      	cbz	r5, 80015d0 <I2C_WaitOnTXEFlagUntilTimeout+0x30>
 80015c6:	f7ff fdcf 	bl	8001168 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	42a8      	cmp	r0, r5
 80015ce:	d9ed      	bls.n	80015ac <I2C_WaitOnTXEFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 80015d8:	2320      	movs	r3, #32
 80015da:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hi2c);
 80015de:	2300      	movs	r3, #0
 80015e0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80015e4:	2003      	movs	r0, #3
 80015e6:	e000      	b.n	80015ea <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
  return HAL_OK;      
 80015e8:	2000      	movs	r0, #0
}
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
 80015ee:	e7fc      	b.n	80015ea <I2C_WaitOnTXEFlagUntilTimeout+0x4a>

080015f0 <I2C_RequestMemoryWrite>:
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	4607      	mov	r7, r0
 80015f8:	4688      	mov	r8, r1
 80015fa:	4691      	mov	r9, r2
 80015fc:	469a      	mov	sl, r3
 80015fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001608:	6019      	str	r1, [r3, #0]
  tickstart = HAL_GetTick();
 800160a:	f7ff fdad 	bl	8001168 <HAL_GetTick>
 800160e:	4683      	mov	fp, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001610:	683e      	ldr	r6, [r7, #0]
 8001612:	6974      	ldr	r4, [r6, #20]
 8001614:	f014 0f01 	tst.w	r4, #1
 8001618:	d111      	bne.n	800163e <I2C_RequestMemoryWrite+0x4e>
      if(Timeout != HAL_MAX_DELAY)
 800161a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800161e:	d0f8      	beq.n	8001612 <I2C_RequestMemoryWrite+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001620:	b12d      	cbz	r5, 800162e <I2C_RequestMemoryWrite+0x3e>
 8001622:	f7ff fda1 	bl	8001168 <HAL_GetTick>
 8001626:	eba0 000b 	sub.w	r0, r0, fp
 800162a:	4285      	cmp	r5, r0
 800162c:	d2f0      	bcs.n	8001610 <I2C_RequestMemoryWrite+0x20>
          hi2c->State= HAL_I2C_STATE_READY;
 800162e:	2320      	movs	r3, #32
 8001630:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    return HAL_TIMEOUT;
 800163a:	2003      	movs	r0, #3
 800163c:	e00d      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800163e:	f008 03fe 	and.w	r3, r8, #254	@ 0xfe
 8001642:	6133      	str	r3, [r6, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8001644:	462a      	mov	r2, r5
 8001646:	4923      	ldr	r1, [pc, #140]	@ (80016d4 <I2C_RequestMemoryWrite+0xe4>)
 8001648:	4638      	mov	r0, r7
 800164a:	f7ff ff60 	bl	800150e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800164e:	b138      	cbz	r0, 8001660 <I2C_RequestMemoryWrite+0x70>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      return HAL_ERROR;
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf14      	ite	ne
 8001656:	2003      	movne	r0, #3
 8001658:	2001      	moveq	r0, #1
}
 800165a:	b003      	add	sp, #12
 800165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	9b01      	ldr	r3, [sp, #4]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800166c:	4629      	mov	r1, r5
 800166e:	4638      	mov	r0, r7
 8001670:	f7ff ff96 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001674:	b158      	cbz	r0, 800168e <I2C_RequestMemoryWrite+0x9e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001678:	2b04      	cmp	r3, #4
 800167a:	d001      	beq.n	8001680 <I2C_RequestMemoryWrite+0x90>
      return HAL_TIMEOUT;
 800167c:	2003      	movs	r0, #3
 800167e:	e7ec      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001688:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e7e5      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800168e:	f1ba 0f01 	cmp.w	sl, #1
 8001692:	d104      	bne.n	800169e <I2C_RequestMemoryWrite+0xae>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	fa5f f289 	uxtb.w	r2, r9
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	e7dd      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80016a4:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80016a6:	4629      	mov	r1, r5
 80016a8:	4638      	mov	r0, r7
 80016aa:	f7ff ff79 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ae:	b158      	cbz	r0, 80016c8 <I2C_RequestMemoryWrite+0xd8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d001      	beq.n	80016ba <I2C_RequestMemoryWrite+0xca>
        return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e7cf      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c2:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7c8      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	fa5f f389 	uxtb.w	r3, r9
 80016ce:	6113      	str	r3, [r2, #16]
 80016d0:	e7c3      	b.n	800165a <I2C_RequestMemoryWrite+0x6a>
 80016d2:	bf00      	nop
 80016d4:	00010002 	.word	0x00010002

080016d8 <I2C_RequestMemoryRead>:
{
 80016d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016dc:	b083      	sub	sp, #12
 80016de:	4607      	mov	r7, r0
 80016e0:	4688      	mov	r8, r1
 80016e2:	4691      	mov	r9, r2
 80016e4:	469a      	mov	sl, r3
 80016e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e8:	6802      	ldr	r2, [r0, #0]
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016f2:	6802      	ldr	r2, [r0, #0]
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fa:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80016fc:	f7ff fd34 	bl	8001168 <HAL_GetTick>
 8001700:	4683      	mov	fp, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001702:	683e      	ldr	r6, [r7, #0]
 8001704:	6974      	ldr	r4, [r6, #20]
 8001706:	f014 0f01 	tst.w	r4, #1
 800170a:	d111      	bne.n	8001730 <I2C_RequestMemoryRead+0x58>
      if(Timeout != HAL_MAX_DELAY)
 800170c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001710:	d0f8      	beq.n	8001704 <I2C_RequestMemoryRead+0x2c>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001712:	b12d      	cbz	r5, 8001720 <I2C_RequestMemoryRead+0x48>
 8001714:	f7ff fd28 	bl	8001168 <HAL_GetTick>
 8001718:	eba0 000b 	sub.w	r0, r0, fp
 800171c:	4285      	cmp	r5, r0
 800171e:	d2f0      	bcs.n	8001702 <I2C_RequestMemoryRead+0x2a>
          hi2c->State= HAL_I2C_STATE_READY;
 8001720:	2320      	movs	r3, #32
 8001722:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    return HAL_TIMEOUT;
 800172c:	2003      	movs	r0, #3
 800172e:	e00f      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001730:	fa5f f488 	uxtb.w	r4, r8
 8001734:	f008 01fe 	and.w	r1, r8, #254	@ 0xfe
 8001738:	6131      	str	r1, [r6, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 800173a:	462a      	mov	r2, r5
 800173c:	4941      	ldr	r1, [pc, #260]	@ (8001844 <I2C_RequestMemoryRead+0x16c>)
 800173e:	4638      	mov	r0, r7
 8001740:	f7ff fee5 	bl	800150e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001744:	b138      	cbz	r0, 8001756 <I2C_RequestMemoryRead+0x7e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      return HAL_ERROR;
 8001748:	2b04      	cmp	r3, #4
 800174a:	bf14      	ite	ne
 800174c:	2003      	movne	r0, #3
 800174e:	2001      	moveq	r0, #1
}
 8001750:	b003      	add	sp, #12
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	9201      	str	r2, [sp, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9b01      	ldr	r3, [sp, #4]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001762:	4629      	mov	r1, r5
 8001764:	4638      	mov	r0, r7
 8001766:	f7ff ff1b 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800176a:	b158      	cbz	r0, 8001784 <I2C_RequestMemoryRead+0xac>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176e:	2b04      	cmp	r3, #4
 8001770:	d001      	beq.n	8001776 <I2C_RequestMemoryRead+0x9e>
      return HAL_TIMEOUT;
 8001772:	2003      	movs	r0, #3
 8001774:	e7ec      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001780:	2001      	movs	r0, #1
 8001782:	e7e5      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001784:	f1ba 0f01 	cmp.w	sl, #1
 8001788:	d10d      	bne.n	80017a6 <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	fa5f f289 	uxtb.w	r2, r9
 8001790:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001792:	4629      	mov	r1, r5
 8001794:	4638      	mov	r0, r7
 8001796:	f7ff ff03 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800179a:	b328      	cbz	r0, 80017e8 <I2C_RequestMemoryRead+0x110>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d01b      	beq.n	80017da <I2C_RequestMemoryRead+0x102>
      return HAL_TIMEOUT;
 80017a2:	2003      	movs	r0, #3
 80017a4:	e7d4      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80017ac:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80017ae:	4629      	mov	r1, r5
 80017b0:	4638      	mov	r0, r7
 80017b2:	f7ff fef5 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017b6:	b158      	cbz	r0, 80017d0 <I2C_RequestMemoryRead+0xf8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d001      	beq.n	80017c2 <I2C_RequestMemoryRead+0xea>
        return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e7c6      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ca:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
 80017ce:	e7bf      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	fa5f f389 	uxtb.w	r3, r9
 80017d6:	6113      	str	r3, [r2, #16]
 80017d8:	e7db      	b.n	8001792 <I2C_RequestMemoryRead+0xba>
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	e7b3      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80017f2:	f7ff fcb9 	bl	8001168 <HAL_GetTick>
 80017f6:	4606      	mov	r6, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6953      	ldr	r3, [r2, #20]
 80017fc:	f013 0f01 	tst.w	r3, #1
 8001800:	d110      	bne.n	8001824 <I2C_RequestMemoryRead+0x14c>
      if(Timeout != HAL_MAX_DELAY)
 8001802:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001806:	d0f8      	beq.n	80017fa <I2C_RequestMemoryRead+0x122>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001808:	b125      	cbz	r5, 8001814 <I2C_RequestMemoryRead+0x13c>
 800180a:	f7ff fcad 	bl	8001168 <HAL_GetTick>
 800180e:	1b83      	subs	r3, r0, r6
 8001810:	429d      	cmp	r5, r3
 8001812:	d2f1      	bcs.n	80017f8 <I2C_RequestMemoryRead+0x120>
          hi2c->State= HAL_I2C_STATE_READY;
 8001814:	2320      	movs	r3, #32
 8001816:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    return HAL_TIMEOUT;
 8001820:	2003      	movs	r0, #3
 8001822:	e795      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001824:	f044 0401 	orr.w	r4, r4, #1
 8001828:	6114      	str	r4, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 800182a:	462a      	mov	r2, r5
 800182c:	4905      	ldr	r1, [pc, #20]	@ (8001844 <I2C_RequestMemoryRead+0x16c>)
 800182e:	4638      	mov	r0, r7
 8001830:	f7ff fe6d 	bl	800150e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	2800      	cmp	r0, #0
 8001836:	d08b      	beq.n	8001750 <I2C_RequestMemoryRead+0x78>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      return HAL_ERROR;
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf14      	ite	ne
 800183e:	2003      	movne	r0, #3
 8001840:	2001      	moveq	r0, #1
 8001842:	e785      	b.n	8001750 <I2C_RequestMemoryRead+0x78>
 8001844:	00010002 	.word	0x00010002

08001848 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4605      	mov	r5, r0
 800184c:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
 800184e:	f7ff fc8b 	bl	8001168 <HAL_GetTick>
 8001852:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800185c:	d122      	bne.n	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	f012 0f10 	tst.w	r2, #16
 8001864:	d111      	bne.n	800188a <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001866:	b124      	cbz	r4, 8001872 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8001868:	f7ff fc7e 	bl	8001168 <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	42a0      	cmp	r0, r4
 8001870:	d9f0      	bls.n	8001854 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001872:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	63ab      	str	r3, [r5, #56]	@ 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 800187a:	2320      	movs	r3, #32
 800187c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
      __HAL_UNLOCK(hi2c);
 8001880:	2300      	movs	r3, #0
 8001882:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
}
 8001888:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	f022 0210 	bic.w	r2, r2, #16
 8001890:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	63ab      	str	r3, [r5, #56]	@ 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8001896:	2220      	movs	r2, #32
 8001898:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
      __HAL_UNLOCK(hi2c);
 800189c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
 80018a2:	e7f1      	b.n	8001888 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
  return HAL_OK;
 80018a4:	2000      	movs	r0, #0
 80018a6:	e7ef      	b.n	8001888 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>

080018a8 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d06c      	beq.n	8001986 <HAL_I2C_Init+0xde>
{
 80018ac:	b510      	push	{r4, lr}
 80018ae:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80018b0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d040      	beq.n	800193a <HAL_I2C_Init+0x92>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b8:	2324      	movs	r3, #36	@ 0x24
 80018ba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_I2C_DISABLE(hi2c);
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c8:	f000 fe20 	bl	800250c <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQ_RANGE(pclk1);
 80018cc:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <HAL_I2C_Init+0xe4>)
 80018ce:	fba3 2300 	umull	r2, r3, r3, r0
 80018d2:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018d8:	6861      	ldr	r1, [r4, #4]
 80018da:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <HAL_I2C_Init+0xe8>)
 80018dc:	4291      	cmp	r1, r2
 80018de:	d831      	bhi.n	8001944 <HAL_I2C_Init+0x9c>
 80018e0:	3301      	adds	r3, #1
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 80018e6:	6822      	ldr	r2, [r4, #0]
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	4929      	ldr	r1, [pc, #164]	@ (8001990 <HAL_I2C_Init+0xe8>)
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d833      	bhi.n	8001958 <HAL_I2C_Init+0xb0>
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb0 f0f3 	udiv	r0, r0, r3
      return 4;
 80018f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018fa:	4218      	tst	r0, r3
 80018fc:	bf08      	it	eq
 80018fe:	2004      	moveq	r0, #4
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 8001900:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	69e3      	ldr	r3, [r4, #28]
 8001906:	6a21      	ldr	r1, [r4, #32]
 8001908:	430b      	orrs	r3, r1
 800190a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	6923      	ldr	r3, [r4, #16]
 8001910:	68e1      	ldr	r1, [r4, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	6963      	ldr	r3, [r4, #20]
 800191a:	69a1      	ldr	r1, [r4, #24]
 800191c:	430b      	orrs	r3, r1
 800191e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001920:	6822      	ldr	r2, [r4, #0]
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192a:	2000      	movs	r0, #0
 800192c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 800192e:	2320      	movs	r3, #32
 8001930:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	f884 0036 	strb.w	r0, [r4, #54]	@ 0x36
}
 8001938:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    HAL_I2C_MspInit(hi2c);
 800193e:	f003 fcfb 	bl	8005338 <HAL_I2C_MspInit>
 8001942:	e7b9      	b.n	80018b8 <HAL_I2C_Init+0x10>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001944:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_I2C_Init+0xec>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	3301      	adds	r3, #1
 8001956:	e7c4      	b.n	80018e2 <HAL_I2C_Init+0x3a>
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 8001958:	68a1      	ldr	r1, [r4, #8]
 800195a:	b959      	cbnz	r1, 8001974 <HAL_I2C_Init+0xcc>
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 800195c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	f443 4000 	orr.w	r0, r3, #32768	@ 0x8000
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 8001968:	f3c0 030b 	ubfx	r3, r0, #0, #12
      return 1;
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf08      	it	eq
 8001970:	2001      	moveq	r0, #1
 8001972:	e7c5      	b.n	8001900 <HAL_I2C_Init+0x58>
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 8001974:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800197c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001980:	f440 4040 	orr.w	r0, r0, #49152	@ 0xc000
 8001984:	e7f0      	b.n	8001968 <HAL_I2C_Init+0xc0>
    return HAL_ERROR;
 8001986:	2001      	movs	r0, #1
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	431bde83 	.word	0x431bde83
 8001990:	000186a0 	.word	0x000186a0
 8001994:	10624dd3 	.word	0x10624dd3

08001998 <HAL_I2C_Mem_Write>:
{
 8001998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	4699      	mov	r9, r3
 80019a0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	@ 0x2c
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019a4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	f040 8091 	bne.w	8001ad2 <HAL_I2C_Mem_Write+0x13a>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460f      	mov	r7, r1
 80019b4:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0))
 80019b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808e 	beq.w	8001ada <HAL_I2C_Mem_Write+0x142>
 80019be:	b90d      	cbnz	r5, 80019c4 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e087      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
  tickstart = HAL_GetTick();
 80019c4:	f7ff fbd0 	bl	8001168 <HAL_GetTick>
 80019c8:	4606      	mov	r6, r0
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019ca:	f242 7a10 	movw	sl, #10000	@ 0x2710
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	f012 0f02 	tst.w	r2, #2
 80019d6:	d00d      	beq.n	80019f4 <HAL_I2C_Mem_Write+0x5c>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019d8:	f7ff fbc6 	bl	8001168 <HAL_GetTick>
 80019dc:	eba0 0c06 	sub.w	ip, r0, r6
 80019e0:	45d4      	cmp	ip, sl
 80019e2:	d9f4      	bls.n	80019ce <HAL_I2C_Mem_Write+0x36>
          hi2c->State= HAL_I2C_STATE_READY;
 80019e4:	2320      	movs	r3, #32
 80019e6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_BUSY;
 80019f0:	2002      	movs	r0, #2
 80019f2:	e06f      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
    __HAL_LOCK(hi2c);
 80019f4:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80019f8:	2a01      	cmp	r2, #1
 80019fa:	d070      	beq.n	8001ade <HAL_I2C_Mem_Write+0x146>
 80019fc:	2201      	movs	r2, #1
 80019fe:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a08:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001a0a:	2321      	movs	r3, #33	@ 0x21
 8001a0c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8001a10:	2340      	movs	r3, #64	@ 0x40
 8001a12:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001a1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	4642      	mov	r2, r8
 8001a22:	4639      	mov	r1, r7
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fde3 	bl	80015f0 <I2C_RequestMemoryWrite>
 8001a2a:	b1e8      	cbz	r0, 8001a68 <HAL_I2C_Mem_Write+0xd0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a2e:	2b04      	cmp	r3, #4
        __HAL_UNLOCK(hi2c);
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 8001a38:	bf0c      	ite	eq
 8001a3a:	2001      	moveq	r0, #1
        return HAL_TIMEOUT;
 8001a3c:	2003      	movne	r0, #3
 8001a3e:	e049      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Write+0xb2>
          return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e044      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
          SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a52:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8001a54:	2001      	movs	r0, #1
 8001a56:	e03d      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8001a58:	b1e2      	cbz	r2, 8001a94 <HAL_I2C_Mem_Write+0xfc>
        hi2c->Instance->DR = (*pData++);
 8001a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001a5c:	3202      	adds	r2, #2
 8001a5e:	920a      	str	r2, [sp, #40]	@ 0x28
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	610b      	str	r3, [r1, #16]
        Size--;
 8001a64:	3d02      	subs	r5, #2
 8001a66:	b2ad      	uxth	r5, r5
    while(Size > 0)
 8001a68:	b1a5      	cbz	r5, 8001a94 <HAL_I2C_Mem_Write+0xfc>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001a6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fd97 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d1e4      	bne.n	8001a40 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->DR = (*pData++);
 8001a76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001a7e:	6111      	str	r1, [r2, #16]
      Size--;
 8001a80:	1e6a      	subs	r2, r5, #1
 8001a82:	b292      	uxth	r2, r2
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8001a84:	6821      	ldr	r1, [r4, #0]
 8001a86:	6948      	ldr	r0, [r1, #20]
 8001a88:	f010 0f04 	tst.w	r0, #4
 8001a8c:	d1e4      	bne.n	8001a58 <HAL_I2C_Mem_Write+0xc0>
      Size--;
 8001a8e:	4615      	mov	r5, r2
      hi2c->Instance->DR = (*pData++);
 8001a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8001a92:	e7e9      	b.n	8001a68 <HAL_I2C_Mem_Write+0xd0>
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001a94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff fd82 	bl	80015a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a9c:	b158      	cbz	r0, 8001ab6 <HAL_I2C_Mem_Write+0x11e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d001      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x110>
        return HAL_TIMEOUT;
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	e015      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001abe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
    __HAL_UNLOCK(hi2c);
 8001acc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 8001ad0:	e000      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
    return HAL_BUSY;
 8001ad2:	2002      	movs	r0, #2
}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001ada:	2001      	movs	r0, #1
 8001adc:	e7fa      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>
    __HAL_LOCK(hi2c);
 8001ade:	2002      	movs	r0, #2
 8001ae0:	e7f8      	b.n	8001ad4 <HAL_I2C_Mem_Write+0x13c>

08001ae2 <HAL_I2C_Mem_Read>:
{
 8001ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	469a      	mov	sl, r3
 8001aec:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8001aee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8001af2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001af4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 8133 	bne.w	8001d66 <HAL_I2C_Mem_Read+0x284>
 8001b00:	4605      	mov	r5, r0
 8001b02:	4691      	mov	r9, r2
    if((pData == NULL) || (Size == 0))
 8001b04:	2f00      	cmp	r7, #0
 8001b06:	f000 8134 	beq.w	8001d72 <HAL_I2C_Mem_Read+0x290>
 8001b0a:	b916      	cbnz	r6, 8001b12 <HAL_I2C_Mem_Read+0x30>
      return  HAL_ERROR;
 8001b0c:	f04f 0801 	mov.w	r8, #1
 8001b10:	e12b      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
  tickstart = HAL_GetTick();
 8001b12:	f7ff fb29 	bl	8001168 <HAL_GetTick>
 8001b16:	4680      	mov	r8, r0
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b18:	f242 7b10 	movw	fp, #10000	@ 0x2710
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	f012 0f02 	tst.w	r2, #2
 8001b24:	d00e      	beq.n	8001b44 <HAL_I2C_Mem_Read+0x62>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	f7ff fb1f 	bl	8001168 <HAL_GetTick>
 8001b2a:	eba0 0008 	sub.w	r0, r0, r8
 8001b2e:	4558      	cmp	r0, fp
 8001b30:	d9f4      	bls.n	8001b1c <HAL_I2C_Mem_Read+0x3a>
          hi2c->State= HAL_I2C_STATE_READY;
 8001b32:	2320      	movs	r3, #32
 8001b34:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      return HAL_BUSY;
 8001b3e:	f04f 0802 	mov.w	r8, #2
 8001b42:	e112      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
    __HAL_LOCK(hi2c);
 8001b44:	f895 2034 	ldrb.w	r2, [r5, #52]	@ 0x34
 8001b48:	2a01      	cmp	r2, #1
 8001b4a:	f000 8115 	beq.w	8001d78 <HAL_I2C_Mem_Read+0x296>
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f885 2034 	strb.w	r2, [r5, #52]	@ 0x34
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b5a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001b5c:	2322      	movs	r3, #34	@ 0x22
 8001b5e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8001b62:	2340      	movs	r3, #64	@ 0x40
 8001b64:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63ab      	str	r3, [r5, #56]	@ 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001b6c:	9400      	str	r4, [sp, #0]
 8001b6e:	4653      	mov	r3, sl
 8001b70:	464a      	mov	r2, r9
 8001b72:	9903      	ldr	r1, [sp, #12]
 8001b74:	4628      	mov	r0, r5
 8001b76:	f7ff fdaf 	bl	80016d8 <I2C_RequestMemoryRead>
 8001b7a:	4680      	mov	r8, r0
 8001b7c:	b158      	cbz	r0, 8001b96 <HAL_I2C_Mem_Read+0xb4>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b7e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8001b80:	2b04      	cmp	r3, #4
        __HAL_UNLOCK(hi2c);
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        return HAL_ERROR;
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f04f 0801 	moveq.w	r8, #1
        return HAL_TIMEOUT;
 8001b90:	f04f 0803 	movne.w	r8, #3
 8001b94:	e0e9      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
    if(Size == 1)
 8001b96:	2e01      	cmp	r6, #1
 8001b98:	d00d      	beq.n	8001bb6 <HAL_I2C_Mem_Read+0xd4>
    else if(Size == 2)
 8001b9a:	2e02      	cmp	r6, #2
 8001b9c:	d025      	beq.n	8001bea <HAL_I2C_Mem_Read+0x108>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9e:	682a      	ldr	r2, [r5, #0]
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ba6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	9207      	str	r2, [sp, #28]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	9307      	str	r3, [sp, #28]
 8001bb2:	9b07      	ldr	r3, [sp, #28]
    while(Size > 0)
 8001bb4:	e096      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x202>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb6:	682a      	ldr	r2, [r5, #0]
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc2:	682b      	ldr	r3, [r5, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	9205      	str	r2, [sp, #20]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	9205      	str	r2, [sp, #20]
 8001bcc:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bd6:	b662      	cpsie	i
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 8001bd8:	4621      	mov	r1, r4
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f7ff fe34 	bl	8001848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001be0:	bb70      	cbnz	r0, 8001c40 <HAL_I2C_Mem_Read+0x15e>
          (*pData++) = hi2c->Instance->DR;
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	703b      	strb	r3, [r7, #0]
          Size--;
 8001be8:	e03f      	b.n	8001c6a <HAL_I2C_Mem_Read+0x188>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	682a      	ldr	r2, [r5, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bf2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	9206      	str	r2, [sp, #24]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	9206      	str	r2, [sp, #24]
 8001c00:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c0a:	b662      	cpsie	i
  tickstart = HAL_GetTick();
 8001c0c:	f7ff faac 	bl	8001168 <HAL_GetTick>
 8001c10:	4606      	mov	r6, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c12:	682a      	ldr	r2, [r5, #0]
 8001c14:	6953      	ldr	r3, [r2, #20]
 8001c16:	f013 0f04 	tst.w	r3, #4
 8001c1a:	d119      	bne.n	8001c50 <HAL_I2C_Mem_Read+0x16e>
      if(Timeout != HAL_MAX_DELAY)
 8001c1c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001c20:	d0f8      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x132>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c22:	b124      	cbz	r4, 8001c2e <HAL_I2C_Mem_Read+0x14c>
 8001c24:	f7ff faa0 	bl	8001168 <HAL_GetTick>
 8001c28:	1b80      	subs	r0, r0, r6
 8001c2a:	4284      	cmp	r4, r0
 8001c2c:	d2f1      	bcs.n	8001c12 <HAL_I2C_Mem_Read+0x130>
          hi2c->State= HAL_I2C_STATE_READY;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001c34:	2300      	movs	r3, #0
 8001c36:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
            return HAL_TIMEOUT;
 8001c3a:	f04f 0803 	mov.w	r8, #3
 8001c3e:	e094      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001c40:	6bab      	ldr	r3, [r5, #56]	@ 0x38
              return HAL_TIMEOUT;
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	bf14      	ite	ne
 8001c46:	f04f 0801 	movne.w	r8, #1
 8001c4a:	f04f 0803 	moveq.w	r8, #3
 8001c4e:	e08c      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	682a      	ldr	r2, [r5, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
          (*pData++) = hi2c->Instance->DR;
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c62:	b662      	cpsie	i
          (*pData++) = hi2c->Instance->DR;
 8001c64:	682b      	ldr	r3, [r5, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	707b      	strb	r3, [r7, #1]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
    __HAL_UNLOCK(hi2c);
 8001c76:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 8001c7a:	e076      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
          (*pData++) = hi2c->Instance->DR;
 8001c86:	682b      	ldr	r3, [r5, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	703b      	strb	r3, [r7, #0]
  tickstart = HAL_GetTick();
 8001c8c:	f7ff fa6c 	bl	8001168 <HAL_GetTick>
 8001c90:	4681      	mov	r9, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c92:	682a      	ldr	r2, [r5, #0]
 8001c94:	6953      	ldr	r3, [r2, #20]
 8001c96:	f013 0f04 	tst.w	r3, #4
 8001c9a:	d112      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x1e0>
      if(Timeout != HAL_MAX_DELAY)
 8001c9c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001ca0:	d0f8      	beq.n	8001c94 <HAL_I2C_Mem_Read+0x1b2>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ca2:	b12c      	cbz	r4, 8001cb0 <HAL_I2C_Mem_Read+0x1ce>
 8001ca4:	f7ff fa60 	bl	8001168 <HAL_GetTick>
 8001ca8:	eba0 0009 	sub.w	r0, r0, r9
 8001cac:	4284      	cmp	r4, r0
 8001cae:	d2f0      	bcs.n	8001c92 <HAL_I2C_Mem_Read+0x1b0>
          hi2c->State= HAL_I2C_STATE_READY;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
            return HAL_TIMEOUT;
 8001cbc:	f04f 0803 	mov.w	r8, #3
 8001cc0:	e053      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc8:	6013      	str	r3, [r2, #0]
          (*pData++) = hi2c->Instance->DR;
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd0:	b662      	cpsie	i
          (*pData++) = hi2c->Instance->DR;
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	1cfb      	adds	r3, r7, #3
 8001cd8:	70ba      	strb	r2, [r7, #2]
          Size--;
 8001cda:	3e03      	subs	r6, #3
 8001cdc:	b2b6      	uxth	r6, r6
    while(Size > 0)
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	d0c3      	beq.n	8001c6a <HAL_I2C_Mem_Read+0x188>
{
 8001ce2:	461f      	mov	r7, r3
      if(Size <= 3)
 8001ce4:	2e03      	cmp	r6, #3
 8001ce6:	d81f      	bhi.n	8001d28 <HAL_I2C_Mem_Read+0x246>
        if(Size== 1)
 8001ce8:	2e01      	cmp	r6, #1
 8001cea:	f43f af75 	beq.w	8001bd8 <HAL_I2C_Mem_Read+0xf6>
        else if(Size == 2)
 8001cee:	2e02      	cmp	r6, #2
 8001cf0:	d08c      	beq.n	8001c0c <HAL_I2C_Mem_Read+0x12a>
  tickstart = HAL_GetTick();
 8001cf2:	f7ff fa39 	bl	8001168 <HAL_GetTick>
 8001cf6:	4681      	mov	r9, r0
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf8:	682a      	ldr	r2, [r5, #0]
 8001cfa:	6953      	ldr	r3, [r2, #20]
 8001cfc:	f013 0f04 	tst.w	r3, #4
 8001d00:	d1bc      	bne.n	8001c7c <HAL_I2C_Mem_Read+0x19a>
      if(Timeout != HAL_MAX_DELAY)
 8001d02:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001d06:	d0f8      	beq.n	8001cfa <HAL_I2C_Mem_Read+0x218>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d08:	b12c      	cbz	r4, 8001d16 <HAL_I2C_Mem_Read+0x234>
 8001d0a:	f7ff fa2d 	bl	8001168 <HAL_GetTick>
 8001d0e:	eba0 0009 	sub.w	r0, r0, r9
 8001d12:	4284      	cmp	r4, r0
 8001d14:	d2f0      	bcs.n	8001cf8 <HAL_I2C_Mem_Read+0x216>
          hi2c->State= HAL_I2C_STATE_READY;
 8001d16:	2320      	movs	r3, #32
 8001d18:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
            return HAL_TIMEOUT;
 8001d22:	f04f 0803 	mov.w	r8, #3
 8001d26:	e020      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 8001d28:	4621      	mov	r1, r4
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f7ff fd8c 	bl	8001848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d30:	b958      	cbnz	r0, 8001d4a <HAL_I2C_Mem_Read+0x268>
        (*pData++) = hi2c->Instance->DR;
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	703b      	strb	r3, [r7, #0]
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	f012 0f04 	tst.w	r2, #4
 8001d40:	d10b      	bne.n	8001d5a <HAL_I2C_Mem_Read+0x278>
        (*pData++) = hi2c->Instance->DR;
 8001d42:	1c7b      	adds	r3, r7, #1
        Size--;
 8001d44:	3e01      	subs	r6, #1
 8001d46:	b2b6      	uxth	r6, r6
 8001d48:	e7cb      	b.n	8001ce2 <HAL_I2C_Mem_Read+0x200>
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d4a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
            return HAL_TIMEOUT;
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	bf14      	ite	ne
 8001d50:	f04f 0801 	movne.w	r8, #1
 8001d54:	f04f 0803 	moveq.w	r8, #3
 8001d58:	e007      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
          (*pData++) = hi2c->Instance->DR;
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	1cbb      	adds	r3, r7, #2
 8001d5e:	707a      	strb	r2, [r7, #1]
          Size--;
 8001d60:	3e02      	subs	r6, #2
 8001d62:	b2b6      	uxth	r6, r6
 8001d64:	e7bd      	b.n	8001ce2 <HAL_I2C_Mem_Read+0x200>
    return HAL_BUSY;
 8001d66:	f04f 0802 	mov.w	r8, #2
}
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	b009      	add	sp, #36	@ 0x24
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8001d72:	f04f 0801 	mov.w	r8, #1
 8001d76:	e7f8      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
    __HAL_LOCK(hi2c);
 8001d78:	f04f 0802 	mov.w	r8, #2
 8001d7c:	e7f5      	b.n	8001d6a <HAL_I2C_Mem_Read+0x288>
	...

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d88:	6803      	ldr	r3, [r0, #0]
 8001d8a:	f013 0f01 	tst.w	r3, #1
 8001d8e:	d036      	beq.n	8001dfe <HAL_RCC_OscConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d90:	4b9f      	ldr	r3, [pc, #636]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d012      	beq.n	8001dce <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dae:	d05e      	beq.n	8001e6e <HAL_RCC_OscConfig+0xee>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d17b      	bne.n	8001eac <HAL_RCC_OscConfig+0x12c>
 8001db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001db8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e054      	b.n	8001e78 <HAL_RCC_OscConfig+0xf8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dce:	4b90      	ldr	r3, [pc, #576]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001dd6:	d0e7      	beq.n	8001da8 <HAL_RCC_OscConfig+0x28>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ddc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4a8b      	ldr	r2, [pc, #556]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	f013 0f01 	tst.w	r3, #1
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_OscConfig+0x7e>
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8251 	beq.w	80022a0 <HAL_RCC_OscConfig+0x520>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	f013 0f02 	tst.w	r3, #2
 8001e04:	f000 80a9 	beq.w	8001f5a <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e08:	4b81      	ldr	r3, [pc, #516]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f013 0f0c 	tst.w	r3, #12
 8001e10:	f000 8084 	beq.w	8001f1c <HAL_RCC_OscConfig+0x19c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e14:	4b7e      	ldr	r3, [pc, #504]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d078      	beq.n	8001f12 <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d0 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x248>
 8001e28:	2201      	movs	r2, #1
 8001e2a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8001e38:	f503 0384 	add.w	r3, r3, #4325376	@ 0x420000
 8001e3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f993 	bl	8001168 <HAL_GetTick>
 8001e42:	4606      	mov	r6, r0
 8001e44:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4f72      	ldr	r7, [pc, #456]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001e48:	fa95 f3a5 	rbit	r3, r5
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	fa95 f2a5 	rbit	r2, r5
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	40d3      	lsrs	r3, r2
 8001e58:	f013 0f01 	tst.w	r3, #1
 8001e5c:	f040 80a6 	bne.w	8001fac <HAL_RCC_OscConfig+0x22c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f982 	bl	8001168 <HAL_GetTick>
 8001e64:	1b80      	subs	r0, r0, r6
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d9ee      	bls.n	8001e48 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e21d      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	4a68      	ldr	r2, [pc, #416]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	6863      	ldr	r3, [r4, #4]
 8001e7a:	b38b      	cbz	r3, 8001ee0 <HAL_RCC_OscConfig+0x160>
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f974 	bl	8001168 <HAL_GetTick>
 8001e80:	4606      	mov	r6, r0
 8001e82:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4f62      	ldr	r7, [pc, #392]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001e88:	fa95 f3a5 	rbit	r3, r5
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	fa95 f2a5 	rbit	r2, r5
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	40d3      	lsrs	r3, r2
 8001e98:	f013 0f01 	tst.w	r3, #1
 8001e9c:	d1af      	bne.n	8001dfe <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7ff f963 	bl	8001168 <HAL_GetTick>
 8001ea2:	1b80      	subs	r0, r0, r6
 8001ea4:	2864      	cmp	r0, #100	@ 0x64
 8001ea6:	d9ef      	bls.n	8001e88 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	e1fe      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x146>
 8001eb2:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e7d8      	b.n	8001e78 <HAL_RCC_OscConfig+0xf8>
 8001ec6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001eca:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e7cb      	b.n	8001e78 <HAL_RCC_OscConfig+0xf8>
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f942 	bl	8001168 <HAL_GetTick>
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4f49      	ldr	r7, [pc, #292]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001eec:	fa95 f3a5 	rbit	r3, r5
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	fa95 f2a5 	rbit	r2, r5
 8001ef6:	fab2 f282 	clz	r2, r2
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	f013 0f01 	tst.w	r3, #1
 8001f00:	f43f af7d 	beq.w	8001dfe <HAL_RCC_OscConfig+0x7e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f930 	bl	8001168 <HAL_GetTick>
 8001f08:	1b80      	subs	r0, r0, r6
 8001f0a:	2864      	cmp	r0, #100	@ 0x64
 8001f0c:	d9ee      	bls.n	8001eec <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 8001f0e:	2003      	movs	r0, #3
 8001f10:	e1cb      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f12:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001f1a:	d181      	bne.n	8001e20 <HAL_RCC_OscConfig+0xa0>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4a3b      	ldr	r2, [pc, #236]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	f013 0f01 	tst.w	r3, #1
 8001f36:	d003      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1c0>
 8001f38:	6923      	ldr	r3, [r4, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	f040 81b2 	bne.w	80022a4 <HAL_RCC_OscConfig+0x524>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4833      	ldr	r0, [pc, #204]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	22f8      	movs	r2, #248	@ 0xf8
 8001f46:	fa92 f2a2 	rbit	r2, r2
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	6963      	ldr	r3, [r4, #20]
 8001f50:	4093      	lsls	r3, r2
 8001f52:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8001f56:	4313      	orrs	r3, r2
 8001f58:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	f013 0f08 	tst.w	r3, #8
 8001f60:	d05d      	beq.n	800201e <HAL_RCC_OscConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f62:	69a3      	ldr	r3, [r4, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8092 	beq.w	800208e <HAL_RCC_OscConfig+0x30e>
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	4927      	ldr	r1, [pc, #156]	@ (8002014 <HAL_RCC_OscConfig+0x294>)
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f8f5 	bl	8001168 <HAL_GetTick>
 8001f7e:	4606      	mov	r6, r0
 8001f80:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	4f23      	ldr	r7, [pc, #140]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001f84:	fa95 f3a5 	rbit	r3, r5
 8001f88:	fa95 f3a5 	rbit	r3, r5
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	fa95 f2a5 	rbit	r2, r5
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	40d3      	lsrs	r3, r2
 8001f98:	f013 0f01 	tst.w	r3, #1
 8001f9c:	d13c      	bne.n	8002018 <HAL_RCC_OscConfig+0x298>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7ff f8e3 	bl	8001168 <HAL_GetTick>
 8001fa2:	1b80      	subs	r0, r0, r6
 8001fa4:	2802      	cmp	r0, #2
 8001fa6:	d9ed      	bls.n	8001f84 <HAL_RCC_OscConfig+0x204>
        {
          return HAL_TIMEOUT;
 8001fa8:	2003      	movs	r0, #3
 8001faa:	e17e      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4818      	ldr	r0, [pc, #96]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001fae:	6801      	ldr	r1, [r0, #0]
 8001fb0:	22f8      	movs	r2, #248	@ 0xf8
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	6963      	ldr	r3, [r4, #20]
 8001fbc:	4093      	lsls	r3, r2
 8001fbe:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	6003      	str	r3, [r0, #0]
 8001fc6:	e7c8      	b.n	8001f5a <HAL_RCC_OscConfig+0x1da>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8001fd8:	f503 0384 	add.w	r3, r3, #4325376	@ 0x420000
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f8c2 	bl	8001168 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe8:	4f09      	ldr	r7, [pc, #36]	@ (8002010 <HAL_RCC_OscConfig+0x290>)
 8001fea:	fa95 f3a5 	rbit	r3, r5
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	fa95 f2a5 	rbit	r2, r5
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	40d3      	lsrs	r3, r2
 8001ffa:	f013 0f01 	tst.w	r3, #1
 8001ffe:	d0ac      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff f8b2 	bl	8001168 <HAL_GetTick>
 8002004:	1b80      	subs	r0, r0, r6
 8002006:	2802      	cmp	r0, #2
 8002008:	d9ef      	bls.n	8001fea <HAL_RCC_OscConfig+0x26a>
            return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
 800200c:	e14d      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	42420480 	.word	0x42420480
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff f8ab 	bl	8001174 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	f013 0f04 	tst.w	r3, #4
 8002024:	d155      	bne.n	80020d2 <HAL_RCC_OscConfig+0x352>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	69e3      	ldr	r3, [r4, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 813d 	beq.w	80022a8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202e:	4aa1      	ldr	r2, [pc, #644]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002030:	6852      	ldr	r2, [r2, #4]
 8002032:	f002 020c 	and.w	r2, r2, #12
 8002036:	2a08      	cmp	r2, #8
 8002038:	f000 813a 	beq.w	80022b0 <HAL_RCC_OscConfig+0x530>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	2b02      	cmp	r3, #2
 800203e:	f000 80cc 	beq.w	80021da <HAL_RCC_OscConfig+0x45a>
 8002042:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002046:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8002054:	f503 0384 	add.w	r3, r3, #4325376	@ 0x420000
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f884 	bl	8001168 <HAL_GetTick>
 8002060:	4605      	mov	r5, r0
 8002062:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4e93      	ldr	r6, [pc, #588]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002068:	fa94 f3a4 	rbit	r3, r4
 800206c:	6833      	ldr	r3, [r6, #0]
 800206e:	fa94 f2a4 	rbit	r2, r4
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	40d3      	lsrs	r3, r2
 8002078:	f013 0f01 	tst.w	r3, #1
 800207c:	f000 810e 	beq.w	800229c <HAL_RCC_OscConfig+0x51c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f872 	bl	8001168 <HAL_GetTick>
 8002084:	1b40      	subs	r0, r0, r5
 8002086:	2802      	cmp	r0, #2
 8002088:	d9ee      	bls.n	8002068 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800208a:	2003      	movs	r0, #3
 800208c:	e10d      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
 800208e:	2301      	movs	r3, #1
 8002090:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	4a87      	ldr	r2, [pc, #540]	@ (80022b8 <HAL_RCC_OscConfig+0x538>)
 800209a:	2100      	movs	r1, #0
 800209c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      tickstart = HAL_GetTick();
 80020a0:	f7ff f862 	bl	8001168 <HAL_GetTick>
 80020a4:	4606      	mov	r6, r0
 80020a6:	2502      	movs	r5, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	4f82      	ldr	r7, [pc, #520]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 80020aa:	fa95 f3a5 	rbit	r3, r5
 80020ae:	fa95 f3a5 	rbit	r3, r5
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	fa95 f2a5 	rbit	r2, r5
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	40d3      	lsrs	r3, r2
 80020be:	f013 0f01 	tst.w	r3, #1
 80020c2:	d0ac      	beq.n	800201e <HAL_RCC_OscConfig+0x29e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff f850 	bl	8001168 <HAL_GetTick>
 80020c8:	1b80      	subs	r0, r0, r6
 80020ca:	2802      	cmp	r0, #2
 80020cc:	d9ed      	bls.n	80020aa <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 80020ce:	2003      	movs	r0, #3
 80020d0:	e0eb      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b78      	ldr	r3, [pc, #480]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4a75      	ldr	r2, [pc, #468]	@ (80022bc <HAL_RCC_OscConfig+0x53c>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020f0:	f7ff f83a 	bl	8001168 <HAL_GetTick>
 80020f4:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020f6:	4e71      	ldr	r6, [pc, #452]	@ (80022bc <HAL_RCC_OscConfig+0x53c>)
 80020f8:	6833      	ldr	r3, [r6, #0]
 80020fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x38e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7ff f832 	bl	8001168 <HAL_GetTick>
 8002104:	1b40      	subs	r0, r0, r5
 8002106:	2864      	cmp	r0, #100	@ 0x64
 8002108:	d9f6      	bls.n	80020f8 <HAL_RCC_OscConfig+0x378>
          return HAL_TIMEOUT;
 800210a:	2003      	movs	r0, #3
 800210c:	e0cd      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	68e3      	ldr	r3, [r4, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d00d      	beq.n	8002130 <HAL_RCC_OscConfig+0x3b0>
 8002114:	bb7b      	cbnz	r3, 8002176 <HAL_RCC_OscConfig+0x3f6>
 8002116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800211a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	f022 0204 	bic.w	r2, r2, #4
 800212c:	621a      	str	r2, [r3, #32]
 800212e:	e004      	b.n	800213a <HAL_RCC_OscConfig+0x3ba>
 8002130:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002132:	6a13      	ldr	r3, [r2, #32]
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213a:	68e3      	ldr	r3, [r4, #12]
 800213c:	b38b      	cbz	r3, 80021a2 <HAL_RCC_OscConfig+0x422>
      tickstart = HAL_GetTick();
 800213e:	f7ff f813 	bl	8001168 <HAL_GetTick>
 8002142:	4606      	mov	r6, r0
 8002144:	2502      	movs	r5, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4f5b      	ldr	r7, [pc, #364]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f241 3888 	movw	r8, #5000	@ 0x1388
 800214c:	fa95 f3a5 	rbit	r3, r5
 8002150:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	fa95 f2a5 	rbit	r2, r5
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	f013 0f01 	tst.w	r3, #1
 8002164:	f47f af5f 	bne.w	8002026 <HAL_RCC_OscConfig+0x2a6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe fffe 	bl	8001168 <HAL_GetTick>
 800216c:	1b80      	subs	r0, r0, r6
 800216e:	4540      	cmp	r0, r8
 8002170:	d9ec      	bls.n	800214c <HAL_RCC_OscConfig+0x3cc>
          return HAL_TIMEOUT;
 8002172:	2003      	movs	r0, #3
 8002174:	e099      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	2b05      	cmp	r3, #5
 8002178:	d009      	beq.n	800218e <HAL_RCC_OscConfig+0x40e>
 800217a:	4b4e      	ldr	r3, [pc, #312]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	621a      	str	r2, [r3, #32]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	621a      	str	r2, [r3, #32]
 800218c:	e7d5      	b.n	800213a <HAL_RCC_OscConfig+0x3ba>
 800218e:	4b49      	ldr	r3, [pc, #292]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	f042 0204 	orr.w	r2, r2, #4
 8002196:	621a      	str	r2, [r3, #32]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	621a      	str	r2, [r3, #32]
 80021a0:	e7cb      	b.n	800213a <HAL_RCC_OscConfig+0x3ba>
      tickstart = HAL_GetTick();
 80021a2:	f7fe ffe1 	bl	8001168 <HAL_GetTick>
 80021a6:	4606      	mov	r6, r0
 80021a8:	2502      	movs	r5, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021aa:	4f42      	ldr	r7, [pc, #264]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f241 3888 	movw	r8, #5000	@ 0x1388
 80021b0:	fa95 f3a5 	rbit	r3, r5
 80021b4:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	fa95 f2a5 	rbit	r2, r5
 80021be:	fab2 f282 	clz	r2, r2
 80021c2:	40d3      	lsrs	r3, r2
 80021c4:	f013 0f01 	tst.w	r3, #1
 80021c8:	f43f af2d 	beq.w	8002026 <HAL_RCC_OscConfig+0x2a6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe ffcc 	bl	8001168 <HAL_GetTick>
 80021d0:	1b80      	subs	r0, r0, r6
 80021d2:	4540      	cmp	r0, r8
 80021d4:	d9ec      	bls.n	80021b0 <HAL_RCC_OscConfig+0x430>
          return HAL_TIMEOUT;
 80021d6:	2003      	movs	r0, #3
 80021d8:	e067      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
 80021da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021de:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80021ec:	f503 0384 	add.w	r3, r3, #4325376	@ 0x420000
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021f4:	f7fe ffb8 	bl	8001168 <HAL_GetTick>
 80021f8:	4606      	mov	r6, r0
 80021fa:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	4f2d      	ldr	r7, [pc, #180]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002200:	fa95 f3a5 	rbit	r3, r5
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	fa95 f2a5 	rbit	r2, r5
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	40d3      	lsrs	r3, r2
 8002210:	f013 0f01 	tst.w	r3, #1
 8002214:	d006      	beq.n	8002224 <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe ffa7 	bl	8001168 <HAL_GetTick>
 800221a:	1b80      	subs	r0, r0, r6
 800221c:	2802      	cmp	r0, #2
 800221e:	d9ef      	bls.n	8002200 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8002220:	2003      	movs	r0, #3
 8002222:	e042      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	6a23      	ldr	r3, [r4, #32]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222a:	d02d      	beq.n	8002288 <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222c:	4921      	ldr	r1, [pc, #132]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 800222e:	684a      	ldr	r2, [r1, #4]
 8002230:	6a23      	ldr	r3, [r4, #32]
 8002232:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002234:	4303      	orrs	r3, r0
 8002236:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
 800223e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002242:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8002250:	f503 0384 	add.w	r3, r3, #4325376	@ 0x420000
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002258:	f7fe ff86 	bl	8001168 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0
 800225e:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002262:	4e14      	ldr	r6, [pc, #80]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 8002264:	fa94 f3a4 	rbit	r3, r4
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	fa94 f2a4 	rbit	r2, r4
 800226e:	fab2 f282 	clz	r2, r2
 8002272:	40d3      	lsrs	r3, r2
 8002274:	f013 0f01 	tst.w	r3, #1
 8002278:	d10e      	bne.n	8002298 <HAL_RCC_OscConfig+0x518>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe ff75 	bl	8001168 <HAL_GetTick>
 800227e:	1b40      	subs	r0, r0, r5
 8002280:	2802      	cmp	r0, #2
 8002282:	d9ef      	bls.n	8002264 <HAL_RCC_OscConfig+0x4e4>
            return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e010      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002288:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <HAL_RCC_OscConfig+0x534>)
 800228a:	6853      	ldr	r3, [r2, #4]
 800228c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002290:	68a1      	ldr	r1, [r4, #8]
 8002292:	430b      	orrs	r3, r1
 8002294:	6053      	str	r3, [r2, #4]
 8002296:	e7c9      	b.n	800222c <HAL_RCC_OscConfig+0x4ac>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002298:	2000      	movs	r0, #0
 800229a:	e006      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
 800229c:	2000      	movs	r0, #0
 800229e:	e004      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
        return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
 80022a2:	e002      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
        return HAL_ERROR;
 80022a4:	2001      	movs	r0, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
  return HAL_OK;
 80022a8:	2000      	movs	r0, #0
}
 80022aa:	b002      	add	sp, #8
 80022ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
 80022b2:	e7fa      	b.n	80022aa <HAL_RCC_OscConfig+0x52a>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	42420480 	.word	0x42420480
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_RCC_GetSysClockFreq+0x7c>)
 80022c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c6:	f10d 0c18 	add.w	ip, sp, #24
 80022ca:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80022ce:	f240 2301 	movw	r3, #513	@ 0x201
 80022d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x80>)
 80022d8:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	2a08      	cmp	r2, #8
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e2:	4818      	ldr	r0, [pc, #96]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x84>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022e4:	b006      	add	sp, #24
 80022e6:	4770      	bx	lr
 80022e8:	f44f 1170 	mov.w	r1, #3932160	@ 0x3c0000
 80022ec:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80022f0:	fab1 f181 	clz	r1, r1
 80022f4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022f8:	40ca      	lsrs	r2, r1
 80022fa:	3218      	adds	r2, #24
 80022fc:	446a      	add	r2, sp
 80022fe:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002302:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002306:	d014      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x72>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002308:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x80>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	fab2 f282 	clz	r2, r2
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	40d3      	lsrs	r3, r2
 800231e:	3318      	adds	r3, #24
 8002320:	446b      	add	r3, sp
 8002322:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x84>)
 8002328:	fbb3 f3f2 	udiv	r3, r3, r2
 800232c:	fb03 f000 	mul.w	r0, r3, r0
 8002330:	e7d8      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x88>)
 8002334:	fb03 f000 	mul.w	r0, r3, r0
 8002338:	e7d4      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x24>
 800233a:	bf00      	nop
 800233c:	080076f8 	.word	0x080076f8
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	003d0900 	.word	0x003d0900

0800234c <HAL_RCC_ClockConfig>:
{
 800234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002350:	4604      	mov	r4, r0
 8002352:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002354:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	428b      	cmp	r3, r1
 800235e:	d20b      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002360:	4a63      	ldr	r2, [pc, #396]	@ (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	f023 0307 	bic.w	r3, r3, #7
 8002368:	430b      	orrs	r3, r1
 800236a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800236c:	6813      	ldr	r3, [r2, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	428b      	cmp	r3, r1
 8002374:	f040 80b6 	bne.w	80024e4 <HAL_RCC_ClockConfig+0x198>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	f013 0f02 	tst.w	r3, #2
 800237e:	d006      	beq.n	800238e <HAL_RCC_ClockConfig+0x42>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4a5c      	ldr	r2, [pc, #368]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 8002382:	6853      	ldr	r3, [r2, #4]
 8002384:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002388:	68a1      	ldr	r1, [r4, #8]
 800238a:	430b      	orrs	r3, r1
 800238c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	f013 0f01 	tst.w	r3, #1
 8002394:	d067      	beq.n	8002466 <HAL_RCC_ClockConfig+0x11a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	2a01      	cmp	r2, #1
 800239a:	d02c      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239c:	2a02      	cmp	r2, #2
 800239e:	d03b      	beq.n	8002418 <HAL_RCC_ClockConfig+0xcc>
 80023a0:	2302      	movs	r3, #2
 80023a2:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4953      	ldr	r1, [pc, #332]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80023a8:	6809      	ldr	r1, [r1, #0]
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	fa21 f303 	lsr.w	r3, r1, r3
 80023b6:	f013 0f01 	tst.w	r3, #1
 80023ba:	f000 8095 	beq.w	80024e8 <HAL_RCC_ClockConfig+0x19c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	494d      	ldr	r1, [pc, #308]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80023c0:	684b      	ldr	r3, [r1, #4]
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80023ca:	f7fe fecd 	bl	8001168 <HAL_GetTick>
 80023ce:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d0:	6863      	ldr	r3, [r4, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d029      	beq.n	800242a <HAL_RCC_ClockConfig+0xde>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023da:	4f46      	ldr	r7, [pc, #280]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f013 0f0c 	tst.w	r3, #12
 80023e6:	d03e      	beq.n	8002466 <HAL_RCC_ClockConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe febe 	bl	8001168 <HAL_GetTick>
 80023ec:	1b83      	subs	r3, r0, r6
 80023ee:	4543      	cmp	r3, r8
 80023f0:	d9f6      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e074      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
 80023f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023fa:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	493d      	ldr	r1, [pc, #244]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 8002400:	6809      	ldr	r1, [r1, #0]
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	fa21 f303 	lsr.w	r3, r1, r3
 800240e:	f013 0f01 	tst.w	r3, #1
 8002412:	d1d4      	bne.n	80023be <HAL_RCC_ClockConfig+0x72>
        return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e063      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
 8002418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	4934      	ldr	r1, [pc, #208]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 8002422:	6809      	ldr	r1, [r1, #0]
 8002424:	fa93 f3a3 	rbit	r3, r3
      }
 8002428:	e7c9      	b.n	80023be <HAL_RCC_ClockConfig+0x72>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800242a:	4f32      	ldr	r7, [pc, #200]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d015      	beq.n	8002466 <HAL_RCC_ClockConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243a:	f7fe fe95 	bl	8001168 <HAL_GetTick>
 800243e:	1b83      	subs	r3, r0, r6
 8002440:	4543      	cmp	r3, r8
 8002442:	d9f5      	bls.n	8002430 <HAL_RCC_ClockConfig+0xe4>
          return HAL_TIMEOUT;
 8002444:	2003      	movs	r0, #3
 8002446:	e04b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4f2a      	ldr	r7, [pc, #168]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d006      	beq.n	8002466 <HAL_RCC_ClockConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fe86 	bl	8001168 <HAL_GetTick>
 800245c:	1b80      	subs	r0, r0, r6
 800245e:	4540      	cmp	r0, r8
 8002460:	d9f5      	bls.n	800244e <HAL_RCC_ClockConfig+0x102>
          return HAL_TIMEOUT;
 8002462:	2003      	movs	r0, #3
 8002464:	e03c      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002466:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	42ab      	cmp	r3, r5
 8002470:	d90a      	bls.n	8002488 <HAL_RCC_ClockConfig+0x13c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f023 0307 	bic.w	r3, r3, #7
 800247a:	432b      	orrs	r3, r5
 800247c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	42ab      	cmp	r3, r5
 8002486:	d131      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	f013 0f04 	tst.w	r3, #4
 800248e:	d006      	beq.n	800249e <HAL_RCC_ClockConfig+0x152>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 8002492:	6853      	ldr	r3, [r2, #4]
 8002494:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002498:	68e1      	ldr	r1, [r4, #12]
 800249a:	430b      	orrs	r3, r1
 800249c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	f013 0f08 	tst.w	r3, #8
 80024a4:	d007      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x16a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024a6:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80024a8:	6853      	ldr	r3, [r2, #4]
 80024aa:	6921      	ldr	r1, [r4, #16]
 80024ac:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80024b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024b4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024b6:	f7ff ff03 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	22f0      	movs	r2, #240	@ 0xf0
 80024c0:	fa92 f2a2 	rbit	r2, r2
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024cc:	40d3      	lsrs	r3, r2
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_RCC_ClockConfig+0x1ac>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	40d8      	lsrs	r0, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1b0>)
 80024d6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fe17 	bl	800110c <HAL_InitTick>
  return HAL_OK;
 80024de:	2000      	movs	r0, #0
}
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e7fb      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
        return HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
 80024ea:	e7f9      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
 80024ee:	e7f7      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08007780 	.word	0x08007780
 80024fc:	200001bc 	.word	0x200001bc

08002500 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002500:	4b01      	ldr	r3, [pc, #4]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x8>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200001bc 	.word	0x200001bc

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002514:	fa92 f2a2 	rbit	r2, r2
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002520:	40d3      	lsrs	r3, r2
 8002522:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002528:	6810      	ldr	r0, [r2, #0]
}    
 800252a:	40d8      	lsrs	r0, r3
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	08007778 	.word	0x08007778
 8002538:	200001bc 	.word	0x200001bc

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	fab2 f282 	clz	r2, r2
 800254c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002550:	40d3      	lsrs	r3, r2
 8002552:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002558:	6810      	ldr	r0, [r2, #0]
} 
 800255a:	40d8      	lsrs	r0, r3
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	08007778 	.word	0x08007778
 8002568:	200001bc 	.word	0x200001bc

0800256c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256e:	6a03      	ldr	r3, [r0, #32]
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002576:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800257c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	680d      	ldr	r5, [r1, #0]
 8002582:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002584:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002588:	688d      	ldr	r5, [r1, #8]
 800258a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800258c:	4d0b      	ldr	r5, [pc, #44]	@ (80025bc <TIM_OC1_SetConfig+0x50>)
 800258e:	42a8      	cmp	r0, r5
 8002590:	d006      	beq.n	80025a0 <TIM_OC1_SetConfig+0x34>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002592:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002594:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002596:	684a      	ldr	r2, [r1, #4]
 8002598:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259a:	6203      	str	r3, [r0, #32]
}
 800259c:	bc70      	pop	{r4, r5, r6}
 800259e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80025a0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80025a4:	68cd      	ldr	r5, [r1, #12]
 80025a6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80025a8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ac:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b0:	694d      	ldr	r5, [r1, #20]
 80025b2:	698e      	ldr	r6, [r1, #24]
 80025b4:	4335      	orrs	r5, r6
 80025b6:	432c      	orrs	r4, r5
 80025b8:	e7eb      	b.n	8002592 <TIM_OC1_SetConfig+0x26>
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00

080025c0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025c2:	6a03      	ldr	r3, [r0, #32]
 80025c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d4:	680d      	ldr	r5, [r1, #0]
 80025d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80025dc:	688d      	ldr	r5, [r1, #8]
 80025de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025e2:	4d0c      	ldr	r5, [pc, #48]	@ (8002614 <TIM_OC3_SetConfig+0x54>)
 80025e4:	42a8      	cmp	r0, r5
 80025e6:	d006      	beq.n	80025f6 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025ec:	684a      	ldr	r2, [r1, #4]
 80025ee:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f0:	6203      	str	r3, [r0, #32]
}
 80025f2:	bc70      	pop	{r4, r5, r6}
 80025f4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80025f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80025fa:	68cd      	ldr	r5, [r1, #12]
 80025fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002600:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002604:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002608:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800260a:	698e      	ldr	r6, [r1, #24]
 800260c:	4335      	orrs	r5, r6
 800260e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002612:	e7e9      	b.n	80025e8 <TIM_OC3_SetConfig+0x28>
 8002614:	40012c00 	.word	0x40012c00

08002618 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261a:	6a03      	ldr	r3, [r0, #32]
 800261c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002620:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002628:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800262c:	680d      	ldr	r5, [r1, #0]
 800262e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002636:	688d      	ldr	r5, [r1, #8]
 8002638:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800263c:	4d07      	ldr	r5, [pc, #28]	@ (800265c <TIM_OC4_SetConfig+0x44>)
 800263e:	42a8      	cmp	r0, r5
 8002640:	d006      	beq.n	8002650 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002642:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002644:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002646:	684a      	ldr	r2, [r1, #4]
 8002648:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264a:	6203      	str	r3, [r0, #32]
}
 800264c:	bc30      	pop	{r4, r5}
 800264e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002650:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002654:	694d      	ldr	r5, [r1, #20]
 8002656:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800265a:	e7f2      	b.n	8002642 <TIM_OC4_SetConfig+0x2a>
 800265c:	40012c00 	.word	0x40012c00

08002660 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002660:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002662:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <TIM_Base_SetConfig+0x80>)
 8002664:	4290      	cmp	r0, r2
 8002666:	d010      	beq.n	800268a <TIM_Base_SetConfig+0x2a>
 8002668:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800266c:	d01e      	beq.n	80026ac <TIM_Base_SetConfig+0x4c>
 800266e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002672:	4290      	cmp	r0, r2
 8002674:	d02a      	beq.n	80026cc <TIM_Base_SetConfig+0x6c>
 8002676:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800267a:	4290      	cmp	r0, r2
 800267c:	d02b      	beq.n	80026d6 <TIM_Base_SetConfig+0x76>
  TIMx->CR1 = tmpcr1;
 800267e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	688b      	ldr	r3, [r1, #8]
 8002682:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002684:	680b      	ldr	r3, [r1, #0]
 8002686:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002688:	e01d      	b.n	80026c6 <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800268a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800268e:	684a      	ldr	r2, [r1, #4]
 8002690:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002696:	68ca      	ldr	r2, [r1, #12]
 8002698:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800269a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800269c:	688b      	ldr	r3, [r1, #8]
 800269e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026a0:	680b      	ldr	r3, [r1, #0]
 80026a2:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80026a4:	690a      	ldr	r2, [r1, #16]
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <TIM_Base_SetConfig+0x80>)
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80026aa:	e00c      	b.n	80026c6 <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80026b0:	684a      	ldr	r2, [r1, #4]
 80026b2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b8:	68ca      	ldr	r2, [r1, #12]
 80026ba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80026bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026be:	688b      	ldr	r3, [r1, #8]
 80026c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026c2:	680b      	ldr	r3, [r1, #0]
 80026c4:	6283      	str	r3, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80026c6:	2301      	movs	r3, #1
 80026c8:	6143      	str	r3, [r0, #20]
}
 80026ca:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d4:	e7ee      	b.n	80026b4 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80026da:	684a      	ldr	r2, [r1, #4]
 80026dc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026de:	e7e9      	b.n	80026b4 <TIM_Base_SetConfig+0x54>
 80026e0:	40012c00 	.word	0x40012c00

080026e4 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80026e4:	b1b0      	cbz	r0, 8002714 <HAL_TIM_PWM_Init+0x30>
{
 80026e6:	b510      	push	{r4, lr}
 80026e8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80026ea:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80026ee:	b163      	cbz	r3, 800270a <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 80026f0:	2302      	movs	r3, #2
 80026f2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f6:	4621      	mov	r1, r4
 80026f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80026fc:	f7ff ffb0 	bl	8002660 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002700:	2301      	movs	r3, #1
 8002702:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  return HAL_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800270a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
    HAL_TIM_PWM_MspInit(htim);
 800270e:	f002 fe37 	bl	8005380 <HAL_TIM_PWM_MspInit>
 8002712:	e7ed      	b.n	80026f0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	4770      	bx	lr

08002718 <TIM_OC2_SetConfig>:
{
 8002718:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271a:	6a03      	ldr	r3, [r0, #32]
 800271c:	f023 0310 	bic.w	r3, r3, #16
 8002720:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002722:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002724:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002726:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002728:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800272c:	680d      	ldr	r5, [r1, #0]
 800272e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002732:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002736:	688d      	ldr	r5, [r1, #8]
 8002738:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800273c:	4d0c      	ldr	r5, [pc, #48]	@ (8002770 <TIM_OC2_SetConfig+0x58>)
 800273e:	42a8      	cmp	r0, r5
 8002740:	d006      	beq.n	8002750 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002742:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002744:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002746:	684a      	ldr	r2, [r1, #4]
 8002748:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800274a:	6203      	str	r3, [r0, #32]
}
 800274c:	bc70      	pop	{r4, r5, r6}
 800274e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002754:	68cd      	ldr	r5, [r1, #12]
 8002756:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800275a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800275e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002762:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002764:	698e      	ldr	r6, [r1, #24]
 8002766:	4335      	orrs	r5, r6
 8002768:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800276c:	e7e9      	b.n	8002742 <TIM_OC2_SetConfig+0x2a>
 800276e:	bf00      	nop
 8002770:	40012c00 	.word	0x40012c00

08002774 <HAL_TIM_PWM_ConfigChannel>:
{
 8002774:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002776:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800277a:	2b01      	cmp	r3, #1
 800277c:	d066      	beq.n	800284c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800277e:	4604      	mov	r4, r0
 8002780:	460d      	mov	r5, r1
 8002782:	2301      	movs	r3, #1
 8002784:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	2302      	movs	r3, #2
 800278a:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
  switch (Channel)
 800278e:	2a0c      	cmp	r2, #12
 8002790:	d81a      	bhi.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002792:	e8df f002 	tbb	[pc, r2]
 8002796:	1907      	.short	0x1907
 8002798:	19201919 	.word	0x19201919
 800279c:	19341919 	.word	0x19341919
 80027a0:	1919      	.short	0x1919
 80027a2:	47          	.byte	0x47
 80027a3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a4:	6800      	ldr	r0, [r0, #0]
 80027a6:	f7ff fee1 	bl	800256c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	6993      	ldr	r3, [r2, #24]
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	6993      	ldr	r3, [r2, #24]
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	6993      	ldr	r3, [r2, #24]
 80027c2:	6929      	ldr	r1, [r5, #16]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  __HAL_UNLOCK(htim);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
}
 80027d4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d6:	6800      	ldr	r0, [r0, #0]
 80027d8:	f7ff ff9e 	bl	8002718 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6993      	ldr	r3, [r2, #24]
 80027e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027e4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	6993      	ldr	r3, [r2, #24]
 80027ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027ee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	6993      	ldr	r3, [r2, #24]
 80027f4:	6929      	ldr	r1, [r5, #16]
 80027f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027fa:	6193      	str	r3, [r2, #24]
    break;
 80027fc:	e7e4      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027fe:	6800      	ldr	r0, [r0, #0]
 8002800:	f7ff fede 	bl	80025c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	69d3      	ldr	r3, [r2, #28]
 8002808:	f043 0308 	orr.w	r3, r3, #8
 800280c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	69d3      	ldr	r3, [r2, #28]
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	69d3      	ldr	r3, [r2, #28]
 800281c:	6929      	ldr	r1, [r5, #16]
 800281e:	430b      	orrs	r3, r1
 8002820:	61d3      	str	r3, [r2, #28]
    break;
 8002822:	e7d1      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002824:	6800      	ldr	r0, [r0, #0]
 8002826:	f7ff fef7 	bl	8002618 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	69d3      	ldr	r3, [r2, #28]
 800282e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002832:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	69d3      	ldr	r3, [r2, #28]
 8002838:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800283c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	69d3      	ldr	r3, [r2, #28]
 8002842:	6929      	ldr	r1, [r5, #16]
 8002844:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002848:	61d3      	str	r3, [r2, #28]
    break;
 800284a:	e7bd      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800284c:	2002      	movs	r0, #2
 800284e:	e7c1      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x60>

08002850 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002850:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002852:	f04f 0c01 	mov.w	ip, #1
 8002856:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800285a:	ea23 030c 	bic.w	r3, r3, ip
 800285e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002860:	6a03      	ldr	r3, [r0, #32]
 8002862:	408a      	lsls	r2, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	6202      	str	r2, [r0, #32]
}
 8002868:	4770      	bx	lr
	...

0800286c <HAL_TIM_PWM_Start>:
{
 800286c:	b510      	push	{r4, lr}
 800286e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002870:	2201      	movs	r2, #1
 8002872:	6800      	ldr	r0, [r0, #0]
 8002874:	f7ff ffec 	bl	8002850 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002878:	6822      	ldr	r2, [r4, #0]
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_TIM_PWM_Start+0x30>)
 800287c:	429a      	cmp	r2, r3
 800287e:	d006      	beq.n	800288e <HAL_TIM_PWM_Start+0x22>
  __HAL_TIM_ENABLE(htim);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6013      	str	r3, [r2, #0]
}
 800288a:	2000      	movs	r0, #0
 800288c:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800288e:	461a      	mov	r2, r3
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002896:	6453      	str	r3, [r2, #68]	@ 0x44
 8002898:	e7f2      	b.n	8002880 <HAL_TIM_PWM_Start+0x14>
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00

080028a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d01e      	beq.n	80028e6 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
{
 80028a8:	b410      	push	{r4}
 80028aa:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	f88c 3039 	strb.w	r3, [ip, #57]	@ 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80028b8:	f8dc 2000 	ldr.w	r2, [ip]
 80028bc:	680b      	ldr	r3, [r1, #0]
 80028be:	684c      	ldr	r4, [r1, #4]
 80028c0:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 80028c2:	688c      	ldr	r4, [r1, #8]
 80028c4:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->LockLevel        |
 80028c6:	68cc      	ldr	r4, [r1, #12]
 80028c8:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->DeadTime         |
 80028ca:	690c      	ldr	r4, [r1, #16]
 80028cc:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakState       |
 80028ce:	694c      	ldr	r4, [r1, #20]
 80028d0:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakPolarity    |
 80028d2:	6989      	ldr	r1, [r1, #24]
 80028d4:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80028d6:	6453      	str	r3, [r2, #68]	@ 0x44
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 80028d8:	f88c 0039 	strb.w	r0, [ip, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80028dc:	2000      	movs	r0, #0
 80028de:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38

  return HAL_OK;
}
 80028e2:	bc10      	pop	{r4}
 80028e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80028e6:	2002      	movs	r0, #2
}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80028ea:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80028ee:	2a01      	cmp	r2, #1
 80028f0:	d022      	beq.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80028f2:	b430      	push	{r4, r5}
 80028f4:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	6862      	ldr	r2, [r4, #4]
 8002906:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800290a:	6062      	str	r2, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	681c      	ldr	r4, [r3, #0]
 800290e:	6862      	ldr	r2, [r4, #4]
 8002910:	680d      	ldr	r5, [r1, #0]
 8002912:	432a      	orrs	r2, r5
 8002914:	6062      	str	r2, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	68a2      	ldr	r2, [r4, #8]
 800291a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800291e:	60a2      	str	r2, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002920:	681c      	ldr	r4, [r3, #0]
 8002922:	68a2      	ldr	r2, [r4, #8]
 8002924:	6849      	ldr	r1, [r1, #4]
 8002926:	430a      	orrs	r2, r1
 8002928:	60a2      	str	r2, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 800292a:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800292e:	2000      	movs	r0, #0
 8002930:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8002934:	bc30      	pop	{r4, r5}
 8002936:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002938:	2002      	movs	r0, #2
}
 800293a:	4770      	bx	lr

0800293c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800293c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002940:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002942:	6802      	ldr	r2, [r0, #0]
 8002944:	6913      	ldr	r3, [r2, #16]
 8002946:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800294a:	68c1      	ldr	r1, [r0, #12]
 800294c:	430b      	orrs	r3, r1
 800294e:	6113      	str	r3, [r2, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8002950:	6801      	ldr	r1, [r0, #0]
 8002952:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002954:	6883      	ldr	r3, [r0, #8]
 8002956:	6900      	ldr	r0, [r0, #16]
 8002958:	4303      	orrs	r3, r0
 800295a:	6960      	ldr	r0, [r4, #20]
 800295c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 800295e:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 8002962:	f022 020c 	bic.w	r2, r2, #12
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6953      	ldr	r3, [r2, #20]
 800296e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002972:	69a1      	ldr	r1, [r4, #24]
 8002974:	430b      	orrs	r3, r1
 8002976:	6153      	str	r3, [r2, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	4b58      	ldr	r3, [pc, #352]	@ (8002adc <UART_SetConfig+0x1a0>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d056      	beq.n	8002a2e <UART_SetConfig+0xf2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002980:	f7ff fdc4 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002988:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800298c:	6863      	ldr	r3, [r4, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fbb0 f6f3 	udiv	r6, r0, r3
 8002994:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8002ae0 <UART_SetConfig+0x1a4>
 8002998:	fba8 3606 	umull	r3, r6, r8, r6
 800299c:	0976      	lsrs	r6, r6, #5
 800299e:	0136      	lsls	r6, r6, #4
 80029a0:	f7ff fdb4 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80029a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ac:	6863      	ldr	r3, [r4, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb0 f7f3 	udiv	r7, r0, r3
 80029b4:	f7ff fdaa 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80029b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029c0:	6863      	ldr	r3, [r4, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80029c8:	fba8 3000 	umull	r3, r0, r8, r0
 80029cc:	0940      	lsrs	r0, r0, #5
 80029ce:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80029d2:	fb09 7710 	mls	r7, r9, r0, r7
 80029d6:	013f      	lsls	r7, r7, #4
 80029d8:	3732      	adds	r7, #50	@ 0x32
 80029da:	fba8 3707 	umull	r3, r7, r8, r7
 80029de:	097f      	lsrs	r7, r7, #5
 80029e0:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
 80029e4:	f7ff fd92 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80029e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb0 f5f3 	udiv	r5, r0, r3
 80029f8:	f7ff fd88 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a0e:	fba8 3000 	umull	r3, r0, r8, r0
 8002a12:	0940      	lsrs	r0, r0, #5
 8002a14:	fb09 5310 	mls	r3, r9, r0, r5
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	3332      	adds	r3, #50	@ 0x32
 8002a1c:	fba8 8303 	umull	r8, r3, r8, r3
 8002a20:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002a24:	433b      	orrs	r3, r7
 8002a26:	4433      	add	r3, r6
 8002a28:	6093      	str	r3, [r2, #8]
  }
}
 8002a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a2e:	f7ff fd85 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a42:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8002ae0 <UART_SetConfig+0x1a4>
 8002a46:	fba8 3707 	umull	r3, r7, r8, r7
 8002a4a:	097f      	lsrs	r7, r7, #5
 8002a4c:	013f      	lsls	r7, r7, #4
 8002a4e:	f7ff fd75 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002a52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a5a:	6863      	ldr	r3, [r4, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	fbb0 f6f3 	udiv	r6, r0, r3
 8002a62:	f7ff fd6b 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a76:	fba8 3000 	umull	r3, r0, r8, r0
 8002a7a:	0940      	lsrs	r0, r0, #5
 8002a7c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8002a80:	fb09 6610 	mls	r6, r9, r0, r6
 8002a84:	0136      	lsls	r6, r6, #4
 8002a86:	3632      	adds	r6, #50	@ 0x32
 8002a88:	fba8 3606 	umull	r3, r6, r8, r6
 8002a8c:	0976      	lsrs	r6, r6, #5
 8002a8e:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
 8002a92:	f7ff fd53 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002a96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a9e:	6863      	ldr	r3, [r4, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fbb0 f5f3 	udiv	r5, r0, r3
 8002aa6:	f7ff fd49 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ab0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002abc:	fba8 3000 	umull	r3, r0, r8, r0
 8002ac0:	0940      	lsrs	r0, r0, #5
 8002ac2:	fb09 5310 	mls	r3, r9, r0, r5
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	3332      	adds	r3, #50	@ 0x32
 8002aca:	fba8 8303 	umull	r8, r3, r8, r3
 8002ace:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002ad2:	4333      	orrs	r3, r6
 8002ad4:	443b      	add	r3, r7
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	e7a7      	b.n	8002a2a <UART_SetConfig+0xee>
 8002ada:	bf00      	nop
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	51eb851f 	.word	0x51eb851f

08002ae4 <HAL_UART_Init>:
  if(huart == NULL)
 8002ae4:	b348      	cbz	r0, 8002b3a <HAL_UART_Init+0x56>
{
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	4604      	mov	r4, r0
  if(huart->State == HAL_UART_STATE_RESET)
 8002aea:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002aee:	b1fb      	cbz	r3, 8002b30 <HAL_UART_Init+0x4c>
  huart->State = HAL_UART_STATE_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  __HAL_UART_DISABLE(huart);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	68d3      	ldr	r3, [r2, #12]
 8002afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002afe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff1b 	bl	800293c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	6913      	ldr	r3, [r2, #16]
 8002b0a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002b0e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	6953      	ldr	r3, [r2, #20]
 8002b14:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002b18:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	68d3      	ldr	r3, [r2, #12]
 8002b1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b22:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	2000      	movs	r0, #0
 8002b26:	63e0      	str	r0, [r4, #60]	@ 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8002b2e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b30:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
    HAL_UART_MspInit(huart);
 8002b34:	f002 fcae 	bl	8005494 <HAL_UART_MspInit>
 8002b38:	e7da      	b.n	8002af0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_UART_Transmit>:
{
 8002b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b40:	4605      	mov	r5, r0
 8002b42:	460e      	mov	r6, r1
 8002b44:	461c      	mov	r4, r3
  tmp_state = huart->State;
 8002b46:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002b4a:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d002      	beq.n	8002b56 <HAL_UART_Transmit+0x18>
 8002b50:	2b22      	cmp	r3, #34	@ 0x22
 8002b52:	f040 80c5 	bne.w	8002ce0 <HAL_UART_Transmit+0x1a2>
    if((pData == NULL) || (Size == 0))
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	f000 80c4 	beq.w	8002ce4 <HAL_UART_Transmit+0x1a6>
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	f000 80c3 	beq.w	8002ce8 <HAL_UART_Transmit+0x1aa>
    __HAL_LOCK(huart);
 8002b62:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f000 80c0 	beq.w	8002cec <HAL_UART_Transmit+0x1ae>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	63eb      	str	r3, [r5, #60]	@ 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002b76:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b22      	cmp	r3, #34	@ 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002b7e:	bf0c      	ite	eq
 8002b80:	2332      	moveq	r3, #50	@ 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002b82:	2312      	movne	r3, #18
 8002b84:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
    huart->TxXferSize = Size;
 8002b88:	84aa      	strh	r2, [r5, #36]	@ 0x24
    while(huart->TxXferCount > 0)
 8002b8a:	e03c      	b.n	8002c06 <HAL_UART_Transmit+0xc8>
  tickstart = HAL_GetTick();
 8002b8c:	f7fe faec 	bl	8001168 <HAL_GetTick>
 8002b90:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002b92:	682a      	ldr	r2, [r5, #0]
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b9a:	d124      	bne.n	8002be6 <HAL_UART_Transmit+0xa8>
      if(Timeout != HAL_MAX_DELAY)
 8002b9c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002ba0:	d0f8      	beq.n	8002b94 <HAL_UART_Transmit+0x56>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002ba2:	b124      	cbz	r4, 8002bae <HAL_UART_Transmit+0x70>
 8002ba4:	f7fe fae0 	bl	8001168 <HAL_GetTick>
 8002ba8:	1bc0      	subs	r0, r0, r7
 8002baa:	4284      	cmp	r4, r0
 8002bac:	d2f1      	bcs.n	8002b92 <HAL_UART_Transmit+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bae:	682a      	ldr	r2, [r5, #0]
 8002bb0:	68d3      	ldr	r3, [r2, #12]
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bb6:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bb8:	682a      	ldr	r2, [r5, #0]
 8002bba:	68d3      	ldr	r3, [r2, #12]
 8002bbc:	f023 0320 	bic.w	r3, r3, #32
 8002bc0:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bc2:	682a      	ldr	r2, [r5, #0]
 8002bc4:	68d3      	ldr	r3, [r2, #12]
 8002bc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bca:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bcc:	682a      	ldr	r2, [r5, #0]
 8002bce:	6953      	ldr	r3, [r2, #20]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
          __HAL_UNLOCK(huart);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
          return HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
 8002be4:	e07d      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002be6:	8833      	ldrh	r3, [r6, #0]
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002bee:	692b      	ldr	r3, [r5, #16]
 8002bf0:	b90b      	cbnz	r3, 8002bf6 <HAL_UART_Transmit+0xb8>
          pData +=2;
 8002bf2:	3602      	adds	r6, #2
 8002bf4:	e004      	b.n	8002c00 <HAL_UART_Transmit+0xc2>
          pData +=1;
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e002      	b.n	8002c00 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002bfa:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002bfe:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 8002c00:	8cea      	ldrh	r2, [r5, #38]	@ 0x26
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d032      	beq.n	8002c6c <HAL_UART_Transmit+0x12e>
      huart->TxXferCount--;
 8002c06:	3a01      	subs	r2, #1
 8002c08:	84ea      	strh	r2, [r5, #38]	@ 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c0a:	68ab      	ldr	r3, [r5, #8]
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c10:	d0bc      	beq.n	8002b8c <HAL_UART_Transmit+0x4e>
  tickstart = HAL_GetTick();
 8002c12:	f7fe faa9 	bl	8001168 <HAL_GetTick>
 8002c16:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002c20:	d1eb      	bne.n	8002bfa <HAL_UART_Transmit+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 8002c22:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002c26:	d0f8      	beq.n	8002c1a <HAL_UART_Transmit+0xdc>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c28:	b124      	cbz	r4, 8002c34 <HAL_UART_Transmit+0xf6>
 8002c2a:	f7fe fa9d 	bl	8001168 <HAL_GetTick>
 8002c2e:	1bc0      	subs	r0, r0, r7
 8002c30:	4284      	cmp	r4, r0
 8002c32:	d2f1      	bcs.n	8002c18 <HAL_UART_Transmit+0xda>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c34:	682a      	ldr	r2, [r5, #0]
 8002c36:	68d3      	ldr	r3, [r2, #12]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3c:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c3e:	682a      	ldr	r2, [r5, #0]
 8002c40:	68d3      	ldr	r3, [r2, #12]
 8002c42:	f023 0320 	bic.w	r3, r3, #32
 8002c46:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c48:	682a      	ldr	r2, [r5, #0]
 8002c4a:	68d3      	ldr	r3, [r2, #12]
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c52:	682a      	ldr	r2, [r5, #0]
 8002c54:	6953      	ldr	r3, [r2, #20]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
          __HAL_UNLOCK(huart);
 8002c62:	2300      	movs	r3, #0
 8002c64:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
          return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e03a      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
  tickstart = HAL_GetTick();
 8002c6c:	f7fe fa7c 	bl	8001168 <HAL_GetTick>
 8002c70:	4606      	mov	r6, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002c72:	682a      	ldr	r2, [r5, #0]
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002c7a:	d124      	bne.n	8002cc6 <HAL_UART_Transmit+0x188>
      if(Timeout != HAL_MAX_DELAY)
 8002c7c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002c80:	d0f8      	beq.n	8002c74 <HAL_UART_Transmit+0x136>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c82:	b124      	cbz	r4, 8002c8e <HAL_UART_Transmit+0x150>
 8002c84:	f7fe fa70 	bl	8001168 <HAL_GetTick>
 8002c88:	1b83      	subs	r3, r0, r6
 8002c8a:	429c      	cmp	r4, r3
 8002c8c:	d2f1      	bcs.n	8002c72 <HAL_UART_Transmit+0x134>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c8e:	682a      	ldr	r2, [r5, #0]
 8002c90:	68d3      	ldr	r3, [r2, #12]
 8002c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c96:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c98:	682a      	ldr	r2, [r5, #0]
 8002c9a:	68d3      	ldr	r3, [r2, #12]
 8002c9c:	f023 0320 	bic.w	r3, r3, #32
 8002ca0:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ca2:	682a      	ldr	r2, [r5, #0]
 8002ca4:	68d3      	ldr	r3, [r2, #12]
 8002ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002caa:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cac:	682a      	ldr	r2, [r5, #0]
 8002cae:	6953      	ldr	r3, [r2, #20]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
          __HAL_UNLOCK(huart);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
      return HAL_TIMEOUT;
 8002cc2:	2003      	movs	r0, #3
 8002cc4:	e00d      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002cc6:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b32      	cmp	r3, #50	@ 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002cce:	bf0c      	ite	eq
 8002cd0:	2322      	moveq	r3, #34	@ 0x22
      huart->State = HAL_UART_STATE_READY;
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
    __HAL_UNLOCK(huart);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
    return HAL_OK;
 8002cde:	e000      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
    return HAL_BUSY;
 8002ce0:	2002      	movs	r0, #2
}
 8002ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	e7fc      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7fa      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>
    __HAL_LOCK(huart);
 8002cec:	2002      	movs	r0, #2
 8002cee:	e7f8      	b.n	8002ce2 <HAL_UART_Transmit+0x1a4>

08002cf0 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002cf0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002cf4:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_UART_Receive_IT+0xe>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d12c      	bne.n	8002d58 <HAL_UART_Receive_IT+0x68>
    if((pData == NULL ) || (Size == 0))
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	d02c      	beq.n	8002d5c <HAL_UART_Receive_IT+0x6c>
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d02c      	beq.n	8002d60 <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8002d06:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d02a      	beq.n	8002d64 <HAL_UART_Receive_IT+0x74>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
    huart->pRxBuffPtr = pData;
 8002d14:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->RxXferSize = Size;
 8002d16:	8582      	strh	r2, [r0, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002d18:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002d1e:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002d26:	bf0c      	ite	eq
 8002d28:	2332      	moveq	r3, #50	@ 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002d2a:	2322      	movne	r3, #34	@ 0x22
 8002d2c:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
    __HAL_UNLOCK(huart);
 8002d30:	2300      	movs	r3, #0
 8002d32:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d36:	6801      	ldr	r1, [r0, #0]
 8002d38:	68ca      	ldr	r2, [r1, #12]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3e:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d40:	6801      	ldr	r1, [r0, #0]
 8002d42:	694a      	ldr	r2, [r1, #20]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d4a:	6801      	ldr	r1, [r0, #0]
 8002d4c:	68ca      	ldr	r2, [r1, #12]
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002d54:	4618      	mov	r0, r3
 8002d56:	4770      	bx	lr
    return HAL_BUSY;
 8002d58:	2002      	movs	r0, #2
 8002d5a:	4770      	bx	lr
      return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	4770      	bx	lr
 8002d60:	2001      	movs	r0, #1
 8002d62:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002d64:	2002      	movs	r0, #2
}
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_TxCpltCallback>:
}
 8002d68:	4770      	bx	lr

08002d6a <UART_Receive_IT>:
{
 8002d6a:	b508      	push	{r3, lr}
  tmp_state = huart->State; 
 8002d6c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002d70:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8002d74:	2b22      	cmp	r3, #34	@ 0x22
 8002d76:	d001      	beq.n	8002d7c <UART_Receive_IT+0x12>
    return HAL_BUSY; 
 8002d78:	2002      	movs	r0, #2
}
 8002d7a:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d7c:	6883      	ldr	r3, [r0, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d82:	d029      	beq.n	8002dd8 <UART_Receive_IT+0x6e>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d84:	6903      	ldr	r3, [r0, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d13a      	bne.n	8002e00 <UART_Receive_IT+0x96>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d90:	1c59      	adds	r1, r3, #1
 8002d92:	6281      	str	r1, [r0, #40]	@ 0x28
 8002d94:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 8002d96:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d13b      	bne.n	8002e1a <UART_Receive_IT+0xb0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002da2:	6802      	ldr	r2, [r0, #0]
 8002da4:	68d3      	ldr	r3, [r2, #12]
 8002da6:	f023 0320 	bic.w	r3, r3, #32
 8002daa:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002dac:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b32      	cmp	r3, #50	@ 0x32
 8002db4:	d02d      	beq.n	8002e12 <UART_Receive_IT+0xa8>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002db6:	6802      	ldr	r2, [r0, #0]
 8002db8:	68d3      	ldr	r3, [r2, #12]
 8002dba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dbe:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dc0:	6802      	ldr	r2, [r0, #0]
 8002dc2:	6953      	ldr	r3, [r2, #20]
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      HAL_UART_RxCpltCallback(huart);
 8002dd0:	f002 fa22 	bl	8005218 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e7d0      	b.n	8002d7a <UART_Receive_IT+0x10>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002dd8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002dda:	6903      	ldr	r3, [r0, #16]
 8002ddc:	b943      	cbnz	r3, 8002df0 <UART_Receive_IT+0x86>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dde:	6803      	ldr	r3, [r0, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de6:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2;
 8002de8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002dea:	3302      	adds	r3, #2
 8002dec:	6283      	str	r3, [r0, #40]	@ 0x28
 8002dee:	e7d2      	b.n	8002d96 <UART_Receive_IT+0x2c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1;
 8002df8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	6283      	str	r3, [r0, #40]	@ 0x28
 8002dfe:	e7ca      	b.n	8002d96 <UART_Receive_IT+0x2c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002e06:	1c51      	adds	r1, r2, #1
 8002e08:	6281      	str	r1, [r0, #40]	@ 0x28
 8002e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e0e:	7013      	strb	r3, [r2, #0]
 8002e10:	e7c1      	b.n	8002d96 <UART_Receive_IT+0x2c>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002e12:	2312      	movs	r3, #18
 8002e14:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 8002e18:	e7da      	b.n	8002dd0 <UART_Receive_IT+0x66>
    return HAL_OK;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e7ad      	b.n	8002d7a <UART_Receive_IT+0x10>

08002e1e <HAL_UART_ErrorCallback>:
}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_IRQHandler>:
{
 8002e20:	b510      	push	{r4, lr}
 8002e22:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e28:	68d0      	ldr	r0, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e2a:	6951      	ldr	r1, [r2, #20]
  if(errorflags == RESET)
 8002e2c:	f013 0f0f 	tst.w	r3, #15
 8002e30:	d109      	bne.n	8002e46 <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e32:	f013 0f20 	tst.w	r3, #32
 8002e36:	d00d      	beq.n	8002e54 <HAL_UART_IRQHandler+0x34>
 8002e38:	f010 0f20 	tst.w	r0, #32
 8002e3c:	d00a      	beq.n	8002e54 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff ff93 	bl	8002d6a <UART_Receive_IT>
      return;
 8002e44:	e013      	b.n	8002e6e <HAL_UART_IRQHandler+0x4e>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e46:	f001 0101 	and.w	r1, r1, #1
 8002e4a:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8002e4e:	ea5c 0c01 	orrs.w	ip, ip, r1
 8002e52:	d10d      	bne.n	8002e70 <HAL_UART_IRQHandler+0x50>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e58:	d002      	beq.n	8002e60 <HAL_UART_IRQHandler+0x40>
 8002e5a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002e5e:	d15d      	bne.n	8002f1c <HAL_UART_IRQHandler+0xfc>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e60:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002e64:	d003      	beq.n	8002e6e <HAL_UART_IRQHandler+0x4e>
 8002e66:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002e6a:	f040 8086 	bne.w	8002f7a <HAL_UART_IRQHandler+0x15a>
}
 8002e6e:	bd10      	pop	{r4, pc}
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e70:	f013 0f01 	tst.w	r3, #1
 8002e74:	d006      	beq.n	8002e84 <HAL_UART_IRQHandler+0x64>
 8002e76:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002e7a:	d003      	beq.n	8002e84 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e84:	f013 0f04 	tst.w	r3, #4
 8002e88:	d00d      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x86>
 8002e8a:	2900      	cmp	r1, #0
 8002e8c:	f000 8086 	beq.w	8002f9c <HAL_UART_IRQHandler+0x17c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e90:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002e92:	f042 0202 	orr.w	r2, r2, #2
 8002e96:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e98:	f013 0f02 	tst.w	r3, #2
 8002e9c:	d107      	bne.n	8002eae <HAL_UART_IRQHandler+0x8e>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e9e:	f013 0f08 	tst.w	r3, #8
 8002ea2:	d10b      	bne.n	8002ebc <HAL_UART_IRQHandler+0x9c>
 8002ea4:	e00e      	b.n	8002ec4 <HAL_UART_IRQHandler+0xa4>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea6:	f013 0f02 	tst.w	r3, #2
 8002eaa:	d07a      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x182>
 8002eac:	b151      	cbz	r1, 8002ec4 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002eb0:	f042 0204 	orr.w	r2, r2, #4
 8002eb4:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb6:	f013 0f08 	tst.w	r3, #8
 8002eba:	d003      	beq.n	8002ec4 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ebc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d0d1      	beq.n	8002e6e <HAL_UART_IRQHandler+0x4e>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eca:	f013 0f20 	tst.w	r3, #32
 8002ece:	d002      	beq.n	8002ed6 <HAL_UART_IRQHandler+0xb6>
 8002ed0:	f010 0f20 	tst.w	r0, #32
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	694b      	ldr	r3, [r1, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eda:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ee0:	f002 0208 	and.w	r2, r2, #8
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d109      	bne.n	8002efc <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7ff ff98 	bl	8002e1e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002ef2:	e7bc      	b.n	8002e6e <HAL_UART_IRQHandler+0x4e>
        UART_Receive_IT(huart);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff ff38 	bl	8002d6a <UART_Receive_IT>
 8002efa:	e7ec      	b.n	8002ed6 <HAL_UART_IRQHandler+0xb6>
    	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	68cb      	ldr	r3, [r1, #12]
 8002efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f02:	60cb      	str	r3, [r1, #12]
    	  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	6953      	ldr	r3, [r2, #20]
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6153      	str	r3, [r2, #20]
    	  huart->State = HAL_UART_STATE_READY;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          HAL_UART_ErrorCallback(huart);
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff ff82 	bl	8002e1e <HAL_UART_ErrorCallback>
 8002f1a:	e7a8      	b.n	8002e6e <HAL_UART_IRQHandler+0x4e>
  tmp_state = huart->State;
 8002f1c:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002f20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d1a2      	bne.n	8002e6e <HAL_UART_IRQHandler+0x4e>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f28:	68a3      	ldr	r3, [r4, #8]
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2e:	d015      	beq.n	8002f5c <HAL_UART_IRQHandler+0x13c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f30:	6a23      	ldr	r3, [r4, #32]
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	6221      	str	r1, [r4, #32]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0)
 8002f3a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d193      	bne.n	8002e6e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	68d3      	ldr	r3, [r2, #12]
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	68d3      	ldr	r3, [r2, #12]
 8002f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f58:	60d3      	str	r3, [r2, #12]
 8002f5a:	e788      	b.n	8002e6e <HAL_UART_IRQHandler+0x4e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f5c:	6a23      	ldr	r3, [r4, #32]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002f66:	6923      	ldr	r3, [r4, #16]
 8002f68:	b91b      	cbnz	r3, 8002f72 <HAL_UART_IRQHandler+0x152>
        huart->pTxBuffPtr += 2;
 8002f6a:	6a23      	ldr	r3, [r4, #32]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	6223      	str	r3, [r4, #32]
 8002f70:	e7e3      	b.n	8002f3a <HAL_UART_IRQHandler+0x11a>
        huart->pTxBuffPtr += 1;
 8002f72:	6a23      	ldr	r3, [r4, #32]
 8002f74:	3301      	adds	r3, #1
 8002f76:	6223      	str	r3, [r4, #32]
 8002f78:	e7df      	b.n	8002f3a <HAL_UART_IRQHandler+0x11a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f7a:	68d3      	ldr	r3, [r2, #12]
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f80:	60d3      	str	r3, [r2, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002f82:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b32      	cmp	r3, #50	@ 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2322      	moveq	r3, #34	@ 0x22
    huart->State = HAL_UART_STATE_READY;
 8002f8e:	2301      	movne	r3, #1
 8002f90:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  HAL_UART_TxCpltCallback(huart);
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff fee7 	bl	8002d68 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002f9a:	e768      	b.n	8002e6e <HAL_UART_IRQHandler+0x4e>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f9c:	f013 0f02 	tst.w	r3, #2
 8002fa0:	d190      	bne.n	8002ec4 <HAL_UART_IRQHandler+0xa4>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa2:	f013 0f08 	tst.w	r3, #8
 8002fa6:	d08d      	beq.n	8002ec4 <HAL_UART_IRQHandler+0xa4>
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	d08b      	beq.n	8002ec4 <HAL_UART_IRQHandler+0xa4>
 8002fac:	e786      	b.n	8002ebc <HAL_UART_IRQHandler+0x9c>
	...

08002fb0 <MPU9250_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MPU9250_Init()
 ***********************************/
void MPU9250_Init(void)
{
 8002fb0:	b508      	push	{r3, lr}
	// Verify device
	uint8_t data = I2C_ReadByte(MPU9250_ADDRESS, WHO_AM_I, __FILE__, __LINE__);
 8002fb2:	233b      	movs	r3, #59	@ 0x3b
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <MPU9250_Init+0x70>)
 8002fb6:	2175      	movs	r1, #117	@ 0x75
 8002fb8:	20d0      	movs	r0, #208	@ 0xd0
 8002fba:	f001 fae9 	bl	8004590 <I2C_ReadByte>
	//if (data != WHO_AM_I_VALUE) _Error_Handler(__FILE__, __LINE__);

	// Device configuration
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_1, 0x80, 1);	// Reset
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	216b      	movs	r1, #107	@ 0x6b
 8002fc4:	20d0      	movs	r0, #208	@ 0xd0
 8002fc6:	f001 fac1 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_1, 0x01, 1);	// Set clock source to be PLL with x-axis gyroscope reference
 8002fca:	2301      	movs	r3, #1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	216b      	movs	r1, #107	@ 0x6b
 8002fd0:	20d0      	movs	r0, #208	@ 0xd0
 8002fd2:	f001 fabb 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_2, 0x00, 1);	// Enable Accel and Gyro
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	2200      	movs	r2, #0
 8002fda:	216c      	movs	r1, #108	@ 0x6c
 8002fdc:	20d0      	movs	r0, #208	@ 0xd0
 8002fde:	f001 fab5 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 	   0x00, 1);	// Sample Rate Divider (Not set)
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2119      	movs	r1, #25
 8002fe8:	20d0      	movs	r0, #208	@ 0xd0
 8002fea:	f001 faaf 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG2,  0x03, 1);	// DLPF 184Hz
 8002fee:	2301      	movs	r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	211d      	movs	r1, #29
 8002ff4:	20d0      	movs	r0, #208	@ 0xd0
 8002ff6:	f001 faa9 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU9250_CONFIG, 0x03, 1);	// DLPF 184Hz
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	211a      	movs	r1, #26
 8003000:	20d0      	movs	r0, #208	@ 0xd0
 8003002:	f001 faa3 	bl	800454c <I2C_WriteByte>

	// Full scale settings
	I2C_WriteByte(MPU9250_ADDRESS, GYRO_CONFIG, GYRO_FS_1000_DPS, 1);
 8003006:	2301      	movs	r3, #1
 8003008:	2210      	movs	r2, #16
 800300a:	211b      	movs	r1, #27
 800300c:	20d0      	movs	r0, #208	@ 0xd0
 800300e:	f001 fa9d 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, ACC_FS_4_G, 1);
 8003012:	2301      	movs	r3, #1
 8003014:	2208      	movs	r2, #8
 8003016:	211c      	movs	r1, #28
 8003018:	20d0      	movs	r0, #208	@ 0xd0
 800301a:	f001 fa97 	bl	800454c <I2C_WriteByte>
}
 800301e:	bd08      	pop	{r3, pc}
 8003020:	0800770c 	.word	0x0800770c

08003024 <MPU9250_ReadAccelData>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MPU9250_ReadAccelData()
 ***********************************/
void MPU9250_ReadAccelData(void)
{
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	b084      	sub	sp, #16
	// Data buffer
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0};
 8003028:	4b27      	ldr	r3, [pc, #156]	@ (80030c8 <MPU9250_ReadAccelData+0xa4>)
 800302a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800302e:	9002      	str	r0, [sp, #8]
 8003030:	f8ad 100c 	strh.w	r1, [sp, #12]

	// Read raw data
	I2C_ReadByteArray(MPU9250_ADDRESS, ACCEL_XOUT_H, raw_data, 6, __FILE__, __LINE__);
 8003034:	2358      	movs	r3, #88	@ 0x58
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <MPU9250_ReadAccelData+0xa8>)
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2306      	movs	r3, #6
 800303e:	aa02      	add	r2, sp, #8
 8003040:	213b      	movs	r1, #59	@ 0x3b
 8003042:	20d0      	movs	r0, #208	@ 0xd0
 8003044:	f001 fad8 	bl	80045f8 <I2C_ReadByteArray>
	
	// Pack to integer
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8003048:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800304c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003050:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003054:	b200      	sxth	r0, r0
 8003056:	4b1e      	ldr	r3, [pc, #120]	@ (80030d0 <MPU9250_ReadAccelData+0xac>)
 8003058:	8018      	strh	r0, [r3, #0]
	accelRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 800305a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800305e:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8003062:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8003066:	b22d      	sxth	r5, r5
 8003068:	805d      	strh	r5, [r3, #2]
	accelRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 800306a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800306e:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8003072:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8003076:	b224      	sxth	r4, r4
 8003078:	809c      	strh	r4, [r3, #4]

	// Scale to G-units
	accelData.x = (float) accelRaw.x * 4.0f/32768.0f;
 800307a:	4e16      	ldr	r6, [pc, #88]	@ (80030d4 <MPU9250_ReadAccelData+0xb0>)
 800307c:	f7fd fde6 	bl	8000c4c <__aeabi_i2f>
 8003080:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003084:	f7fd fe36 	bl	8000cf4 <__aeabi_fmul>
 8003088:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 800308c:	f7fd fe32 	bl	8000cf4 <__aeabi_fmul>
 8003090:	6030      	str	r0, [r6, #0]
	accelData.y = (float) accelRaw.y * 4.0f/32768.0f;
 8003092:	4628      	mov	r0, r5
 8003094:	f7fd fdda 	bl	8000c4c <__aeabi_i2f>
 8003098:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800309c:	f7fd fe2a 	bl	8000cf4 <__aeabi_fmul>
 80030a0:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 80030a4:	f7fd fe26 	bl	8000cf4 <__aeabi_fmul>
 80030a8:	6070      	str	r0, [r6, #4]
	accelData.z = (float) accelRaw.z * 4.0f/32768.0f;
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7fd fdce 	bl	8000c4c <__aeabi_i2f>
 80030b0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80030b4:	f7fd fe1e 	bl	8000cf4 <__aeabi_fmul>
 80030b8:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 80030bc:	f7fd fe1a 	bl	8000cf4 <__aeabi_fmul>
 80030c0:	60b0      	str	r0, [r6, #8]
	serialFloat(accelData.y);
	serialWrite('\t');
	serialFloat(accelData.z);
	serialWrite('\n');
#endif
}
 80030c2:	b004      	add	sp, #16
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	bf00      	nop
 80030c8:	080076e8 	.word	0x080076e8
 80030cc:	0800770c 	.word	0x0800770c
 80030d0:	20000250 	.word	0x20000250
 80030d4:	2000027c 	.word	0x2000027c

080030d8 <MPU9250_ReadGyroData>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MPU9250_ReadGyroData()
 ***********************************/
void MPU9250_ReadGyroData(void)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b085      	sub	sp, #20
	// Data buffer
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0};
 80030dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <MPU9250_ReadGyroData+0xb0>)
 80030de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	f8ad 100c 	strh.w	r1, [sp, #12]

	// Read raw data
	I2C_ReadByteArray(MPU9250_ADDRESS, GYRO_XOUT_H, raw_data, 6, __FILE__, __LINE__);
 80030e8:	237b      	movs	r3, #123	@ 0x7b
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <MPU9250_ReadGyroData+0xb4>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2306      	movs	r3, #6
 80030f2:	aa02      	add	r2, sp, #8
 80030f4:	2143      	movs	r1, #67	@ 0x43
 80030f6:	20d0      	movs	r0, #208	@ 0xd0
 80030f8:	f001 fa7e 	bl	80045f8 <I2C_ReadByteArray>

	// Pack to integer
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 80030fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003100:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003104:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003108:	b200      	sxth	r0, r0
 800310a:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <MPU9250_ReadGyroData+0xb8>)
 800310c:	8018      	strh	r0, [r3, #0]
	gyroRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 800310e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003112:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8003116:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800311a:	b22d      	sxth	r5, r5
 800311c:	805d      	strh	r5, [r3, #2]
	gyroRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 800311e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003122:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8003126:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800312a:	b224      	sxth	r4, r4
 800312c:	809c      	strh	r4, [r3, #4]

	// Scale to DPS
	gyroData.x = ((float) gyroRaw.x * 1000.0f/32768.0f) - gyroBias.x;
 800312e:	4e19      	ldr	r6, [pc, #100]	@ (8003194 <MPU9250_ReadGyroData+0xbc>)
 8003130:	f7fd fd8c 	bl	8000c4c <__aeabi_i2f>
 8003134:	4918      	ldr	r1, [pc, #96]	@ (8003198 <MPU9250_ReadGyroData+0xc0>)
 8003136:	f7fd fddd 	bl	8000cf4 <__aeabi_fmul>
 800313a:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 800313e:	f7fd fdd9 	bl	8000cf4 <__aeabi_fmul>
 8003142:	4f16      	ldr	r7, [pc, #88]	@ (800319c <MPU9250_ReadGyroData+0xc4>)
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	f7fd fccb 	bl	8000ae0 <__aeabi_fsub>
 800314a:	6030      	str	r0, [r6, #0]
	gyroData.y = ((float) gyroRaw.y * 1000.0f/32768.0f) - gyroBias.y;
 800314c:	4628      	mov	r0, r5
 800314e:	f7fd fd7d 	bl	8000c4c <__aeabi_i2f>
 8003152:	4911      	ldr	r1, [pc, #68]	@ (8003198 <MPU9250_ReadGyroData+0xc0>)
 8003154:	f7fd fdce 	bl	8000cf4 <__aeabi_fmul>
 8003158:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 800315c:	f7fd fdca 	bl	8000cf4 <__aeabi_fmul>
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	f7fd fcbd 	bl	8000ae0 <__aeabi_fsub>
 8003166:	6070      	str	r0, [r6, #4]
	gyroData.z = ((float) gyroRaw.z * 1000.0f/32768.0f) - gyroBias.z;
 8003168:	4620      	mov	r0, r4
 800316a:	f7fd fd6f 	bl	8000c4c <__aeabi_i2f>
 800316e:	490a      	ldr	r1, [pc, #40]	@ (8003198 <MPU9250_ReadGyroData+0xc0>)
 8003170:	f7fd fdc0 	bl	8000cf4 <__aeabi_fmul>
 8003174:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8003178:	f7fd fdbc 	bl	8000cf4 <__aeabi_fmul>
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	f7fd fcaf 	bl	8000ae0 <__aeabi_fsub>
 8003182:	60b0      	str	r0, [r6, #8]
	serialFloat(gyroData.y);
	serialWrite('\t');
	serialFloat(gyroData.z);
	serialWrite('\n');
#endif
}
 8003184:	b005      	add	sp, #20
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	080076e8 	.word	0x080076e8
 800318c:	0800770c 	.word	0x0800770c
 8003190:	20000248 	.word	0x20000248
 8003194:	20000270 	.word	0x20000270
 8003198:	447a0000 	.word	0x447a0000
 800319c:	2000001c 	.word	0x2000001c

080031a0 <AK8963_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	AK8963_Init()
 ***********************************/
void AK8963_Init(void)
{
 80031a0:	b510      	push	{r4, lr}
 80031a2:	b084      	sub	sp, #16
	// Enable access to Magnetometer via MPU
	I2C_WriteByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22, 1);	// Set bypass mode for external I2C master connection
 80031a4:	2301      	movs	r3, #1
 80031a6:	2222      	movs	r2, #34	@ 0x22
 80031a8:	2137      	movs	r1, #55	@ 0x37
 80031aa:	20d0      	movs	r0, #208	@ 0xd0
 80031ac:	f001 f9ce 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, USER_CTRL,   0x01, 1); 	// Disable master mode and clear all signal paths
 80031b0:	2301      	movs	r3, #1
 80031b2:	461a      	mov	r2, r3
 80031b4:	216a      	movs	r1, #106	@ 0x6a
 80031b6:	20d0      	movs	r0, #208	@ 0xd0
 80031b8:	f001 f9c8 	bl	800454c <I2C_WriteByte>

	// Verify magnetometer
	uint8_t data = I2C_ReadByte(MAG_ADDRESS, MAG_WIA, __FILE__, __LINE__);
 80031bc:	4c2d      	ldr	r4, [pc, #180]	@ (8003274 <AK8963_Init+0xd4>)
 80031be:	23ad      	movs	r3, #173	@ 0xad
 80031c0:	4622      	mov	r2, r4
 80031c2:	2100      	movs	r1, #0
 80031c4:	2018      	movs	r0, #24
 80031c6:	f001 f9e3 	bl	8004590 <I2C_ReadByte>
	//if (data != MAG_WIA_VALUE) _Error_Handler(__FILE__, __LINE__);

	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL2, 0x01, 1);		// Reset magnetometer
 80031ca:	2301      	movs	r3, #1
 80031cc:	461a      	mov	r2, r3
 80031ce:	210b      	movs	r1, #11
 80031d0:	2018      	movs	r0, #24
 80031d2:	f001 f9bb 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x00, 1);		// Power down magnetometer
 80031d6:	2301      	movs	r3, #1
 80031d8:	2200      	movs	r2, #0
 80031da:	210a      	movs	r1, #10
 80031dc:	2018      	movs	r0, #24
 80031de:	f001 f9b5 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x0F, 1); 	// Enter Fuse ROM access mode
 80031e2:	2301      	movs	r3, #1
 80031e4:	220f      	movs	r2, #15
 80031e6:	210a      	movs	r1, #10
 80031e8:	2018      	movs	r0, #24
 80031ea:	f001 f9af 	bl	800454c <I2C_WriteByte>

	// Read factory calibration registers
	uint8_t rawData[3];
	I2C_ReadByteArray(MAG_ADDRESS, MAG_ASAX, rawData, 3, __FILE__, __LINE__);
 80031ee:	23b6      	movs	r3, #182	@ 0xb6
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	9400      	str	r4, [sp, #0]
 80031f4:	2303      	movs	r3, #3
 80031f6:	aa03      	add	r2, sp, #12
 80031f8:	2110      	movs	r1, #16
 80031fa:	2018      	movs	r0, #24
 80031fc:	f001 f9fc 	bl	80045f8 <I2C_ReadByteArray>

	// Calibrate magnetometer factory offset
	magCalib.x =  (float)(rawData[0] - 128)/256.0f + 1.0f;	// Return x-axis sensitivity adjustment values
 8003200:	4c1d      	ldr	r4, [pc, #116]	@ (8003278 <AK8963_Init+0xd8>)
 8003202:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003206:	3880      	subs	r0, #128	@ 0x80
 8003208:	f7fd fd20 	bl	8000c4c <__aeabi_i2f>
 800320c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8003210:	f7fd fd70 	bl	8000cf4 <__aeabi_fmul>
 8003214:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003218:	f7fd fc64 	bl	8000ae4 <__addsf3>
 800321c:	6020      	str	r0, [r4, #0]
	magCalib.y =  (float)(rawData[1] - 128)/256.0f + 1.0f;	// Return y-axis sensitivity adjustment values
 800321e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003222:	3880      	subs	r0, #128	@ 0x80
 8003224:	f7fd fd12 	bl	8000c4c <__aeabi_i2f>
 8003228:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800322c:	f7fd fd62 	bl	8000cf4 <__aeabi_fmul>
 8003230:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003234:	f7fd fc56 	bl	8000ae4 <__addsf3>
 8003238:	6060      	str	r0, [r4, #4]
	magCalib.z =  (float)(rawData[2] - 128)/256.0f + 1.0f;	// Return z-axis sensitivity adjustment values
 800323a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800323e:	3880      	subs	r0, #128	@ 0x80
 8003240:	f7fd fd04 	bl	8000c4c <__aeabi_i2f>
 8003244:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8003248:	f7fd fd54 	bl	8000cf4 <__aeabi_fmul>
 800324c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003250:	f7fd fc48 	bl	8000ae4 <__addsf3>
 8003254:	60a0      	str	r0, [r4, #8]
	serialFloat(magCalib.z);
	serialWrite('\n');
#endif

	// Magnetometer settings
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x00, 1);		// Power down magnetometer
 8003256:	2301      	movs	r3, #1
 8003258:	2200      	movs	r2, #0
 800325a:	210a      	movs	r1, #10
 800325c:	2018      	movs	r0, #24
 800325e:	f001 f975 	bl	800454c <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x16, 1); 	// Res: 16 Bit, Mode: Continuous Mode 2 (100Hz)
 8003262:	2301      	movs	r3, #1
 8003264:	2216      	movs	r2, #22
 8003266:	210a      	movs	r1, #10
 8003268:	2018      	movs	r0, #24
 800326a:	f001 f96f 	bl	800454c <I2C_WriteByte>
}
 800326e:	b004      	add	sp, #16
 8003270:	bd10      	pop	{r4, pc}
 8003272:	bf00      	nop
 8003274:	0800770c 	.word	0x0800770c
 8003278:	20000258 	.word	0x20000258

0800327c <AK8963_ReadData>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	AK8963_ReadData()
 ***********************************/
void AK8963_ReadData(void)
{
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	b084      	sub	sp, #16
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0, 0};
 8003282:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <AK8963_ReadData+0x108>)
 8003284:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003288:	9002      	str	r0, [sp, #8]
 800328a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800328e:	0c09      	lsrs	r1, r1, #16
 8003290:	f88d 100e 	strb.w	r1, [sp, #14]

	// Check if data is ready
	if (I2C_ReadByte(MAG_ADDRESS, MAG_ST1, __FILE__, __LINE__) & 0x01)
 8003294:	23d7      	movs	r3, #215	@ 0xd7
 8003296:	4a3c      	ldr	r2, [pc, #240]	@ (8003388 <AK8963_ReadData+0x10c>)
 8003298:	2102      	movs	r1, #2
 800329a:	2018      	movs	r0, #24
 800329c:	f001 f978 	bl	8004590 <I2C_ReadByte>
 80032a0:	f010 0f01 	tst.w	r0, #1
 80032a4:	d102      	bne.n	80032ac <AK8963_ReadData+0x30>
		{
			msp_txf_status.i2c_errors_count++;
			//serialPrint("\n* Magnetometer Overflow *\n;");
		}
	}
}
 80032a6:	b004      	add	sp, #16
 80032a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		I2C_ReadByteArray(MAG_ADDRESS, MAG_HXL, raw_data, 7, __FILE__, __LINE__);
 80032ac:	23da      	movs	r3, #218	@ 0xda
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	4b35      	ldr	r3, [pc, #212]	@ (8003388 <AK8963_ReadData+0x10c>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2307      	movs	r3, #7
 80032b6:	aa02      	add	r2, sp, #8
 80032b8:	2103      	movs	r1, #3
 80032ba:	2018      	movs	r0, #24
 80032bc:	f001 f99c 	bl	80045f8 <I2C_ReadByteArray>
		if (!(OVF & 0x08))
 80032c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80032c4:	f013 0f08 	tst.w	r3, #8
 80032c8:	d157      	bne.n	800337a <AK8963_ReadData+0xfe>
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 80032ca:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80032ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80032d2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80032d6:	b200      	sxth	r0, r0
 80032d8:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <AK8963_ReadData+0x110>)
 80032da:	8018      	strh	r0, [r3, #0]
			magRaw.y = (int16_t) ((raw_data[3]<<8) | raw_data[2]);
 80032dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80032e0:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80032e4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 80032e8:	b22d      	sxth	r5, r5
 80032ea:	805d      	strh	r5, [r3, #2]
			magRaw.z = (int16_t) ((raw_data[5]<<8) | raw_data[4]);
 80032ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80032f0:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80032f4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80032f8:	b224      	sxth	r4, r4
 80032fa:	809c      	strh	r4, [r3, #4]
			magData.x = (((float) magRaw.x * mRes * magCalib.x) - magBias.x) * magScale.x;
 80032fc:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <AK8963_ReadData+0x114>)
 80032fe:	f8d3 a000 	ldr.w	sl, [r3]
 8003302:	4e24      	ldr	r6, [pc, #144]	@ (8003394 <AK8963_ReadData+0x118>)
 8003304:	f7fd fca2 	bl	8000c4c <__aeabi_i2f>
 8003308:	4651      	mov	r1, sl
 800330a:	f7fd fcf3 	bl	8000cf4 <__aeabi_fmul>
 800330e:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8003398 <AK8963_ReadData+0x11c>
 8003312:	f8d9 1000 	ldr.w	r1, [r9]
 8003316:	f7fd fced 	bl	8000cf4 <__aeabi_fmul>
 800331a:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 800339c <AK8963_ReadData+0x120>
 800331e:	f8d8 1000 	ldr.w	r1, [r8]
 8003322:	f7fd fbdd 	bl	8000ae0 <__aeabi_fsub>
 8003326:	4f1e      	ldr	r7, [pc, #120]	@ (80033a0 <AK8963_ReadData+0x124>)
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	f7fd fce3 	bl	8000cf4 <__aeabi_fmul>
 800332e:	6030      	str	r0, [r6, #0]
			magData.y = (((float) magRaw.y * mRes * magCalib.y) - magBias.y) * magScale.y;
 8003330:	4628      	mov	r0, r5
 8003332:	f7fd fc8b 	bl	8000c4c <__aeabi_i2f>
 8003336:	4651      	mov	r1, sl
 8003338:	f7fd fcdc 	bl	8000cf4 <__aeabi_fmul>
 800333c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003340:	f7fd fcd8 	bl	8000cf4 <__aeabi_fmul>
 8003344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003348:	f7fd fbca 	bl	8000ae0 <__aeabi_fsub>
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	f7fd fcd1 	bl	8000cf4 <__aeabi_fmul>
 8003352:	6070      	str	r0, [r6, #4]
			magData.z = (((float) magRaw.z * mRes * magCalib.z) - magBias.z) * magScale.z;
 8003354:	4620      	mov	r0, r4
 8003356:	f7fd fc79 	bl	8000c4c <__aeabi_i2f>
 800335a:	4651      	mov	r1, sl
 800335c:	f7fd fcca 	bl	8000cf4 <__aeabi_fmul>
 8003360:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8003364:	f7fd fcc6 	bl	8000cf4 <__aeabi_fmul>
 8003368:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800336c:	f7fd fbb8 	bl	8000ae0 <__aeabi_fsub>
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	f7fd fcbf 	bl	8000cf4 <__aeabi_fmul>
 8003376:	60b0      	str	r0, [r6, #8]
 8003378:	e795      	b.n	80032a6 <AK8963_ReadData+0x2a>
			msp_txf_status.i2c_errors_count++;
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <AK8963_ReadData+0x128>)
 800337c:	8853      	ldrh	r3, [r2, #2]
 800337e:	3301      	adds	r3, #1
 8003380:	8053      	strh	r3, [r2, #2]
}
 8003382:	e790      	b.n	80032a6 <AK8963_ReadData+0x2a>
 8003384:	080076f0 	.word	0x080076f0
 8003388:	0800770c 	.word	0x0800770c
 800338c:	20000240 	.word	0x20000240
 8003390:	20000034 	.word	0x20000034
 8003394:	20000264 	.word	0x20000264
 8003398:	20000258 	.word	0x20000258
 800339c:	20000028 	.word	0x20000028
 80033a0:	20000010 	.word	0x20000010
 80033a4:	20000ba4 	.word	0x20000ba4

080033a8 <IMU_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	IMU_Init()
 ***********************************/
void IMU_Init(void)
{
 80033a8:	b508      	push	{r3, lr}
	MPU9250_Init();
 80033aa:	f7ff fe01 	bl	8002fb0 <MPU9250_Init>
	AK8963_Init();
 80033ae:	f7ff fef7 	bl	80031a0 <AK8963_Init>
	//float GyroMeasError = M_PI * (60.0f / 180.0f);	// Gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
	//float beta = sqrt(3.0f / 4.0f) * GyroMeasError;	// Compute beta

	// Higher the beta value, depends more on noisy readings from accelerometer, faster response
	// Lower the value, smooth readings, but slower response
	MadgwickSetBeta(0.6f);
 80033b2:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <IMU_Init+0x18>)
 80033b4:	f000 fa48 	bl	8003848 <MadgwickSetBeta>
	MadgwickSetDelta(0.0f);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f000 fa4b 	bl	8003854 <MadgwickSetDelta>
}
 80033be:	bd08      	pop	{r3, pc}
 80033c0:	3f19999a 	.word	0x3f19999a

080033c4 <AHRS_GetPitch>:
 Arguments		:	None
 Return Value	:	Pitch angle
 Example Call	:	AHRS_GetPitch()
 ***********************************/
float AHRS_GetPitch(void)
{
 80033c4:	b508      	push	{r3, lr}
	return lowPassFilter(&lpf_pitch, AHRS_Angle[1]);
 80033c6:	4b03      	ldr	r3, [pc, #12]	@ (80033d4 <AHRS_GetPitch+0x10>)
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	4803      	ldr	r0, [pc, #12]	@ (80033d8 <AHRS_GetPitch+0x14>)
 80033cc:	f001 f828 	bl	8004420 <lowPassFilter>
}
 80033d0:	bd08      	pop	{r3, pc}
 80033d2:	bf00      	nop
 80033d4:	20000288 	.word	0x20000288
 80033d8:	20000008 	.word	0x20000008

080033dc <AHRS_GetRoll>:
 Arguments		:	None
 Return Value	:	Roll angle
 Example Call	:	AHRS_GetRoll()
 ***********************************/
float AHRS_GetRoll(void)
{
 80033dc:	b508      	push	{r3, lr}
	return lowPassFilter(&lpf_roll, AHRS_Angle[0]);
 80033de:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <AHRS_GetRoll+0x10>)
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <AHRS_GetRoll+0x14>)
 80033e4:	f001 f81c 	bl	8004420 <lowPassFilter>
}
 80033e8:	bd08      	pop	{r3, pc}
 80033ea:	bf00      	nop
 80033ec:	20000288 	.word	0x20000288
 80033f0:	20000000 	.word	0x20000000

080033f4 <AHRS_GetYaw>:
 Arguments		:	None
 Return Value	:	Yaw angle
 Example Call	:	AHRS_GetYaw()
 ***********************************/
float AHRS_GetYaw(void)
{
 80033f4:	b510      	push	{r4, lr}
	// Shift range to North heading
	float angle = AHRS_Angle[2];
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <AHRS_GetYaw+0x30>)
 80033f8:	689c      	ldr	r4, [r3, #8]
	return ((angle >= -180) && (angle < 90)) ? (angle + 90) : (angle - 270);
 80033fa:	490b      	ldr	r1, [pc, #44]	@ (8003428 <AHRS_GetYaw+0x34>)
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7fd fe2b 	bl	8001058 <__aeabi_fcmpge>
 8003402:	b148      	cbz	r0, 8003418 <AHRS_GetYaw+0x24>
 8003404:	4909      	ldr	r1, [pc, #36]	@ (800342c <AHRS_GetYaw+0x38>)
 8003406:	4620      	mov	r0, r4
 8003408:	f7fd fe12 	bl	8001030 <__aeabi_fcmplt>
 800340c:	b120      	cbz	r0, 8003418 <AHRS_GetYaw+0x24>
 800340e:	4907      	ldr	r1, [pc, #28]	@ (800342c <AHRS_GetYaw+0x38>)
 8003410:	4620      	mov	r0, r4
 8003412:	f7fd fb67 	bl	8000ae4 <__addsf3>
 8003416:	e003      	b.n	8003420 <AHRS_GetYaw+0x2c>
 8003418:	4905      	ldr	r1, [pc, #20]	@ (8003430 <AHRS_GetYaw+0x3c>)
 800341a:	4620      	mov	r0, r4
 800341c:	f7fd fb60 	bl	8000ae0 <__aeabi_fsub>
}
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	20000288 	.word	0x20000288
 8003428:	c3340000 	.word	0xc3340000
 800342c:	42b40000 	.word	0x42b40000
 8003430:	43870000 	.word	0x43870000

08003434 <AHRS_ComputeAngles>:
 Example Call	:	AHRS_ComputeAngles()

 This function reads IMU data, computes orientation angles and updates MSP frames.
 ***********************************/
void AHRS_ComputeAngles(void)
{
 8003434:	b530      	push	{r4, r5, lr}
 8003436:	b087      	sub	sp, #28
	// Read converted IMU data
	MPU9250_ReadAccelData();
 8003438:	f7ff fdf4 	bl	8003024 <MPU9250_ReadAccelData>
	MPU9250_ReadGyroData();
 800343c:	f7ff fe4c 	bl	80030d8 <MPU9250_ReadGyroData>
	AK8963_ReadData();
 8003440:	f7ff ff1c 	bl	800327c <AK8963_ReadData>

	// Set integration time by time elapsed since last filter update in seconds
	AHRS_timeNow = micros();
 8003444:	f002 f89c 	bl	8005580 <micros>
 8003448:	4d34      	ldr	r5, [pc, #208]	@ (800351c <AHRS_ComputeAngles+0xe8>)
 800344a:	6028      	str	r0, [r5, #0]
	float delta = (float)((AHRS_timeNow - AHRS_lastUpdate)/1000.0f) ;
 800344c:	4c34      	ldr	r4, [pc, #208]	@ (8003520 <AHRS_ComputeAngles+0xec>)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	1ac0      	subs	r0, r0, r3
 8003452:	f7fd fbf7 	bl	8000c44 <__aeabi_ui2f>
 8003456:	4933      	ldr	r1, [pc, #204]	@ (8003524 <AHRS_ComputeAngles+0xf0>)
 8003458:	f7fd fd00 	bl	8000e5c <__aeabi_fdiv>
	MadgwickSetDelta(delta);
 800345c:	f000 f9fa 	bl	8003854 <MadgwickSetDelta>
	AHRS_lastUpdate = AHRS_timeNow;
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	6023      	str	r3, [r4, #0]

	// Filter data and obtain the angles
	MadgwickQuaternionUpdate(-accelData.y, -accelData.x, accelData.z, gyroData.y,
 8003464:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <AHRS_ComputeAngles+0xf4>)
 8003466:	4a31      	ldr	r2, [pc, #196]	@ (800352c <AHRS_ComputeAngles+0xf8>)
 8003468:	6811      	ldr	r1, [r2, #0]
 800346a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800346e:	6850      	ldr	r0, [r2, #4]
 8003470:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003474:	4c2e      	ldr	r4, [pc, #184]	@ (8003530 <AHRS_ComputeAngles+0xfc>)
 8003476:	9405      	str	r4, [sp, #20]
 8003478:	4c2e      	ldr	r4, [pc, #184]	@ (8003534 <AHRS_ComputeAngles+0x100>)
 800347a:	68a5      	ldr	r5, [r4, #8]
 800347c:	9504      	str	r5, [sp, #16]
 800347e:	6865      	ldr	r5, [r4, #4]
 8003480:	9503      	str	r5, [sp, #12]
 8003482:	6824      	ldr	r4, [r4, #0]
 8003484:	9402      	str	r4, [sp, #8]
 8003486:	689c      	ldr	r4, [r3, #8]
 8003488:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 800348c:	9401      	str	r4, [sp, #4]
 800348e:	681c      	ldr	r4, [r3, #0]
 8003490:	9400      	str	r4, [sp, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	f000 f9e3 	bl	8003860 <MadgwickQuaternionUpdate>
																					Updates the AHRS_Angle array with the computed angles.*/

	/* Update MSP frame */

	// Update raw IMU MSP frame
	msp_txf_raw_imu.accx = accelRaw.x / 100;
 800349a:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <AHRS_ComputeAngles+0x104>)
 800349c:	4827      	ldr	r0, [pc, #156]	@ (800353c <AHRS_ComputeAngles+0x108>)
 800349e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80034a2:	4927      	ldr	r1, [pc, #156]	@ (8003540 <AHRS_ComputeAngles+0x10c>)
 80034a4:	fb81 5402 	smull	r5, r4, r1, r2
 80034a8:	17d2      	asrs	r2, r2, #31
 80034aa:	ebc2 1264 	rsb	r2, r2, r4, asr #5
 80034ae:	801a      	strh	r2, [r3, #0]
	msp_txf_raw_imu.accy = accelRaw.y / 100;
 80034b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80034b4:	fb81 5402 	smull	r5, r4, r1, r2
 80034b8:	17d2      	asrs	r2, r2, #31
 80034ba:	ebc2 1264 	rsb	r2, r2, r4, asr #5
 80034be:	805a      	strh	r2, [r3, #2]
	msp_txf_raw_imu.accz = accelRaw.z / 100;
 80034c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80034c4:	fb81 0102 	smull	r0, r1, r1, r2
 80034c8:	17d2      	asrs	r2, r2, #31
 80034ca:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 80034ce:	809a      	strh	r2, [r3, #4]

	msp_txf_raw_imu.gyrx = gyroRaw.x;
 80034d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <AHRS_ComputeAngles+0x110>)
 80034d2:	8811      	ldrh	r1, [r2, #0]
 80034d4:	80d9      	strh	r1, [r3, #6]
	msp_txf_raw_imu.gyry = gyroRaw.y;
 80034d6:	8851      	ldrh	r1, [r2, #2]
 80034d8:	8119      	strh	r1, [r3, #8]
	msp_txf_raw_imu.gyrz = gyroRaw.z;
 80034da:	8892      	ldrh	r2, [r2, #4]
 80034dc:	815a      	strh	r2, [r3, #10]

	msp_txf_raw_imu.magx = magRaw.x;
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <AHRS_ComputeAngles+0x114>)
 80034e0:	8811      	ldrh	r1, [r2, #0]
 80034e2:	8199      	strh	r1, [r3, #12]
	msp_txf_raw_imu.magy = magRaw.y;
 80034e4:	8851      	ldrh	r1, [r2, #2]
 80034e6:	81d9      	strh	r1, [r3, #14]
	msp_txf_raw_imu.magz = magRaw.z;
 80034e8:	8892      	ldrh	r2, [r2, #4]
 80034ea:	821a      	strh	r2, [r3, #16]

	// Update RC MSP frame
	msp_txf_attitude.angx = AHRS_GetRoll() * 10;	// Multiply by 10 -> Required by MSP
 80034ec:	f7ff ff76 	bl	80033dc <AHRS_GetRoll>
 80034f0:	4c16      	ldr	r4, [pc, #88]	@ (800354c <AHRS_ComputeAngles+0x118>)
 80034f2:	4917      	ldr	r1, [pc, #92]	@ (8003550 <AHRS_ComputeAngles+0x11c>)
 80034f4:	f7fd fbfe 	bl	8000cf4 <__aeabi_fmul>
 80034f8:	f7fd fdc2 	bl	8001080 <__aeabi_f2iz>
 80034fc:	8020      	strh	r0, [r4, #0]
	msp_txf_attitude.angy = AHRS_GetPitch() * 10;	// Multiply by 10 -> Required by MSP
 80034fe:	f7ff ff61 	bl	80033c4 <AHRS_GetPitch>
 8003502:	4913      	ldr	r1, [pc, #76]	@ (8003550 <AHRS_ComputeAngles+0x11c>)
 8003504:	f7fd fbf6 	bl	8000cf4 <__aeabi_fmul>
 8003508:	f7fd fdba 	bl	8001080 <__aeabi_f2iz>
 800350c:	8060      	strh	r0, [r4, #2]
	msp_txf_attitude.heading = AHRS_GetYaw();
 800350e:	f7ff ff71 	bl	80033f4 <AHRS_GetYaw>
 8003512:	f7fd fdb5 	bl	8001080 <__aeabi_f2iz>
 8003516:	80a0      	strh	r0, [r4, #4]
}
 8003518:	b007      	add	sp, #28
 800351a:	bd30      	pop	{r4, r5, pc}
 800351c:	20000294 	.word	0x20000294
 8003520:	20000298 	.word	0x20000298
 8003524:	447a0000 	.word	0x447a0000
 8003528:	20000270 	.word	0x20000270
 800352c:	2000027c 	.word	0x2000027c
 8003530:	20000288 	.word	0x20000288
 8003534:	20000264 	.word	0x20000264
 8003538:	20000b90 	.word	0x20000b90
 800353c:	20000250 	.word	0x20000250
 8003540:	51eb851f 	.word	0x51eb851f
 8003544:	20000248 	.word	0x20000248
 8003548:	20000240 	.word	0x20000240
 800354c:	20000b80 	.word	0x20000b80
 8003550:	41200000 	.word	0x41200000

08003554 <MS5611_ReadADC>:
 Arguments		:	None
 Return Value	:	24-bit ADC value
 Example Call	:	MS5611_ReadADC()
 ***********************************/
static uint32_t MS5611_ReadADC(void)
{
 8003554:	b500      	push	{lr}
 8003556:	b085      	sub	sp, #20
	uint8_t rxbuf[3];
	I2C_ReadBytes(MS5611_ADDRESS, MS5611_CMD_ADC_READ, rxbuf, 3, __FILE__, __LINE__); // Read ADC 3 bytes
 8003558:	238c      	movs	r3, #140	@ 0x8c
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <MS5611_ReadADC+0x34>)
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2303      	movs	r3, #3
 8003562:	aa03      	add	r2, sp, #12
 8003564:	2100      	movs	r1, #0
 8003566:	20ee      	movs	r0, #238	@ 0xee
 8003568:	f001 f830 	bl	80045cc <I2C_ReadBytes>

	// Combine the 3 bytes to form the 24-bit ADC value
	return ((uint32_t)(rxbuf[0] << 16) | ((uint32_t)rxbuf[1] << 8) | (uint32_t)rxbuf[2]);
 800356c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003570:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800357a:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
 800357e:	4318      	orrs	r0, r3
 8003580:	b005      	add	sp, #20
 8003582:	f85d fb04 	ldr.w	pc, [sp], #4
 8003586:	bf00      	nop
 8003588:	08007720 	.word	0x08007720

0800358c <MS5611_GetFilteredAltitude>:
 Example Call	:	MS5611_GetFilteredAltitude()
 ***********************************/
float MS5611_GetFilteredAltitude(void)
{
	return MS5611_FilteredAltitude;
}
 800358c:	4b01      	ldr	r3, [pc, #4]	@ (8003594 <MS5611_GetFilteredAltitude+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200002c0 	.word	0x200002c0

08003598 <MS5611_Update>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MS5611_Update()
 ***********************************/
void MS5611_Update(void)
{
 8003598:	b570      	push	{r4, r5, r6, lr}
	if (TEMP_READY && PRESSURE_READY)
 800359a:	4b79      	ldr	r3, [pc, #484]	@ (8003780 <MS5611_Update+0x1e8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b113      	cbz	r3, 80035a6 <MS5611_Update+0xe>
 80035a0:	4b78      	ldr	r3, [pc, #480]	@ (8003784 <MS5611_Update+0x1ec>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b9eb      	cbnz	r3, 80035e2 <MS5611_Update+0x4a>
		MS5611_StartTemperatureConversion();
		temp_time = millis();
	}

	// 10ms delay for ADC conversion
	if (((millis() - temp_time) > 10) && !(TEMP_READY) && !(PRESSURE_READY))
 80035a6:	f001 ffe7 	bl	8005578 <millis>
 80035aa:	4b77      	ldr	r3, [pc, #476]	@ (8003788 <MS5611_Update+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1ac0      	subs	r0, r0, r3
 80035b0:	280a      	cmp	r0, #10
 80035b2:	d906      	bls.n	80035c2 <MS5611_Update+0x2a>
 80035b4:	4b72      	ldr	r3, [pc, #456]	@ (8003780 <MS5611_Update+0x1e8>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4a72      	ldr	r2, [pc, #456]	@ (8003784 <MS5611_Update+0x1ec>)
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f000 80bb 	beq.w	8003738 <MS5611_Update+0x1a0>

		MS5611_StartPressureConversion();
		pressure_time = millis();
	}

	if (((millis() - pressure_time) > 10) && TEMP_READY && !(PRESSURE_READY))
 80035c2:	f001 ffd9 	bl	8005578 <millis>
 80035c6:	4b71      	ldr	r3, [pc, #452]	@ (800378c <MS5611_Update+0x1f4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1ac0      	subs	r0, r0, r3
 80035cc:	280a      	cmp	r0, #10
 80035ce:	d907      	bls.n	80035e0 <MS5611_Update+0x48>
 80035d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003780 <MS5611_Update+0x1e8>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b123      	cbz	r3, 80035e0 <MS5611_Update+0x48>
 80035d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003784 <MS5611_Update+0x1ec>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80bf 	beq.w	800375e <MS5611_Update+0x1c6>
	{
		MS5611_ReadPressure();
		PRESSURE_READY = 1;
	}
}
 80035e0:	bd70      	pop	{r4, r5, r6, pc}
	int32_t dT = MS5611_RawTemperature - ((uint32_t) MS5611_Coefficients[5] << 8);
 80035e2:	4e6b      	ldr	r6, [pc, #428]	@ (8003790 <MS5611_Update+0x1f8>)
 80035e4:	8972      	ldrh	r2, [r6, #10]
 80035e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003794 <MS5611_Update+0x1fc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	eba3 2302 	sub.w	r3, r3, r2, lsl #8
	TEMP = 2000 + (((int64_t) dT * MS5611_Coefficients[6]) >> 23);
 80035ee:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 80035f2:	89b0      	ldrh	r0, [r6, #12]
 80035f4:	fba0 2103 	umull	r2, r1, r0, r3
 80035f8:	fb00 110c 	mla	r1, r0, ip, r1
 80035fc:	0dd2      	lsrs	r2, r2, #23
 80035fe:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8003602:	f502 64fa 	add.w	r4, r2, #2000	@ 0x7d0
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8003606:	8930      	ldrh	r0, [r6, #8]
 8003608:	fba0 1503 	umull	r1, r5, r0, r3
 800360c:	fb00 550c 	mla	r5, r0, ip, r5
 8003610:	09c9      	lsrs	r1, r1, #7
 8003612:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
 8003616:	11ed      	asrs	r5, r5, #7
 8003618:	88b0      	ldrh	r0, [r6, #4]
 800361a:	0400      	lsls	r0, r0, #16
 800361c:	1809      	adds	r1, r1, r0
 800361e:	f145 0500 	adc.w	r5, r5, #0
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 8003622:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8003626:	fbae 3003 	umull	r3, r0, lr, r3
 800362a:	fb0e 000c 	mla	r0, lr, ip, r0
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003634:	1200      	asrs	r0, r0, #8
 8003636:	8876      	ldrh	r6, [r6, #2]
 8003638:	03f6      	lsls	r6, r6, #15
 800363a:	199b      	adds	r3, r3, r6
 800363c:	f140 0000 	adc.w	r0, r0, #0
	if (TEMP < 2000)
 8003640:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8003644:	da75      	bge.n	8003732 <MS5611_Update+0x19a>
		TT = TT * TT;
 8003646:	fb02 f202 	mul.w	r2, r2, r2
		OFF2 = (5 * TT) >> 1;
 800364a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800364e:	ea4f 0c62 	mov.w	ip, r2, asr #1
		SENS2 = (5 * TT) >> 2;
 8003652:	1092      	asrs	r2, r2, #2
	SENS -= SENS2;
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	eb60 72e2 	sbc.w	r2, r0, r2, asr #31
	P = (((MS5611_RawPressure * SENS) >> 21) - OFF) >> 15;
 800365a:	484f      	ldr	r0, [pc, #316]	@ (8003798 <MS5611_Update+0x200>)
 800365c:	6806      	ldr	r6, [r0, #0]
 800365e:	fba3 3006 	umull	r3, r0, r3, r6
 8003662:	fb06 0202 	mla	r2, r6, r2, r0
 8003666:	0d5b      	lsrs	r3, r3, #21
 8003668:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800366c:	1552      	asrs	r2, r2, #21
	OFF  -= OFF2;
 800366e:	ebb1 010c 	subs.w	r1, r1, ip
 8003672:	eb65 75ec 	sbc.w	r5, r5, ip, asr #31
	P = (((MS5611_RawPressure * SENS) >> 21) - OFF) >> 15;
 8003676:	1a5b      	subs	r3, r3, r1
 8003678:	eb62 0005 	sbc.w	r0, r2, r5
 800367c:	0bdb      	lsrs	r3, r3, #15
	MS5611_CompensatedPressure = (float) P / 100.0f;
 800367e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
 8003682:	f7fd fae3 	bl	8000c4c <__aeabi_i2f>
 8003686:	4945      	ldr	r1, [pc, #276]	@ (800379c <MS5611_Update+0x204>)
 8003688:	f7fd fbe8 	bl	8000e5c <__aeabi_fdiv>
 800368c:	4605      	mov	r5, r0
 800368e:	4b44      	ldr	r3, [pc, #272]	@ (80037a0 <MS5611_Update+0x208>)
 8003690:	6018      	str	r0, [r3, #0]
	MS5611_CompensatedTemperature = (float) TEMP / 100.0f;
 8003692:	4620      	mov	r0, r4
 8003694:	f7fd fada 	bl	8000c4c <__aeabi_i2f>
 8003698:	4940      	ldr	r1, [pc, #256]	@ (800379c <MS5611_Update+0x204>)
 800369a:	f7fd fbdf 	bl	8000e5c <__aeabi_fdiv>
 800369e:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <MS5611_Update+0x20c>)
 80036a0:	6018      	str	r0, [r3, #0]
	MS5611_Altitude = 44330.0f * (1.0f - pow(MS5611_CompensatedPressure / SEA_LEVEL_PRESSURE, 0.1902949f));
 80036a2:	4941      	ldr	r1, [pc, #260]	@ (80037a8 <MS5611_Update+0x210>)
 80036a4:	4628      	mov	r0, r5
 80036a6:	f7fd fbd9 	bl	8000e5c <__aeabi_fdiv>
 80036aa:	f7fc febd 	bl	8000428 <__aeabi_f2d>
 80036ae:	a330      	add	r3, pc, #192	@ (adr r3, 8003770 <MS5611_Update+0x1d8>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f002 fc5e 	bl	8005f74 <pow>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	2000      	movs	r0, #0
 80036be:	493b      	ldr	r1, [pc, #236]	@ (80037ac <MS5611_Update+0x214>)
 80036c0:	f7fc fd52 	bl	8000168 <__aeabi_dsub>
 80036c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8003778 <MS5611_Update+0x1e0>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fc ff05 	bl	80004d8 <__aeabi_dmul>
 80036ce:	f7fd f9b3 	bl	8000a38 <__aeabi_d2f>
 80036d2:	4606      	mov	r6, r0
 80036d4:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <MS5611_Update+0x218>)
 80036d6:	6018      	str	r0, [r3, #0]
	for (int i=0; i<19; i++)
 80036d8:	4c36      	ldr	r4, [pc, #216]	@ (80037b4 <MS5611_Update+0x21c>)
 80036da:	f104 054c 	add.w	r5, r4, #76	@ 0x4c
	float sum = 0;
 80036de:	2000      	movs	r0, #0
		alt_filter[i] = alt_filter[i+1];
 80036e0:	6861      	ldr	r1, [r4, #4]
 80036e2:	f844 1b04 	str.w	r1, [r4], #4
		sum += alt_filter[i];
 80036e6:	f7fd f9fd 	bl	8000ae4 <__addsf3>
	for (int i=0; i<19; i++)
 80036ea:	42ac      	cmp	r4, r5
 80036ec:	d1f8      	bne.n	80036e0 <MS5611_Update+0x148>
	alt_filter[19] = MS5611_Altitude;
 80036ee:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <MS5611_Update+0x21c>)
 80036f0:	64de      	str	r6, [r3, #76]	@ 0x4c
	sum += alt_filter[19];
 80036f2:	4631      	mov	r1, r6
 80036f4:	f7fd f9f6 	bl	8000ae4 <__addsf3>
	MS5611_FilteredAltitude = sum/20.0f;
 80036f8:	492f      	ldr	r1, [pc, #188]	@ (80037b8 <MS5611_Update+0x220>)
 80036fa:	f7fd fbaf 	bl	8000e5c <__aeabi_fdiv>
 80036fe:	4b2f      	ldr	r3, [pc, #188]	@ (80037bc <MS5611_Update+0x224>)
 8003700:	6018      	str	r0, [r3, #0]
		msp_txf_altitude.est_alt = (int32_t) MS5611_FilteredAltitude * 100;
 8003702:	f7fd fcbd 	bl	8001080 <__aeabi_f2iz>
 8003706:	2364      	movs	r3, #100	@ 0x64
 8003708:	fb03 f000 	mul.w	r0, r3, r0
 800370c:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <MS5611_Update+0x228>)
 800370e:	6018      	str	r0, [r3, #0]
		TEMP_READY = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <MS5611_Update+0x1e8>)
 8003714:	7013      	strb	r3, [r2, #0]
		PRESSURE_READY = 0;
 8003716:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <MS5611_Update+0x1ec>)
 8003718:	7013      	strb	r3, [r2, #0]
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + MS5611_OSR, 1, 0); // Start D2 (temperature) conversion
 800371a:	4a2a      	ldr	r2, [pc, #168]	@ (80037c4 <MS5611_Update+0x22c>)
 800371c:	7811      	ldrb	r1, [r2, #0]
 800371e:	2201      	movs	r2, #1
 8003720:	3150      	adds	r1, #80	@ 0x50
 8003722:	20ee      	movs	r0, #238	@ 0xee
 8003724:	f000 ff12 	bl	800454c <I2C_WriteByte>
		temp_time = millis();
 8003728:	f001 ff26 	bl	8005578 <millis>
 800372c:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <MS5611_Update+0x1f0>)
 800372e:	6018      	str	r0, [r3, #0]
 8003730:	e739      	b.n	80035a6 <MS5611_Update+0xe>
		SENS2 = 0;
 8003732:	2200      	movs	r2, #0
		OFF2 = 0;
 8003734:	4694      	mov	ip, r2
 8003736:	e78d      	b.n	8003654 <MS5611_Update+0xbc>
	MS5611_RawTemperature = MS5611_ReadADC();
 8003738:	f7ff ff0c 	bl	8003554 <MS5611_ReadADC>
 800373c:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <MS5611_Update+0x1fc>)
 800373e:	6018      	str	r0, [r3, #0]
		TEMP_READY = 1;
 8003740:	2201      	movs	r2, #1
 8003742:	4b0f      	ldr	r3, [pc, #60]	@ (8003780 <MS5611_Update+0x1e8>)
 8003744:	701a      	strb	r2, [r3, #0]
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + MS5611_OSR, 1, 0); // Start D1 (pressure) conversion
 8003746:	4b1f      	ldr	r3, [pc, #124]	@ (80037c4 <MS5611_Update+0x22c>)
 8003748:	7819      	ldrb	r1, [r3, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	3140      	adds	r1, #64	@ 0x40
 800374e:	20ee      	movs	r0, #238	@ 0xee
 8003750:	f000 fefc 	bl	800454c <I2C_WriteByte>
		pressure_time = millis();
 8003754:	f001 ff10 	bl	8005578 <millis>
 8003758:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <MS5611_Update+0x1f4>)
 800375a:	6018      	str	r0, [r3, #0]
 800375c:	e731      	b.n	80035c2 <MS5611_Update+0x2a>
	MS5611_RawPressure = MS5611_ReadADC();
 800375e:	f7ff fef9 	bl	8003554 <MS5611_ReadADC>
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <MS5611_Update+0x200>)
 8003764:	6018      	str	r0, [r3, #0]
		PRESSURE_READY = 1;
 8003766:	4b07      	ldr	r3, [pc, #28]	@ (8003784 <MS5611_Update+0x1ec>)
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
}
 800376c:	e738      	b.n	80035e0 <MS5611_Update+0x48>
 800376e:	bf00      	nop
 8003770:	60000000 	.word	0x60000000
 8003774:	3fc85b95 	.word	0x3fc85b95
 8003778:	00000000 	.word	0x00000000
 800377c:	40e5a540 	.word	0x40e5a540
 8003780:	200002a5 	.word	0x200002a5
 8003784:	200002a4 	.word	0x200002a4
 8003788:	200002a0 	.word	0x200002a0
 800378c:	2000029c 	.word	0x2000029c
 8003790:	200002a8 	.word	0x200002a8
 8003794:	200002bc 	.word	0x200002bc
 8003798:	200002b8 	.word	0x200002b8
 800379c:	42c80000 	.word	0x42c80000
 80037a0:	200002c8 	.word	0x200002c8
 80037a4:	200002cc 	.word	0x200002cc
 80037a8:	447d5000 	.word	0x447d5000
 80037ac:	3ff00000 	.word	0x3ff00000
 80037b0:	200002c4 	.word	0x200002c4
 80037b4:	200002d0 	.word	0x200002d0
 80037b8:	41a00000 	.word	0x41a00000
 80037bc:	200002c0 	.word	0x200002c0
 80037c0:	20000b78 	.word	0x20000b78
 80037c4:	20000038 	.word	0x20000038

080037c8 <MS5611_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MS5611_Init()
 ***********************************/
void MS5611_Init(void)
{
 80037c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037cc:	b084      	sub	sp, #16
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_RESET, 1, 1);
 80037ce:	2301      	movs	r3, #1
 80037d0:	461a      	mov	r2, r3
 80037d2:	211e      	movs	r1, #30
 80037d4:	20ee      	movs	r0, #238	@ 0xee
 80037d6:	f000 feb9 	bl	800454c <I2C_WriteByte>
	delay_ms(10); // Minimum delay of 2.8 ms required
 80037da:	200a      	movs	r0, #10
 80037dc:	f001 fed4 	bl	8005588 <delay_ms>
	MS5611_OSR = osr;
 80037e0:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <MS5611_Init+0x70>)
 80037e2:	2208      	movs	r2, #8
 80037e4:	701a      	strb	r2, [r3, #0]

	// Set OSR value
	MS5611_SetOSR(MS5611_OSR_4096);

	// Read PROM Co-efficients
	for (int i=0; i<MS5611_PROM_NB; i++)
 80037e6:	4d15      	ldr	r5, [pc, #84]	@ (800383c <MS5611_Init+0x74>)
 80037e8:	f105 0810 	add.w	r8, r5, #16
	MS5611_OSR = osr;
 80037ec:	462c      	mov	r4, r5
	uint8_t rxbuf[2] = {0, 0};
 80037ee:	2700      	movs	r7, #0
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
 80037f0:	4e13      	ldr	r6, [pc, #76]	@ (8003840 <MS5611_Init+0x78>)
	uint8_t rxbuf[2] = {0, 0};
 80037f2:	f8ad 700c 	strh.w	r7, [sp, #12]
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
 80037f6:	f1c5 01a0 	rsb	r1, r5, #160	@ 0xa0
 80037fa:	4421      	add	r1, r4
 80037fc:	237c      	movs	r3, #124	@ 0x7c
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	9600      	str	r6, [sp, #0]
 8003802:	2302      	movs	r3, #2
 8003804:	aa03      	add	r2, sp, #12
 8003806:	b289      	uxth	r1, r1
 8003808:	20ee      	movs	r0, #238	@ 0xee
 800380a:	f000 fef5 	bl	80045f8 <I2C_ReadByteArray>
	return ((rxbuf[0] << 8) | rxbuf[1]);
 800380e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003812:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		MS5611_Coefficients[i] = MS5611_ReadPROM(i);
 800381a:	f824 3b02 	strh.w	r3, [r4], #2
	for (int i=0; i<MS5611_PROM_NB; i++)
 800381e:	4544      	cmp	r4, r8
 8003820:	d1e7      	bne.n	80037f2 <MS5611_Init+0x2a>
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <MS5611_Init+0x7c>)
 8003824:	f103 0150 	add.w	r1, r3, #80	@ 0x50

	// Clear the altitude filter values
	for (int i=0; i<20; i++)
		alt_filter[i] = 0;
 8003828:	2200      	movs	r2, #0
 800382a:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i=0; i<20; i++)
 800382e:	428b      	cmp	r3, r1
 8003830:	d1fb      	bne.n	800382a <MS5611_Init+0x62>
}
 8003832:	b004      	add	sp, #16
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	20000038 	.word	0x20000038
 800383c:	200002a8 	.word	0x200002a8
 8003840:	08007720 	.word	0x08007720
 8003844:	200002cc 	.word	0x200002cc

08003848 <MadgwickSetBeta>:
 Return Value	:	None
 Example Call	:	MadgwickSetBeta(0.6)
 ***********************************/
void MadgwickSetBeta(float _beta)
{
	beta = _beta;
 8003848:	4b01      	ldr	r3, [pc, #4]	@ (8003850 <MadgwickSetBeta+0x8>)
 800384a:	6018      	str	r0, [r3, #0]
}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000324 	.word	0x20000324

08003854 <MadgwickSetDelta>:
 Return Value	:	None
 Example Call	:	MadgwickSetDelta(0.1)
 ***********************************/
void MadgwickSetDelta(float _deltat)
{
	deltat = _deltat;
 8003854:	4b01      	ldr	r3, [pc, #4]	@ (800385c <MadgwickSetDelta+0x8>)
 8003856:	6018      	str	r0, [r3, #0]
}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000320 	.word	0x20000320

08003860 <MadgwickQuaternionUpdate>:
 Example Call	:	MadgwickQuaternionUpdate(-accelData.y, -accelData.x, accelData.z, gyroData.y,
					gyroData.x, -gyroData.z, magData.x,	magData.y, magData.z, AHRS_Angle)
 ***********************************/
void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz, float *angle)
{
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003864:	b099      	sub	sp, #100	@ 0x64
 8003866:	460e      	mov	r6, r1
 8003868:	4691      	mov	r9, r2
 800386a:	4698      	mov	r8, r3
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 800386c:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <MadgwickQuaternionUpdate+0x68>)
 800386e:	f8d3 a000 	ldr.w	sl, [r3]
 8003872:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8003876:	689d      	ldr	r5, [r3, #8]
 8003878:	68dc      	ldr	r4, [r3, #12]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 800387a:	9008      	str	r0, [sp, #32]
 800387c:	4601      	mov	r1, r0
 800387e:	f7fd fa39 	bl	8000cf4 <__aeabi_fmul>
 8003882:	4607      	mov	r7, r0
 8003884:	4631      	mov	r1, r6
 8003886:	4630      	mov	r0, r6
 8003888:	f7fd fa34 	bl	8000cf4 <__aeabi_fmul>
 800388c:	4601      	mov	r1, r0
 800388e:	4638      	mov	r0, r7
 8003890:	f7fd f928 	bl	8000ae4 <__addsf3>
 8003894:	4607      	mov	r7, r0
 8003896:	4649      	mov	r1, r9
 8003898:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800389c:	4648      	mov	r0, r9
 800389e:	f7fd fa29 	bl	8000cf4 <__aeabi_fmul>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4638      	mov	r0, r7
 80038a6:	f7fd f91d 	bl	8000ae4 <__addsf3>
 80038aa:	f7fc fdbd 	bl	8000428 <__aeabi_f2d>
 80038ae:	f002 fbc9 	bl	8006044 <sqrt>
 80038b2:	f7fd f8c1 	bl	8000a38 <__aeabi_d2f>
 80038b6:	4607      	mov	r7, r0
	if (norm == 0.0f) return; // handle NaN
 80038b8:	2100      	movs	r1, #0
 80038ba:	f7fd fbaf 	bl	800101c <__aeabi_fcmpeq>
 80038be:	b128      	cbz	r0, 80038cc <MadgwickQuaternionUpdate+0x6c>
	angle[0] = asin(2.0f * (q[1] * q[3] - q[0] * q[2])) * 180 / M_PI;
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
}
 80038c0:	b019      	add	sp, #100	@ 0x64
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	bf00      	nop
 80038c8:	2000003c 	.word	0x2000003c
	norm = sqrt(mx * mx + my * my + mz * mz);
 80038cc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80038ce:	4608      	mov	r0, r1
 80038d0:	f7fd fa10 	bl	8000cf4 <__aeabi_fmul>
 80038d4:	4681      	mov	r9, r0
 80038d6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80038d8:	4608      	mov	r0, r1
 80038da:	f7fd fa0b 	bl	8000cf4 <__aeabi_fmul>
 80038de:	4601      	mov	r1, r0
 80038e0:	4648      	mov	r0, r9
 80038e2:	f7fd f8ff 	bl	8000ae4 <__addsf3>
 80038e6:	4681      	mov	r9, r0
 80038e8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80038ea:	4608      	mov	r0, r1
 80038ec:	f7fd fa02 	bl	8000cf4 <__aeabi_fmul>
 80038f0:	4601      	mov	r1, r0
 80038f2:	4648      	mov	r0, r9
 80038f4:	f7fd f8f6 	bl	8000ae4 <__addsf3>
 80038f8:	f7fc fd96 	bl	8000428 <__aeabi_f2d>
 80038fc:	f002 fba2 	bl	8006044 <sqrt>
 8003900:	f7fd f89a 	bl	8000a38 <__aeabi_d2f>
 8003904:	4681      	mov	r9, r0
	if (norm == 0.0f) return; // handle NaN
 8003906:	2100      	movs	r1, #0
 8003908:	f7fd fb88 	bl	800101c <__aeabi_fcmpeq>
 800390c:	2800      	cmp	r0, #0
 800390e:	d1d7      	bne.n	80038c0 <MadgwickQuaternionUpdate+0x60>
	gx *= M_PI / 180;
 8003910:	4640      	mov	r0, r8
 8003912:	f7fc fd89 	bl	8000428 <__aeabi_f2d>
 8003916:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003bb8 <MadgwickQuaternionUpdate+0x358>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f7fc fddc 	bl	80004d8 <__aeabi_dmul>
 8003920:	f7fd f88a 	bl	8000a38 <__aeabi_d2f>
 8003924:	900a      	str	r0, [sp, #40]	@ 0x28
	gy *= M_PI / 180;
 8003926:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8003928:	f7fc fd7e 	bl	8000428 <__aeabi_f2d>
 800392c:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003bb8 <MadgwickQuaternionUpdate+0x358>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f7fc fdd1 	bl	80004d8 <__aeabi_dmul>
 8003936:	f7fd f87f 	bl	8000a38 <__aeabi_d2f>
 800393a:	900b      	str	r0, [sp, #44]	@ 0x2c
	gz *= M_PI / 180;
 800393c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800393e:	f7fc fd73 	bl	8000428 <__aeabi_f2d>
 8003942:	a39d      	add	r3, pc, #628	@ (adr r3, 8003bb8 <MadgwickQuaternionUpdate+0x358>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fdc6 	bl	80004d8 <__aeabi_dmul>
 800394c:	f7fd f874 	bl	8000a38 <__aeabi_d2f>
 8003950:	900c      	str	r0, [sp, #48]	@ 0x30
	float _2q1 = 2.0f * q1;
 8003952:	4651      	mov	r1, sl
 8003954:	4650      	mov	r0, sl
 8003956:	f7fd f8c5 	bl	8000ae4 <__addsf3>
 800395a:	9002      	str	r0, [sp, #8]
	float _2q2 = 2.0f * q2;
 800395c:	4659      	mov	r1, fp
 800395e:	4658      	mov	r0, fp
 8003960:	f7fd f8c0 	bl	8000ae4 <__addsf3>
 8003964:	9004      	str	r0, [sp, #16]
	float _2q3 = 2.0f * q3;
 8003966:	4629      	mov	r1, r5
 8003968:	4628      	mov	r0, r5
 800396a:	f7fd f8bb 	bl	8000ae4 <__addsf3>
 800396e:	9005      	str	r0, [sp, #20]
	float _2q4 = 2.0f * q4;
 8003970:	4621      	mov	r1, r4
 8003972:	4620      	mov	r0, r4
 8003974:	f7fd f8b6 	bl	8000ae4 <__addsf3>
 8003978:	9012      	str	r0, [sp, #72]	@ 0x48
	float q1q1 = q1 * q1;
 800397a:	4651      	mov	r1, sl
 800397c:	4650      	mov	r0, sl
 800397e:	f7fd f9b9 	bl	8000cf4 <__aeabi_fmul>
 8003982:	900f      	str	r0, [sp, #60]	@ 0x3c
	float q1q2 = q1 * q2;
 8003984:	4659      	mov	r1, fp
 8003986:	4650      	mov	r0, sl
 8003988:	f7fd f9b4 	bl	8000cf4 <__aeabi_fmul>
 800398c:	9010      	str	r0, [sp, #64]	@ 0x40
	float q1q3 = q1 * q3;
 800398e:	4629      	mov	r1, r5
 8003990:	4650      	mov	r0, sl
 8003992:	f7fd f9af 	bl	8000cf4 <__aeabi_fmul>
 8003996:	9013      	str	r0, [sp, #76]	@ 0x4c
	float q2q2 = q2 * q2;
 8003998:	4659      	mov	r1, fp
 800399a:	4658      	mov	r0, fp
 800399c:	f7fd f9aa 	bl	8000cf4 <__aeabi_fmul>
 80039a0:	9006      	str	r0, [sp, #24]
	float q2q4 = q2 * q4;
 80039a2:	4621      	mov	r1, r4
 80039a4:	4658      	mov	r0, fp
 80039a6:	f7fd f9a5 	bl	8000cf4 <__aeabi_fmul>
 80039aa:	900d      	str	r0, [sp, #52]	@ 0x34
	float q3q3 = q3 * q3;
 80039ac:	4629      	mov	r1, r5
 80039ae:	4628      	mov	r0, r5
 80039b0:	f7fd f9a0 	bl	8000cf4 <__aeabi_fmul>
 80039b4:	9007      	str	r0, [sp, #28]
	float q4q4 = q4 * q4;
 80039b6:	4621      	mov	r1, r4
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd f99b 	bl	8000cf4 <__aeabi_fmul>
 80039be:	900e      	str	r0, [sp, #56]	@ 0x38
	norm = 1.0f / norm;
 80039c0:	4639      	mov	r1, r7
 80039c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80039c6:	f7fd fa49 	bl	8000e5c <__aeabi_fdiv>
 80039ca:	9011      	str	r0, [sp, #68]	@ 0x44
	norm = 1.0f / norm;
 80039cc:	4649      	mov	r1, r9
 80039ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80039d2:	f7fd fa43 	bl	8000e5c <__aeabi_fdiv>
 80039d6:	4607      	mov	r7, r0
	mx *= norm;
 80039d8:	4601      	mov	r1, r0
 80039da:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80039dc:	f7fd f98a 	bl	8000cf4 <__aeabi_fmul>
 80039e0:	9003      	str	r0, [sp, #12]
	my *= norm;
 80039e2:	4639      	mov	r1, r7
 80039e4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80039e6:	f7fd f985 	bl	8000cf4 <__aeabi_fmul>
 80039ea:	4681      	mov	r9, r0
	mz *= norm;
 80039ec:	4639      	mov	r1, r7
 80039ee:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80039f0:	f7fd f980 	bl	8000cf4 <__aeabi_fmul>
 80039f4:	4680      	mov	r8, r0
	_2q1mx = 2.0f * q1 * mx;
 80039f6:	9f03      	ldr	r7, [sp, #12]
 80039f8:	4639      	mov	r1, r7
 80039fa:	9802      	ldr	r0, [sp, #8]
 80039fc:	f7fd f97a 	bl	8000cf4 <__aeabi_fmul>
 8003a00:	9014      	str	r0, [sp, #80]	@ 0x50
	_2q1my = 2.0f * q1 * my;
 8003a02:	4649      	mov	r1, r9
 8003a04:	9802      	ldr	r0, [sp, #8]
 8003a06:	f7fd f975 	bl	8000cf4 <__aeabi_fmul>
 8003a0a:	9015      	str	r0, [sp, #84]	@ 0x54
	_2q1mz = 2.0f * q1 * mz;
 8003a0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8003a10:	4641      	mov	r1, r8
 8003a12:	9802      	ldr	r0, [sp, #8]
 8003a14:	f7fd f96e 	bl	8000cf4 <__aeabi_fmul>
 8003a18:	4680      	mov	r8, r0
	_2q2mx = 2.0f * q2 * mx;
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	9804      	ldr	r0, [sp, #16]
 8003a1e:	f7fd f969 	bl	8000cf4 <__aeabi_fmul>
 8003a22:	9016      	str	r0, [sp, #88]	@ 0x58
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8003a24:	4639      	mov	r1, r7
 8003a26:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003a28:	f7fd f964 	bl	8000cf4 <__aeabi_fmul>
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7fd f95f 	bl	8000cf4 <__aeabi_fmul>
 8003a36:	4601      	mov	r1, r0
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7fd f851 	bl	8000ae0 <__aeabi_fsub>
 8003a3e:	4607      	mov	r7, r0
 8003a40:	4641      	mov	r1, r8
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7fd f956 	bl	8000cf4 <__aeabi_fmul>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f7fd f84a 	bl	8000ae4 <__addsf3>
 8003a50:	4607      	mov	r7, r0
 8003a52:	9903      	ldr	r1, [sp, #12]
 8003a54:	9806      	ldr	r0, [sp, #24]
 8003a56:	f7fd f94d 	bl	8000cf4 <__aeabi_fmul>
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7fd f841 	bl	8000ae4 <__addsf3>
 8003a62:	4607      	mov	r7, r0
 8003a64:	4649      	mov	r1, r9
 8003a66:	9804      	ldr	r0, [sp, #16]
 8003a68:	f7fd f944 	bl	8000cf4 <__aeabi_fmul>
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f7fd f941 	bl	8000cf4 <__aeabi_fmul>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4638      	mov	r0, r7
 8003a76:	f7fd f835 	bl	8000ae4 <__addsf3>
 8003a7a:	4607      	mov	r7, r0
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8003a7c:	9901      	ldr	r1, [sp, #4]
 8003a7e:	9804      	ldr	r0, [sp, #16]
 8003a80:	f7fd f938 	bl	8000cf4 <__aeabi_fmul>
 8003a84:	4621      	mov	r1, r4
 8003a86:	f7fd f935 	bl	8000cf4 <__aeabi_fmul>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f7fd f829 	bl	8000ae4 <__addsf3>
 8003a92:	4607      	mov	r7, r0
 8003a94:	9903      	ldr	r1, [sp, #12]
 8003a96:	9807      	ldr	r0, [sp, #28]
 8003a98:	f7fd f92c 	bl	8000cf4 <__aeabi_fmul>
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7fd f81e 	bl	8000ae0 <__aeabi_fsub>
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	9903      	ldr	r1, [sp, #12]
 8003aa8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003aaa:	f7fd f923 	bl	8000cf4 <__aeabi_fmul>
 8003aae:	4601      	mov	r1, r0
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7fd f815 	bl	8000ae0 <__aeabi_fsub>
 8003ab6:	4607      	mov	r7, r0
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8003ab8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7fd f91a 	bl	8000cf4 <__aeabi_fmul>
 8003ac0:	9017      	str	r0, [sp, #92]	@ 0x5c
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003ac6:	f7fd f915 	bl	8000cf4 <__aeabi_fmul>
 8003aca:	4601      	mov	r1, r0
 8003acc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003ace:	f7fd f809 	bl	8000ae4 <__addsf3>
 8003ad2:	9017      	str	r0, [sp, #92]	@ 0x5c
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	f7fd f90c 	bl	8000cf4 <__aeabi_fmul>
 8003adc:	4601      	mov	r1, r0
 8003ade:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003ae0:	f7fc fffe 	bl	8000ae0 <__aeabi_fsub>
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f7fd f903 	bl	8000cf4 <__aeabi_fmul>
 8003aee:	4601      	mov	r1, r0
 8003af0:	4640      	mov	r0, r8
 8003af2:	f7fc fff7 	bl	8000ae4 <__addsf3>
 8003af6:	4680      	mov	r8, r0
 8003af8:	4649      	mov	r1, r9
 8003afa:	9806      	ldr	r0, [sp, #24]
 8003afc:	f7fd f8fa 	bl	8000cf4 <__aeabi_fmul>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7fc ffec 	bl	8000ae0 <__aeabi_fsub>
 8003b08:	4680      	mov	r8, r0
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	9807      	ldr	r0, [sp, #28]
 8003b0e:	f7fd f8f1 	bl	8000cf4 <__aeabi_fmul>
 8003b12:	4601      	mov	r1, r0
 8003b14:	4640      	mov	r0, r8
 8003b16:	f7fc ffe5 	bl	8000ae4 <__addsf3>
 8003b1a:	4680      	mov	r8, r0
 8003b1c:	9901      	ldr	r1, [sp, #4]
 8003b1e:	9805      	ldr	r0, [sp, #20]
 8003b20:	f7fd f8e8 	bl	8000cf4 <__aeabi_fmul>
 8003b24:	4621      	mov	r1, r4
 8003b26:	f7fd f8e5 	bl	8000cf4 <__aeabi_fmul>
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	f7fc ffd9 	bl	8000ae4 <__addsf3>
 8003b32:	4680      	mov	r8, r0
 8003b34:	4649      	mov	r1, r9
 8003b36:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003b38:	f7fd f8dc 	bl	8000cf4 <__aeabi_fmul>
 8003b3c:	4601      	mov	r1, r0
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8003b3e:	4640      	mov	r0, r8
 8003b40:	f7fc ffce 	bl	8000ae0 <__aeabi_fsub>
 8003b44:	4680      	mov	r8, r0
	_2bx = sqrt(hx * hx + hy * hy);
 8003b46:	4639      	mov	r1, r7
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7fd f8d3 	bl	8000cf4 <__aeabi_fmul>
 8003b4e:	4607      	mov	r7, r0
 8003b50:	4641      	mov	r1, r8
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7fd f8ce 	bl	8000cf4 <__aeabi_fmul>
 8003b58:	4601      	mov	r1, r0
 8003b5a:	4638      	mov	r0, r7
 8003b5c:	f7fc ffc2 	bl	8000ae4 <__addsf3>
 8003b60:	f7fc fc62 	bl	8000428 <__aeabi_f2d>
 8003b64:	f002 fa6e 	bl	8006044 <sqrt>
 8003b68:	f7fc ff66 	bl	8000a38 <__aeabi_d2f>
 8003b6c:	4607      	mov	r7, r0
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8003b6e:	f8dd e050 	ldr.w	lr, [sp, #80]	@ 0x50
 8003b72:	f10e 4000 	add.w	r0, lr, #2147483648	@ 0x80000000
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fd f8bc 	bl	8000cf4 <__aeabi_fmul>
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8003b80:	4658      	mov	r0, fp
 8003b82:	f7fd f8b7 	bl	8000cf4 <__aeabi_fmul>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4640      	mov	r0, r8
 8003b8a:	f7fc ffab 	bl	8000ae4 <__addsf3>
 8003b8e:	4680      	mov	r8, r0
 8003b90:	9901      	ldr	r1, [sp, #4]
 8003b92:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003b94:	f7fd f8ae 	bl	8000cf4 <__aeabi_fmul>
 8003b98:	4601      	mov	r1, r0
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7fc ffa2 	bl	8000ae4 <__addsf3>
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7fd f8a5 	bl	8000cf4 <__aeabi_fmul>
 8003baa:	4601      	mov	r1, r0
 8003bac:	4640      	mov	r0, r8
 8003bae:	f7fc ff99 	bl	8000ae4 <__addsf3>
 8003bb2:	4680      	mov	r8, r0
 8003bb4:	e004      	b.n	8003bc0 <MadgwickQuaternionUpdate+0x360>
 8003bb6:	bf00      	nop
 8003bb8:	a2529d39 	.word	0xa2529d39
 8003bbc:	3f91df46 	.word	0x3f91df46
 8003bc0:	9901      	ldr	r1, [sp, #4]
 8003bc2:	9806      	ldr	r0, [sp, #24]
 8003bc4:	f7fd f896 	bl	8000cf4 <__aeabi_fmul>
 8003bc8:	4601      	mov	r1, r0
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7fc ff88 	bl	8000ae0 <__aeabi_fsub>
 8003bd0:	4680      	mov	r8, r0
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	9805      	ldr	r0, [sp, #20]
 8003bd6:	f7fd f88d 	bl	8000cf4 <__aeabi_fmul>
 8003bda:	4621      	mov	r1, r4
 8003bdc:	f7fd f88a 	bl	8000cf4 <__aeabi_fmul>
 8003be0:	4601      	mov	r1, r0
 8003be2:	4640      	mov	r0, r8
 8003be4:	f7fc ff7e 	bl	8000ae4 <__addsf3>
 8003be8:	4680      	mov	r8, r0
 8003bea:	9901      	ldr	r1, [sp, #4]
 8003bec:	9807      	ldr	r0, [sp, #28]
 8003bee:	f7fd f881 	bl	8000cf4 <__aeabi_fmul>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	f7fc ff73 	bl	8000ae0 <__aeabi_fsub>
 8003bfa:	4680      	mov	r8, r0
 8003bfc:	9901      	ldr	r1, [sp, #4]
 8003bfe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003c00:	f7fd f878 	bl	8000cf4 <__aeabi_fmul>
 8003c04:	4601      	mov	r1, r0
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8003c06:	4640      	mov	r0, r8
 8003c08:	f7fc ff6c 	bl	8000ae4 <__addsf3>
 8003c0c:	4680      	mov	r8, r0
	_4bz = 2.0f * _2bz;
 8003c0e:	4601      	mov	r1, r0
 8003c10:	f7fc ff68 	bl	8000ae4 <__addsf3>
 8003c14:	9014      	str	r0, [sp, #80]	@ 0x50
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003c16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7fc ff62 	bl	8000ae4 <__addsf3>
 8003c20:	900f      	str	r0, [sp, #60]	@ 0x3c
	float _2q1q3 = 2.0f * q1 * q3;
 8003c22:	9902      	ldr	r1, [sp, #8]
 8003c24:	4628      	mov	r0, r5
 8003c26:	f7fd f865 	bl	8000cf4 <__aeabi_fmul>
 8003c2a:	4601      	mov	r1, r0
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003c2c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003c2e:	f7fc ff57 	bl	8000ae0 <__aeabi_fsub>
 8003c32:	900f      	str	r0, [sp, #60]	@ 0x3c
	ax *= norm;
 8003c34:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8003c36:	9808      	ldr	r0, [sp, #32]
 8003c38:	f7fd f85c 	bl	8000cf4 <__aeabi_fmul>
 8003c3c:	4601      	mov	r1, r0
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003c3e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003c40:	f7fc ff4e 	bl	8000ae0 <__aeabi_fsub>
 8003c44:	9008      	str	r0, [sp, #32]
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003c46:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 8003c4a:	4661      	mov	r1, ip
 8003c4c:	4660      	mov	r0, ip
 8003c4e:	f7fc ff49 	bl	8000ae4 <__addsf3>
 8003c52:	900f      	str	r0, [sp, #60]	@ 0x3c
	float _2q3q4 = 2.0f * q3 * q4;
 8003c54:	9905      	ldr	r1, [sp, #20]
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7fd f84c 	bl	8000cf4 <__aeabi_fmul>
 8003c5c:	4601      	mov	r1, r0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003c5e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003c60:	f7fc ff40 	bl	8000ae4 <__addsf3>
 8003c64:	900f      	str	r0, [sp, #60]	@ 0x3c
	ay *= norm;
 8003c66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f7fd f843 	bl	8000cf4 <__aeabi_fmul>
 8003c6e:	4601      	mov	r1, r0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003c70:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003c72:	f7fc ff35 	bl	8000ae0 <__aeabi_fsub>
 8003c76:	900f      	str	r0, [sp, #60]	@ 0x3c
			- _2bz * q3
 8003c78:	4641      	mov	r1, r8
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7fd f83a 	bl	8000cf4 <__aeabi_fmul>
 8003c80:	9015      	str	r0, [sp, #84]	@ 0x54
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003c82:	9907      	ldr	r1, [sp, #28]
 8003c84:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003c88:	f7fc ff2a 	bl	8000ae0 <__aeabi_fsub>
 8003c8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003c8e:	f7fc ff27 	bl	8000ae0 <__aeabi_fsub>
 8003c92:	4639      	mov	r1, r7
 8003c94:	f7fd f82e 	bl	8000cf4 <__aeabi_fmul>
 8003c98:	4606      	mov	r6, r0
 8003c9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8003c9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003c9e:	f7fc ff1f 	bl	8000ae0 <__aeabi_fsub>
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	f7fd f826 	bl	8000cf4 <__aeabi_fmul>
 8003ca8:	4601      	mov	r1, r0
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7fc ff1a 	bl	8000ae4 <__addsf3>
 8003cb0:	9903      	ldr	r1, [sp, #12]
 8003cb2:	f7fc ff15 	bl	8000ae0 <__aeabi_fsub>
 8003cb6:	9003      	str	r0, [sp, #12]
			+ (-_2bx * q4 + _2bz * q2)
 8003cb8:	f107 4000 	add.w	r0, r7, #2147483648	@ 0x80000000
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f7fd f819 	bl	8000cf4 <__aeabi_fmul>
 8003cc2:	9016      	str	r0, [sp, #88]	@ 0x58
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	4658      	mov	r0, fp
 8003cc8:	f7fd f814 	bl	8000cf4 <__aeabi_fmul>
 8003ccc:	9017      	str	r0, [sp, #92]	@ 0x5c
	float q2q3 = q2 * q3;
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4658      	mov	r0, fp
 8003cd2:	f7fd f80f 	bl	8000cf4 <__aeabi_fmul>
 8003cd6:	4606      	mov	r6, r0
	float q1q4 = q1 * q4;
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4650      	mov	r0, sl
 8003cdc:	f7fd f80a 	bl	8000cf4 <__aeabi_fmul>
 8003ce0:	4601      	mov	r1, r0
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f7fc fefc 	bl	8000ae0 <__aeabi_fsub>
 8003ce8:	4639      	mov	r1, r7
 8003cea:	f7fd f803 	bl	8000cf4 <__aeabi_fmul>
 8003cee:	4606      	mov	r6, r0
	float q3q4 = q3 * q4;
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7fc fffe 	bl	8000cf4 <__aeabi_fmul>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003cf8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003cfa:	f7fc fef3 	bl	8000ae4 <__addsf3>
 8003cfe:	4641      	mov	r1, r8
 8003d00:	f7fc fff8 	bl	8000cf4 <__aeabi_fmul>
 8003d04:	4601      	mov	r1, r0
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7fc feec 	bl	8000ae4 <__addsf3>
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fee7 	bl	8000ae0 <__aeabi_fsub>
 8003d12:	900e      	str	r0, [sp, #56]	@ 0x38
			+ _2bx * q3
 8003d14:	4639      	mov	r1, r7
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7fc ffec 	bl	8000cf4 <__aeabi_fmul>
 8003d1c:	9010      	str	r0, [sp, #64]	@ 0x40
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003d1e:	9906      	ldr	r1, [sp, #24]
 8003d20:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003d24:	f7fc fedc 	bl	8000ae0 <__aeabi_fsub>
 8003d28:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	f7fc fed7 	bl	8000ae0 <__aeabi_fsub>
 8003d32:	4641      	mov	r1, r8
 8003d34:	f7fc ffde 	bl	8000cf4 <__aeabi_fmul>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d3c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8003d3e:	f7fc fed1 	bl	8000ae4 <__addsf3>
 8003d42:	4639      	mov	r1, r7
 8003d44:	f7fc ffd6 	bl	8000cf4 <__aeabi_fmul>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fc feca 	bl	8000ae4 <__addsf3>
 8003d50:	9901      	ldr	r1, [sp, #4]
 8003d52:	f7fc fec5 	bl	8000ae0 <__aeabi_fsub>
 8003d56:	9001      	str	r0, [sp, #4]
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003d58:	9a05      	ldr	r2, [sp, #20]
 8003d5a:	f102 4000 	add.w	r0, r2, #2147483648	@ 0x80000000
 8003d5e:	9908      	ldr	r1, [sp, #32]
 8003d60:	f7fc ffc8 	bl	8000cf4 <__aeabi_fmul>
 8003d64:	4606      	mov	r6, r0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003d66:	9904      	ldr	r1, [sp, #16]
 8003d68:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003d6a:	f7fc ffc3 	bl	8000cf4 <__aeabi_fmul>
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4630      	mov	r0, r6
 8003d72:	f7fc feb7 	bl	8000ae4 <__addsf3>
 8003d76:	4606      	mov	r6, r0
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003d78:	9903      	ldr	r1, [sp, #12]
 8003d7a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8003d7c:	f7fc ffba 	bl	8000cf4 <__aeabi_fmul>
 8003d80:	4601      	mov	r1, r0
			- _2bz * q3
 8003d82:	4630      	mov	r0, r6
 8003d84:	f7fc feac 	bl	8000ae0 <__aeabi_fsub>
 8003d88:	4606      	mov	r6, r0
			+ (-_2bx * q4 + _2bz * q2)
 8003d8a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8003d8c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8003d8e:	f7fc fea9 	bl	8000ae4 <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003d92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003d94:	f7fc ffae 	bl	8000cf4 <__aeabi_fmul>
 8003d98:	4601      	mov	r1, r0
			+ (-_2bx * q4 + _2bz * q2)
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f7fc fea2 	bl	8000ae4 <__addsf3>
 8003da0:	4606      	mov	r6, r0
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003da2:	9901      	ldr	r1, [sp, #4]
 8003da4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8003da6:	f7fc ffa5 	bl	8000cf4 <__aeabi_fmul>
 8003daa:	4601      	mov	r1, r0
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003dac:	4630      	mov	r0, r6
 8003dae:	f7fc fe99 	bl	8000ae4 <__addsf3>
 8003db2:	9007      	str	r0, [sp, #28]
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003db4:	9b06      	ldr	r3, [sp, #24]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fe93 	bl	8000ae4 <__addsf3>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003dc4:	f7fc fe8c 	bl	8000ae0 <__aeabi_fsub>
 8003dc8:	4606      	mov	r6, r0
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4648      	mov	r0, r9
 8003dce:	f7fc fe89 	bl	8000ae4 <__addsf3>
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7fc fe83 	bl	8000ae0 <__aeabi_fsub>
 8003dda:	4606      	mov	r6, r0
	az *= norm;
 8003ddc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8003dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003de0:	f7fc ff88 	bl	8000cf4 <__aeabi_fmul>
 8003de4:	4601      	mov	r1, r0
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7fc fe7a 	bl	8000ae0 <__aeabi_fsub>
 8003dec:	4681      	mov	r9, r0
			+ _2bz * q4
 8003dee:	4641      	mov	r1, r8
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fc ff7f 	bl	8000cf4 <__aeabi_fmul>
 8003df6:	9009      	str	r0, [sp, #36]	@ 0x24
			+ (_2bx * q3 + _2bz * q1)
 8003df8:	4641      	mov	r1, r8
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	f7fc ff7a 	bl	8000cf4 <__aeabi_fmul>
 8003e00:	4680      	mov	r8, r0
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 8003e02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003e04:	9808      	ldr	r0, [sp, #32]
 8003e06:	f7fc ff75 	bl	8000cf4 <__aeabi_fmul>
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	9902      	ldr	r1, [sp, #8]
 8003e0e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003e10:	f7fc ff70 	bl	8000cf4 <__aeabi_fmul>
 8003e14:	4601      	mov	r1, r0
 8003e16:	4630      	mov	r0, r6
 8003e18:	f7fc fe64 	bl	8000ae4 <__addsf3>
 8003e1c:	4606      	mov	r6, r0
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003e1e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003e22:	4658      	mov	r0, fp
 8003e24:	f7fc ff66 	bl	8000cf4 <__aeabi_fmul>
 8003e28:	4649      	mov	r1, r9
 8003e2a:	f7fc ff63 	bl	8000cf4 <__aeabi_fmul>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7fc fe55 	bl	8000ae0 <__aeabi_fsub>
 8003e36:	4606      	mov	r6, r0
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003e38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e3a:	9803      	ldr	r0, [sp, #12]
 8003e3c:	f7fc ff5a 	bl	8000cf4 <__aeabi_fmul>
 8003e40:	4601      	mov	r1, r0
			+ _2bz * q4
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7fc fe4e 	bl	8000ae4 <__addsf3>
 8003e48:	4606      	mov	r6, r0
			+ (_2bx * q3 + _2bz * q1)
 8003e4a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8003e4e:	4641      	mov	r1, r8
 8003e50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8003e52:	f7fc fe47 	bl	8000ae4 <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003e56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003e58:	f7fc ff4c 	bl	8000cf4 <__aeabi_fmul>
 8003e5c:	4601      	mov	r1, r0
			+ (_2bx * q3 + _2bz * q1)
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f7fc fe40 	bl	8000ae4 <__addsf3>
 8003e64:	4680      	mov	r8, r0
			+ (_2bx * q4 - _4bz * q2)
 8003e66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e68:	f103 4600 	add.w	r6, r3, #2147483648	@ 0x80000000
 8003e6c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8003e6e:	4658      	mov	r0, fp
 8003e70:	f7fc ff40 	bl	8000cf4 <__aeabi_fmul>
 8003e74:	4601      	mov	r1, r0
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7fc fe32 	bl	8000ae0 <__aeabi_fsub>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003e7c:	9901      	ldr	r1, [sp, #4]
 8003e7e:	f7fc ff39 	bl	8000cf4 <__aeabi_fmul>
 8003e82:	4601      	mov	r1, r0
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 8003e84:	4640      	mov	r0, r8
 8003e86:	f7fc fe2d 	bl	8000ae4 <__addsf3>
 8003e8a:	9006      	str	r0, [sp, #24]
	_4bx = 2.0f * _2bx;
 8003e8c:	4639      	mov	r1, r7
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f7fc fe28 	bl	8000ae4 <__addsf3>
			+ (-_4bx * q3 - _2bz * q1)
 8003e94:	f100 4800 	add.w	r8, r0, #2147483648	@ 0x80000000
			+ (_2bx * q2 + _2bz * q4)
 8003e98:	4639      	mov	r1, r7
 8003e9a:	4658      	mov	r0, fp
 8003e9c:	f7fc ff2a 	bl	8000cf4 <__aeabi_fmul>
 8003ea0:	4606      	mov	r6, r0
			+ (_2bx * q1 - _4bz * q3)
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	f7fc ff25 	bl	8000cf4 <__aeabi_fmul>
 8003eaa:	4607      	mov	r7, r0
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 8003eac:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003eb0:	f10c 4000 	add.w	r0, ip, #2147483648	@ 0x80000000
 8003eb4:	9908      	ldr	r1, [sp, #32]
 8003eb6:	f7fc ff1d 	bl	8000cf4 <__aeabi_fmul>
 8003eba:	9002      	str	r0, [sp, #8]
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 8003ebc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003ebe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003ec0:	f7fc ff18 	bl	8000cf4 <__aeabi_fmul>
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	9802      	ldr	r0, [sp, #8]
 8003ec8:	f7fc fe0c 	bl	8000ae4 <__addsf3>
 8003ecc:	9002      	str	r0, [sp, #8]
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003ece:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f7fc ff0e 	bl	8000cf4 <__aeabi_fmul>
 8003ed8:	4649      	mov	r1, r9
 8003eda:	f7fc ff0b 	bl	8000cf4 <__aeabi_fmul>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	9802      	ldr	r0, [sp, #8]
 8003ee2:	f7fc fdfd 	bl	8000ae0 <__aeabi_fsub>
 8003ee6:	4681      	mov	r9, r0
			+ (-_4bx * q3 - _2bz * q1)
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4640      	mov	r0, r8
 8003eec:	f7fc ff02 	bl	8000cf4 <__aeabi_fmul>
 8003ef0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003ef2:	f7fc fdf5 	bl	8000ae0 <__aeabi_fsub>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	f7fc fefc 	bl	8000cf4 <__aeabi_fmul>
 8003efc:	4601      	mov	r1, r0
			+ (-_4bx * q3 - _2bz * q1)
 8003efe:	4648      	mov	r0, r9
 8003f00:	f7fc fdf0 	bl	8000ae4 <__addsf3>
 8003f04:	4681      	mov	r9, r0
			+ (_2bx * q2 + _2bz * q4)
 8003f06:	4631      	mov	r1, r6
 8003f08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f0a:	f7fc fdeb 	bl	8000ae4 <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003f0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003f10:	f7fc fef0 	bl	8000cf4 <__aeabi_fmul>
 8003f14:	4601      	mov	r1, r0
			+ (_2bx * q2 + _2bz * q4)
 8003f16:	4648      	mov	r0, r9
 8003f18:	f7fc fde4 	bl	8000ae4 <__addsf3>
 8003f1c:	4681      	mov	r9, r0
			+ (_2bx * q1 - _4bz * q3)
 8003f1e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8003f20:	4628      	mov	r0, r5
 8003f22:	f7fc fee7 	bl	8000cf4 <__aeabi_fmul>
 8003f26:	4601      	mov	r1, r0
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f7fc fdd9 	bl	8000ae0 <__aeabi_fsub>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003f2e:	9901      	ldr	r1, [sp, #4]
 8003f30:	f7fc fee0 	bl	8000cf4 <__aeabi_fmul>
 8003f34:	4601      	mov	r1, r0
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 8003f36:	4648      	mov	r0, r9
 8003f38:	f7fc fdd4 	bl	8000ae4 <__addsf3>
 8003f3c:	9002      	str	r0, [sp, #8]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 8003f3e:	9904      	ldr	r1, [sp, #16]
 8003f40:	9808      	ldr	r0, [sp, #32]
 8003f42:	f7fc fed7 	bl	8000cf4 <__aeabi_fmul>
 8003f46:	4681      	mov	r9, r0
 8003f48:	9905      	ldr	r1, [sp, #20]
 8003f4a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003f4c:	f7fc fed2 	bl	8000cf4 <__aeabi_fmul>
 8003f50:	4601      	mov	r1, r0
 8003f52:	4648      	mov	r0, r9
 8003f54:	f7fc fdc6 	bl	8000ae4 <__addsf3>
 8003f58:	4681      	mov	r9, r0
			+ (-_4bx * q4 + _2bz * q2)
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	f7fc fec9 	bl	8000cf4 <__aeabi_fmul>
 8003f62:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8003f64:	f7fc fdbe 	bl	8000ae4 <__addsf3>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003f68:	9903      	ldr	r1, [sp, #12]
 8003f6a:	f7fc fec3 	bl	8000cf4 <__aeabi_fmul>
 8003f6e:	4601      	mov	r1, r0
			+ (-_4bx * q4 + _2bz * q2)
 8003f70:	4648      	mov	r0, r9
 8003f72:	f7fc fdb7 	bl	8000ae4 <__addsf3>
 8003f76:	4680      	mov	r8, r0
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003f78:	4639      	mov	r1, r7
 8003f7a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8003f7c:	f7fc fdb0 	bl	8000ae0 <__aeabi_fsub>
 8003f80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003f82:	f7fc feb7 	bl	8000cf4 <__aeabi_fmul>
 8003f86:	4601      	mov	r1, r0
			+ (-_2bx * q1 + _2bz * q3)
 8003f88:	4640      	mov	r0, r8
 8003f8a:	f7fc fdab 	bl	8000ae4 <__addsf3>
 8003f8e:	4607      	mov	r7, r0
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003f90:	4631      	mov	r1, r6
 8003f92:	9801      	ldr	r0, [sp, #4]
 8003f94:	f7fc feae 	bl	8000cf4 <__aeabi_fmul>
 8003f98:	4601      	mov	r1, r0
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f7fc fda2 	bl	8000ae4 <__addsf3>
 8003fa0:	4607      	mov	r7, r0
	norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // Normalize step magnitude
 8003fa2:	9a07      	ldr	r2, [sp, #28]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7fc fea4 	bl	8000cf4 <__aeabi_fmul>
 8003fac:	4606      	mov	r6, r0
 8003fae:	9b06      	ldr	r3, [sp, #24]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fe9e 	bl	8000cf4 <__aeabi_fmul>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f7fc fd92 	bl	8000ae4 <__addsf3>
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	9902      	ldr	r1, [sp, #8]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	f7fc fe95 	bl	8000cf4 <__aeabi_fmul>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f7fc fd89 	bl	8000ae4 <__addsf3>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	9708      	str	r7, [sp, #32]
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7fc fe8b 	bl	8000cf4 <__aeabi_fmul>
 8003fde:	4601      	mov	r1, r0
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f7fc fd7f 	bl	8000ae4 <__addsf3>
 8003fe6:	f7fc fa1f 	bl	8000428 <__aeabi_f2d>
 8003fea:	f002 f82b 	bl	8006044 <sqrt>
 8003fee:	f7fc fd23 	bl	8000a38 <__aeabi_d2f>
 8003ff2:	4601      	mov	r1, r0
	norm = 1.0f / norm;
 8003ff4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003ff8:	f7fc ff30 	bl	8000e5c <__aeabi_fdiv>
 8003ffc:	9001      	str	r0, [sp, #4]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003ffe:	4bae      	ldr	r3, [pc, #696]	@ (80042b8 <MadgwickQuaternionUpdate+0xa58>)
 8004000:	f8d3 9000 	ldr.w	r9, [r3]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004004:	681e      	ldr	r6, [r3, #0]
 8004006:	9603      	str	r6, [sp, #12]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004008:	681f      	ldr	r7, [r3, #0]
 800400a:	9704      	str	r7, [sp, #16]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800400c:	f8d3 c000 	ldr.w	ip, [r3]
 8004010:	f8cd c014 	str.w	ip, [sp, #20]
	q1 += qDot1 * deltat;
 8004014:	4ea9      	ldr	r6, [pc, #676]	@ (80042bc <MadgwickQuaternionUpdate+0xa5c>)
 8004016:	f8d6 8000 	ldr.w	r8, [r6]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800401a:	f10b 4000 	add.w	r0, fp, #2147483648	@ 0x80000000
 800401e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004020:	f7fc fe68 	bl	8000cf4 <__aeabi_fmul>
 8004024:	4607      	mov	r7, r0
 8004026:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004028:	4628      	mov	r0, r5
 800402a:	f7fc fe63 	bl	8000cf4 <__aeabi_fmul>
 800402e:	4601      	mov	r1, r0
 8004030:	4638      	mov	r0, r7
 8004032:	f7fc fd55 	bl	8000ae0 <__aeabi_fsub>
 8004036:	4607      	mov	r7, r0
 8004038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800403a:	4620      	mov	r0, r4
 800403c:	f7fc fe5a 	bl	8000cf4 <__aeabi_fmul>
 8004040:	4601      	mov	r1, r0
 8004042:	4638      	mov	r0, r7
 8004044:	f7fc fd4c 	bl	8000ae0 <__aeabi_fsub>
 8004048:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800404c:	f7fc fe52 	bl	8000cf4 <__aeabi_fmul>
 8004050:	4607      	mov	r7, r0
	s1 *= norm;
 8004052:	9901      	ldr	r1, [sp, #4]
 8004054:	9807      	ldr	r0, [sp, #28]
 8004056:	f7fc fe4d 	bl	8000cf4 <__aeabi_fmul>
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800405a:	4649      	mov	r1, r9
 800405c:	f7fc fe4a 	bl	8000cf4 <__aeabi_fmul>
 8004060:	4601      	mov	r1, r0
 8004062:	4638      	mov	r0, r7
 8004064:	f7fc fd3c 	bl	8000ae0 <__aeabi_fsub>
	q1 += qDot1 * deltat;
 8004068:	4641      	mov	r1, r8
 800406a:	f7fc fe43 	bl	8000cf4 <__aeabi_fmul>
 800406e:	4651      	mov	r1, sl
 8004070:	f7fc fd38 	bl	8000ae4 <__addsf3>
 8004074:	4681      	mov	r9, r0
	q2 += qDot2 * deltat;
 8004076:	f8d6 8000 	ldr.w	r8, [r6]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800407a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800407c:	4650      	mov	r0, sl
 800407e:	f7fc fe39 	bl	8000cf4 <__aeabi_fmul>
 8004082:	4607      	mov	r7, r0
 8004084:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004086:	4628      	mov	r0, r5
 8004088:	f7fc fe34 	bl	8000cf4 <__aeabi_fmul>
 800408c:	4601      	mov	r1, r0
 800408e:	4638      	mov	r0, r7
 8004090:	f7fc fd28 	bl	8000ae4 <__addsf3>
 8004094:	4607      	mov	r7, r0
 8004096:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004098:	4620      	mov	r0, r4
 800409a:	f7fc fe2b 	bl	8000cf4 <__aeabi_fmul>
 800409e:	4601      	mov	r1, r0
 80040a0:	4638      	mov	r0, r7
 80040a2:	f7fc fd1d 	bl	8000ae0 <__aeabi_fsub>
 80040a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80040aa:	f7fc fe23 	bl	8000cf4 <__aeabi_fmul>
 80040ae:	4607      	mov	r7, r0
	s2 *= norm;
 80040b0:	9901      	ldr	r1, [sp, #4]
 80040b2:	9806      	ldr	r0, [sp, #24]
 80040b4:	f7fc fe1e 	bl	8000cf4 <__aeabi_fmul>
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	f7fc fe1b 	bl	8000cf4 <__aeabi_fmul>
 80040be:	4601      	mov	r1, r0
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7fc fd0d 	bl	8000ae0 <__aeabi_fsub>
	q2 += qDot2 * deltat;
 80040c6:	4641      	mov	r1, r8
 80040c8:	f7fc fe14 	bl	8000cf4 <__aeabi_fmul>
 80040cc:	4659      	mov	r1, fp
 80040ce:	f7fc fd09 	bl	8000ae4 <__addsf3>
 80040d2:	4680      	mov	r8, r0
	q3 += qDot3 * deltat;
 80040d4:	6833      	ldr	r3, [r6, #0]
 80040d6:	9303      	str	r3, [sp, #12]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 80040d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040da:	4650      	mov	r0, sl
 80040dc:	f7fc fe0a 	bl	8000cf4 <__aeabi_fmul>
 80040e0:	4607      	mov	r7, r0
 80040e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80040e4:	4658      	mov	r0, fp
 80040e6:	f7fc fe05 	bl	8000cf4 <__aeabi_fmul>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4638      	mov	r0, r7
 80040ee:	f7fc fcf7 	bl	8000ae0 <__aeabi_fsub>
 80040f2:	4607      	mov	r7, r0
 80040f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7fc fdfc 	bl	8000cf4 <__aeabi_fmul>
 80040fc:	4601      	mov	r1, r0
 80040fe:	4638      	mov	r0, r7
 8004100:	f7fc fcf0 	bl	8000ae4 <__addsf3>
 8004104:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004108:	f7fc fdf4 	bl	8000cf4 <__aeabi_fmul>
 800410c:	4607      	mov	r7, r0
	s3 *= norm;
 800410e:	9901      	ldr	r1, [sp, #4]
 8004110:	9802      	ldr	r0, [sp, #8]
 8004112:	f7fc fdef 	bl	8000cf4 <__aeabi_fmul>
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004116:	9904      	ldr	r1, [sp, #16]
 8004118:	f7fc fdec 	bl	8000cf4 <__aeabi_fmul>
 800411c:	4601      	mov	r1, r0
 800411e:	4638      	mov	r0, r7
 8004120:	f7fc fcde 	bl	8000ae0 <__aeabi_fsub>
	q3 += qDot3 * deltat;
 8004124:	9903      	ldr	r1, [sp, #12]
 8004126:	f7fc fde5 	bl	8000cf4 <__aeabi_fmul>
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc fcda 	bl	8000ae4 <__addsf3>
 8004130:	4607      	mov	r7, r0
	q4 += qDot4 * deltat;
 8004132:	6836      	ldr	r6, [r6, #0]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004134:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004136:	4650      	mov	r0, sl
 8004138:	f7fc fddc 	bl	8000cf4 <__aeabi_fmul>
 800413c:	4682      	mov	sl, r0
 800413e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004140:	4658      	mov	r0, fp
 8004142:	f7fc fdd7 	bl	8000cf4 <__aeabi_fmul>
 8004146:	4601      	mov	r1, r0
 8004148:	4650      	mov	r0, sl
 800414a:	f7fc fccb 	bl	8000ae4 <__addsf3>
 800414e:	4682      	mov	sl, r0
 8004150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004152:	4628      	mov	r0, r5
 8004154:	f7fc fdce 	bl	8000cf4 <__aeabi_fmul>
 8004158:	4601      	mov	r1, r0
 800415a:	4650      	mov	r0, sl
 800415c:	f7fc fcc0 	bl	8000ae0 <__aeabi_fsub>
 8004160:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004164:	f7fc fdc6 	bl	8000cf4 <__aeabi_fmul>
 8004168:	4605      	mov	r5, r0
	s4 *= norm;
 800416a:	9901      	ldr	r1, [sp, #4]
 800416c:	9808      	ldr	r0, [sp, #32]
 800416e:	f7fc fdc1 	bl	8000cf4 <__aeabi_fmul>
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004172:	9905      	ldr	r1, [sp, #20]
 8004174:	f7fc fdbe 	bl	8000cf4 <__aeabi_fmul>
 8004178:	4601      	mov	r1, r0
 800417a:	4628      	mov	r0, r5
 800417c:	f7fc fcb0 	bl	8000ae0 <__aeabi_fsub>
	q4 += qDot4 * deltat;
 8004180:	4631      	mov	r1, r6
 8004182:	f7fc fdb7 	bl	8000cf4 <__aeabi_fmul>
 8004186:	4621      	mov	r1, r4
 8004188:	f7fc fcac 	bl	8000ae4 <__addsf3>
 800418c:	4606      	mov	r6, r0
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);  // Normalize quaternion
 800418e:	4649      	mov	r1, r9
 8004190:	4648      	mov	r0, r9
 8004192:	f7fc fdaf 	bl	8000cf4 <__aeabi_fmul>
 8004196:	4604      	mov	r4, r0
 8004198:	4641      	mov	r1, r8
 800419a:	4640      	mov	r0, r8
 800419c:	f7fc fdaa 	bl	8000cf4 <__aeabi_fmul>
 80041a0:	4601      	mov	r1, r0
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7fc fc9e 	bl	8000ae4 <__addsf3>
 80041a8:	4604      	mov	r4, r0
 80041aa:	4639      	mov	r1, r7
 80041ac:	4638      	mov	r0, r7
 80041ae:	f7fc fda1 	bl	8000cf4 <__aeabi_fmul>
 80041b2:	4601      	mov	r1, r0
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fc fc95 	bl	8000ae4 <__addsf3>
 80041ba:	4604      	mov	r4, r0
 80041bc:	4631      	mov	r1, r6
 80041be:	4630      	mov	r0, r6
 80041c0:	f7fc fd98 	bl	8000cf4 <__aeabi_fmul>
 80041c4:	4601      	mov	r1, r0
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7fc fc8c 	bl	8000ae4 <__addsf3>
 80041cc:	f7fc f92c 	bl	8000428 <__aeabi_f2d>
 80041d0:	f001 ff38 	bl	8006044 <sqrt>
 80041d4:	f7fc fc30 	bl	8000a38 <__aeabi_d2f>
 80041d8:	4601      	mov	r1, r0
	norm = 1.0f / norm;
 80041da:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80041de:	f7fc fe3d 	bl	8000e5c <__aeabi_fdiv>
 80041e2:	4605      	mov	r5, r0
	q[0] = q1 * norm;
 80041e4:	4601      	mov	r1, r0
 80041e6:	4648      	mov	r0, r9
 80041e8:	f7fc fd84 	bl	8000cf4 <__aeabi_fmul>
 80041ec:	4681      	mov	r9, r0
 80041ee:	4c34      	ldr	r4, [pc, #208]	@ (80042c0 <MadgwickQuaternionUpdate+0xa60>)
 80041f0:	6020      	str	r0, [r4, #0]
	q[1] = q2 * norm;
 80041f2:	4629      	mov	r1, r5
 80041f4:	4640      	mov	r0, r8
 80041f6:	f7fc fd7d 	bl	8000cf4 <__aeabi_fmul>
 80041fa:	4680      	mov	r8, r0
 80041fc:	6060      	str	r0, [r4, #4]
	q[2] = q3 * norm;
 80041fe:	4629      	mov	r1, r5
 8004200:	4638      	mov	r0, r7
 8004202:	f7fc fd77 	bl	8000cf4 <__aeabi_fmul>
 8004206:	4607      	mov	r7, r0
 8004208:	60a0      	str	r0, [r4, #8]
	q[3] = q4 * norm;
 800420a:	4629      	mov	r1, r5
 800420c:	4630      	mov	r0, r6
 800420e:	f7fc fd71 	bl	8000cf4 <__aeabi_fmul>
 8004212:	4601      	mov	r1, r0
 8004214:	60e0      	str	r0, [r4, #12]
	angle[0] = asin(2.0f * (q[1] * q[3] - q[0] * q[2])) * 180 / M_PI;
 8004216:	4640      	mov	r0, r8
 8004218:	f7fc fd6c 	bl	8000cf4 <__aeabi_fmul>
 800421c:	4605      	mov	r5, r0
 800421e:	4639      	mov	r1, r7
 8004220:	4648      	mov	r0, r9
 8004222:	f7fc fd67 	bl	8000cf4 <__aeabi_fmul>
 8004226:	4601      	mov	r1, r0
 8004228:	4628      	mov	r0, r5
 800422a:	f7fc fc59 	bl	8000ae0 <__aeabi_fsub>
 800422e:	4601      	mov	r1, r0
 8004230:	f7fc fc58 	bl	8000ae4 <__addsf3>
 8004234:	f7fc f8f8 	bl	8000428 <__aeabi_f2d>
 8004238:	f001 fe72 	bl	8005f20 <asin>
 800423c:	2200      	movs	r2, #0
 800423e:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <MadgwickQuaternionUpdate+0xa64>)
 8004240:	f7fc f94a 	bl	80004d8 <__aeabi_dmul>
 8004244:	a31a      	add	r3, pc, #104	@ (adr r3, 80042b0 <MadgwickQuaternionUpdate+0xa50>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f7fc fa6f 	bl	800072c <__aeabi_ddiv>
 800424e:	f7fc fbf3 	bl	8000a38 <__aeabi_d2f>
 8004252:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004254:	6018      	str	r0, [r3, #0]
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	6867      	ldr	r7, [r4, #4]
 800425a:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800425e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 8004262:	4629      	mov	r1, r5
 8004264:	4628      	mov	r0, r5
 8004266:	f7fc fd45 	bl	8000cf4 <__aeabi_fmul>
 800426a:	4606      	mov	r6, r0
 800426c:	4639      	mov	r1, r7
 800426e:	4638      	mov	r0, r7
 8004270:	f7fc fd40 	bl	8000cf4 <__aeabi_fmul>
 8004274:	4601      	mov	r1, r0
 8004276:	4630      	mov	r0, r6
 8004278:	f7fc fc32 	bl	8000ae0 <__aeabi_fsub>
 800427c:	4680      	mov	r8, r0
 800427e:	4651      	mov	r1, sl
 8004280:	4650      	mov	r0, sl
 8004282:	f7fc fd37 	bl	8000cf4 <__aeabi_fmul>
 8004286:	4601      	mov	r1, r0
 8004288:	4640      	mov	r0, r8
 800428a:	f7fc fc29 	bl	8000ae0 <__aeabi_fsub>
 800428e:	4680      	mov	r8, r0
 8004290:	4659      	mov	r1, fp
 8004292:	4658      	mov	r0, fp
 8004294:	f7fc fd2e 	bl	8000cf4 <__aeabi_fmul>
 8004298:	4601      	mov	r1, r0
 800429a:	4640      	mov	r0, r8
 800429c:	f7fc fc22 	bl	8000ae4 <__addsf3>
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 80042a0:	f7fc f8c2 	bl	8000428 <__aeabi_f2d>
 80042a4:	4680      	mov	r8, r0
 80042a6:	4689      	mov	r9, r1
 80042a8:	4639      	mov	r1, r7
 80042aa:	e00d      	b.n	80042c8 <MadgwickQuaternionUpdate+0xa68>
 80042ac:	f3af 8000 	nop.w
 80042b0:	54442d18 	.word	0x54442d18
 80042b4:	400921fb 	.word	0x400921fb
 80042b8:	20000324 	.word	0x20000324
 80042bc:	20000320 	.word	0x20000320
 80042c0:	2000003c 	.word	0x2000003c
 80042c4:	40668000 	.word	0x40668000
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7fc fd13 	bl	8000cf4 <__aeabi_fmul>
 80042ce:	4607      	mov	r7, r0
 80042d0:	4659      	mov	r1, fp
 80042d2:	4650      	mov	r0, sl
 80042d4:	f7fc fd0e 	bl	8000cf4 <__aeabi_fmul>
 80042d8:	4601      	mov	r1, r0
 80042da:	4638      	mov	r0, r7
 80042dc:	f7fc fc02 	bl	8000ae4 <__addsf3>
 80042e0:	4601      	mov	r1, r0
 80042e2:	f7fc fbff 	bl	8000ae4 <__addsf3>
 80042e6:	f7fc f89f 	bl	8000428 <__aeabi_f2d>
 80042ea:	4642      	mov	r2, r8
 80042ec:	464b      	mov	r3, r9
 80042ee:	f001 fe3f 	bl	8005f70 <atan2>
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 80042f2:	2200      	movs	r2, #0
 80042f4:	4b2c      	ldr	r3, [pc, #176]	@ (80043a8 <MadgwickQuaternionUpdate+0xb48>)
 80042f6:	f7fc f8ef 	bl	80004d8 <__aeabi_dmul>
 80042fa:	a329      	add	r3, pc, #164	@ (adr r3, 80043a0 <MadgwickQuaternionUpdate+0xb40>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fc fa14 	bl	800072c <__aeabi_ddiv>
 8004304:	f7fc fb98 	bl	8000a38 <__aeabi_d2f>
 8004308:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800430a:	6058      	str	r0, [r3, #4]
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 800430c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8004310:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8004314:	f8d4 800c 	ldr.w	r8, [r4, #12]
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 8004318:	4649      	mov	r1, r9
 800431a:	4648      	mov	r0, r9
 800431c:	f7fc fcea 	bl	8000cf4 <__aeabi_fmul>
 8004320:	4631      	mov	r1, r6
 8004322:	f7fc fbdf 	bl	8000ae4 <__addsf3>
 8004326:	4604      	mov	r4, r0
 8004328:	4651      	mov	r1, sl
 800432a:	4650      	mov	r0, sl
 800432c:	f7fc fce2 	bl	8000cf4 <__aeabi_fmul>
 8004330:	4601      	mov	r1, r0
 8004332:	4620      	mov	r0, r4
 8004334:	f7fc fbd4 	bl	8000ae0 <__aeabi_fsub>
 8004338:	4604      	mov	r4, r0
 800433a:	4641      	mov	r1, r8
 800433c:	4640      	mov	r0, r8
 800433e:	f7fc fcd9 	bl	8000cf4 <__aeabi_fmul>
 8004342:	4601      	mov	r1, r0
 8004344:	4620      	mov	r0, r4
 8004346:	f7fc fbcb 	bl	8000ae0 <__aeabi_fsub>
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 800434a:	f7fc f86d 	bl	8000428 <__aeabi_f2d>
 800434e:	4606      	mov	r6, r0
 8004350:	460f      	mov	r7, r1
 8004352:	4651      	mov	r1, sl
 8004354:	4648      	mov	r0, r9
 8004356:	f7fc fccd 	bl	8000cf4 <__aeabi_fmul>
 800435a:	4604      	mov	r4, r0
 800435c:	4641      	mov	r1, r8
 800435e:	4628      	mov	r0, r5
 8004360:	f7fc fcc8 	bl	8000cf4 <__aeabi_fmul>
 8004364:	4601      	mov	r1, r0
 8004366:	4620      	mov	r0, r4
 8004368:	f7fc fbbc 	bl	8000ae4 <__addsf3>
 800436c:	4601      	mov	r1, r0
 800436e:	f7fc fbb9 	bl	8000ae4 <__addsf3>
 8004372:	f7fc f859 	bl	8000428 <__aeabi_f2d>
 8004376:	4632      	mov	r2, r6
 8004378:	463b      	mov	r3, r7
 800437a:	f001 fdf9 	bl	8005f70 <atan2>
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 800437e:	2200      	movs	r2, #0
 8004380:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <MadgwickQuaternionUpdate+0xb48>)
 8004382:	f7fc f8a9 	bl	80004d8 <__aeabi_dmul>
 8004386:	a306      	add	r3, pc, #24	@ (adr r3, 80043a0 <MadgwickQuaternionUpdate+0xb40>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fc f9ce 	bl	800072c <__aeabi_ddiv>
 8004390:	f7fc fb52 	bl	8000a38 <__aeabi_d2f>
 8004394:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004396:	6098      	str	r0, [r3, #8]
 8004398:	f7ff ba92 	b.w	80038c0 <MadgwickQuaternionUpdate+0x60>
 800439c:	f3af 8000 	nop.w
 80043a0:	54442d18 	.word	0x54442d18
 80043a4:	400921fb 	.word	0x400921fb
 80043a8:	40668000 	.word	0x40668000

080043ac <aflCall>:
    /*
     * In qemu, svc $0x3f is intercepted, without being executed
     * On real device, it is executed and may cause firmware crash
     * It can be skipped by set noHyperCall to 1
     */
    __asm__ __volatile__ ("svc $0x3f\n\t"
 80043ac:	df3f      	svc	63	@ 0x3f
 80043ae:	4770      	bx	lr

080043b0 <startForkserver>:
                          "bx %lr\n\t");
}

int startForkserver(int ticks) {
 80043b0:	b508      	push	{r3, lr}
    if(noHyperCall)
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <startForkserver+0x18>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b10b      	cbz	r3, 80043bc <startForkserver+0xc>
        return 0;
 80043b8:	2000      	movs	r0, #0
    return aflCall(1, ticks, 0);
}
 80043ba:	bd08      	pop	{r3, pc}
    return aflCall(1, ticks, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	4601      	mov	r1, r0
 80043c0:	2001      	movs	r0, #1
 80043c2:	f7ff fff3 	bl	80043ac <aflCall>
 80043c6:	e7f8      	b.n	80043ba <startForkserver+0xa>
 80043c8:	20000328 	.word	0x20000328

080043cc <CB_Write>:
 Example Call	:	CB_Write(&rxc, data)
 ***********************************/
int CB_Write(CircularBuffer *cb, uint8_t data)
{
	// Buffer overrun handling and return failure
	if ((cb->size >= CBUF_SIZE) && !CBUF_OVERWRITE) return 0;
 80043cc:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	@ 0x804

	// Increment current FIFO size
	cb->size++;
 80043d0:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	@ 0x804
 80043d4:	3301      	adds	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f8a0 3804 	strh.w	r3, [r0, #2052]	@ 0x804

	// Add data to FIFO
	cb->buffer[cb->tail] = data;
 80043dc:	f8b0 3802 	ldrh.w	r3, [r0, #2050]	@ 0x802
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	54c1      	strb	r1, [r0, r3]

	// Update tail
	cb->tail = (cb->tail+1) % CBUF_SIZE;
 80043e4:	f8b0 3802 	ldrh.w	r3, [r0, #2050]	@ 0x802
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	425a      	negs	r2, r3
 80043ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80043f6:	bf58      	it	pl
 80043f8:	4253      	negpl	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f8a0 3802 	strh.w	r3, [r0, #2050]	@ 0x802

	// Return success
	return 1;
}
 8004400:	2001      	movs	r0, #1
 8004402:	4770      	bx	lr

08004404 <CB_Init>:
 Example Call	:	CB_Init(&rxc)
 ***********************************/
void CB_Init(CircularBuffer *cb)
{
	// Reset FIFO parameters
	cb->head = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f8a0 3800 	strh.w	r3, [r0, #2048]	@ 0x800
	cb->tail = 0;
 800440a:	f8a0 3802 	strh.w	r3, [r0, #2050]	@ 0x802
	cb->size = 0;
 800440e:	f8a0 3804 	strh.w	r3, [r0, #2052]	@ 0x804

	// Clear buffer
	for (int i=0; i<CBUF_SIZE; i++)
		cb->buffer[i] = 0;
 8004412:	461a      	mov	r2, r3
 8004414:	54c2      	strb	r2, [r0, r3]
	for (int i=0; i<CBUF_SIZE; i++)
 8004416:	3301      	adds	r3, #1
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441c:	d1fa      	bne.n	8004414 <CB_Init+0x10>
}
 800441e:	4770      	bx	lr

08004420 <lowPassFilter>:
 Arguments		:	LPF struct, new sensor reading
 Return Value	:	Filtered value
 Example Call	:	lowPassFilter(&angle, 22)
 ***********************************/
float lowPassFilter(struct LPF *var, float current)
{
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	460d      	mov	r5, r1
	// Filter the new reading
	current = ((1 - var->beta) * current) + (var->beta * var->last);
 8004426:	6846      	ldr	r6, [r0, #4]
 8004428:	4631      	mov	r1, r6
 800442a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800442e:	f7fc fb57 	bl	8000ae0 <__aeabi_fsub>
 8004432:	4629      	mov	r1, r5
 8004434:	f7fc fc5e 	bl	8000cf4 <__aeabi_fmul>
 8004438:	4605      	mov	r5, r0
 800443a:	6821      	ldr	r1, [r4, #0]
 800443c:	4630      	mov	r0, r6
 800443e:	f7fc fc59 	bl	8000cf4 <__aeabi_fmul>
 8004442:	4629      	mov	r1, r5
 8004444:	f7fc fb4e 	bl	8000ae4 <__addsf3>

	// Store current reading for next iteration
	var->last = current;
 8004448:	6020      	str	r0, [r4, #0]

	// Return filtered value
	return current;
}
 800444a:	bd70      	pop	{r4, r5, r6, pc}

0800444c <toggleLED>:
 Arguments		:	LED logic values
 Return Value	:	None
 Example Call	:	toggleLED(1, 0 1)
 ***********************************/
void toggleLED(int led_white, int led_red, int led_blue)
{
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	460e      	mov	r6, r1
 8004450:	4615      	mov	r5, r2
	HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, !led_white);
 8004452:	4c0d      	ldr	r4, [pc, #52]	@ (8004488 <toggleLED+0x3c>)
 8004454:	fab0 f280 	clz	r2, r0
 8004458:	0952      	lsrs	r2, r2, #5
 800445a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800445e:	4620      	mov	r0, r4
 8004460:	f7fd f836 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, !led_red);
 8004464:	fab6 f286 	clz	r2, r6
 8004468:	0952      	lsrs	r2, r2, #5
 800446a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800446e:	4620      	mov	r0, r4
 8004470:	f7fd f82e 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, !led_blue);
 8004474:	fab5 f285 	clz	r2, r5
 8004478:	0952      	lsrs	r2, r2, #5
 800447a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800447e:	4620      	mov	r0, r4
 8004480:	f7fd f826 	bl	80014d0 <HAL_GPIO_WritePin>
}
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	bf00      	nop
 8004488:	40011000 	.word	0x40011000

0800448c <LED_StartupSequence>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	LED_StartupSequence()
 ***********************************/
void LED_StartupSequence(void)
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	2703      	movs	r7, #3
	for (int i=0; i<3; i++)
	{
		toggleLED(1, 0, 0);
 8004490:	2600      	movs	r6, #0
 8004492:	2501      	movs	r5, #1
		delay_ms(100);
 8004494:	2464      	movs	r4, #100	@ 0x64
		toggleLED(1, 0, 0);
 8004496:	4632      	mov	r2, r6
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	f7ff ffd6 	bl	800444c <toggleLED>
		delay_ms(100);
 80044a0:	4620      	mov	r0, r4
 80044a2:	f001 f871 	bl	8005588 <delay_ms>

		toggleLED(0, 1, 0);
 80044a6:	4632      	mov	r2, r6
 80044a8:	4629      	mov	r1, r5
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7ff ffce 	bl	800444c <toggleLED>
		delay_ms(100);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f001 f869 	bl	8005588 <delay_ms>

		toggleLED(0, 0, 1);
 80044b6:	462a      	mov	r2, r5
 80044b8:	4631      	mov	r1, r6
 80044ba:	4630      	mov	r0, r6
 80044bc:	f7ff ffc6 	bl	800444c <toggleLED>
		delay_ms(100);
 80044c0:	4620      	mov	r0, r4
 80044c2:	f001 f861 	bl	8005588 <delay_ms>
	for (int i=0; i<3; i++)
 80044c6:	3f01      	subs	r7, #1
 80044c8:	d1e5      	bne.n	8004496 <LED_StartupSequence+0xa>
	}

	toggleLED(1, 1, 1);
 80044ca:	2201      	movs	r2, #1
 80044cc:	4611      	mov	r1, r2
 80044ce:	4610      	mov	r0, r2
 80044d0:	f7ff ffbc 	bl	800444c <toggleLED>
}
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d8 <Motor1_SetPWM>:
 Example Call	:	Motor1_SetPWM(500)
 ***********************************/
void Motor1_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR1_SCALE);
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 80044d8:	4b01      	ldr	r3, [pc, #4]	@ (80044e0 <Motor1_SetPWM+0x8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6418      	str	r0, [r3, #64]	@ 0x40
}
 80044de:	4770      	bx	lr
 80044e0:	20000bf8 	.word	0x20000bf8

080044e4 <Motor2_SetPWM>:
 Example Call	:	Motor2_SetPWM(500)
 ***********************************/
void Motor2_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR2_SCALE);
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm); // Motor 2
 80044e4:	4b01      	ldr	r3, [pc, #4]	@ (80044ec <Motor2_SetPWM+0x8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	63d8      	str	r0, [r3, #60]	@ 0x3c
}
 80044ea:	4770      	bx	lr
 80044ec:	20000bf8 	.word	0x20000bf8

080044f0 <Motor3_SetPWM>:
 Example Call	:	Motor3_SetPWM(500)
 ***********************************/
void Motor3_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR3_SCALE);
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm); // Motor 3
 80044f0:	4b01      	ldr	r3, [pc, #4]	@ (80044f8 <Motor3_SetPWM+0x8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6398      	str	r0, [r3, #56]	@ 0x38
}
 80044f6:	4770      	bx	lr
 80044f8:	20000c70 	.word	0x20000c70

080044fc <Motor4_SetPWM>:
 Example Call	:	Motor4_SetPWM(500)
 ***********************************/
void Motor4_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR4_SCALE);
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm); // Motor 4
 80044fc:	4b01      	ldr	r3, [pc, #4]	@ (8004504 <Motor4_SetPWM+0x8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	63d8      	str	r0, [r3, #60]	@ 0x3c
}
 8004502:	4770      	bx	lr
 8004504:	20000c34 	.word	0x20000c34

08004508 <PWM_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	PWM_Init()
 ***********************************/
void PWM_Init(void)
{
 8004508:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800450a:	2104      	movs	r1, #4
 800450c:	4808      	ldr	r0, [pc, #32]	@ (8004530 <PWM_Init+0x28>)
 800450e:	f7fe f9ad 	bl	800286c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004512:	2108      	movs	r1, #8
 8004514:	4807      	ldr	r0, [pc, #28]	@ (8004534 <PWM_Init+0x2c>)
 8004516:	f7fe f9a9 	bl	800286c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800451a:	4c07      	ldr	r4, [pc, #28]	@ (8004538 <PWM_Init+0x30>)
 800451c:	2108      	movs	r1, #8
 800451e:	4620      	mov	r0, r4
 8004520:	f7fe f9a4 	bl	800286c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004524:	210c      	movs	r1, #12
 8004526:	4620      	mov	r0, r4
 8004528:	f7fe f9a0 	bl	800286c <HAL_TIM_PWM_Start>

#ifdef HEXCOPTER
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
#endif
}
 800452c:	bd10      	pop	{r4, pc}
 800452e:	bf00      	nop
 8004530:	20000c70 	.word	0x20000c70
 8004534:	20000c34 	.word	0x20000c34
 8004538:	20000bf8 	.word	0x20000bf8

0800453c <Devices_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	Devices_Init()
 ***********************************/
void Devices_Init(void)
{
 800453c:	b508      	push	{r3, lr}
	Peripherals_Init();
 800453e:	f000 faab 	bl	8004a98 <Peripherals_Init>
	PWM_Init();
 8004542:	f7ff ffe1 	bl	8004508 <PWM_Init>
	LED_StartupSequence();
 8004546:	f7ff ffa1 	bl	800448c <LED_StartupSequence>
}
 800454a:	bd08      	pop	{r3, pc}

0800454c <I2C_WriteByte>:
 Arguments		:	I2C Device Address, Register Address, Register Value, delay mode
 Return Value	:	None
 Example Call	:	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + MS5611_OSR, 1, 0)
 ***********************************/
void I2C_WriteByte(uint16_t device_add, uint16_t register_add, uint8_t register_val, uint8_t delay_mode)
{
 800454c:	b510      	push	{r4, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	461c      	mov	r4, r3
	uint8_t byte[] = {register_val}, ret;
 8004552:	f88d 2014 	strb.w	r2, [sp, #20]
	ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 8004556:	23c8      	movs	r3, #200	@ 0xc8
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	2301      	movs	r3, #1
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	aa05      	add	r2, sp, #20
 8004560:	9200      	str	r2, [sp, #0]
 8004562:	460a      	mov	r2, r1
 8004564:	4601      	mov	r1, r0
 8004566:	4808      	ldr	r0, [pc, #32]	@ (8004588 <I2C_WriteByte+0x3c>)
 8004568:	f7fd fa16 	bl	8001998 <HAL_I2C_Mem_Write>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) byte, 1, 200);
	if (ret != HAL_OK) _Error_Handler(__FILE__, __LINE__);
 800456c:	b910      	cbnz	r0, 8004574 <I2C_WriteByte+0x28>

	// Delay for device setup
	if (delay_mode) delay_ms(50);
 800456e:	b934      	cbnz	r4, 800457e <I2C_WriteByte+0x32>
}
 8004570:	b006      	add	sp, #24
 8004572:	bd10      	pop	{r4, pc}
	if (ret != HAL_OK) _Error_Handler(__FILE__, __LINE__);
 8004574:	211b      	movs	r1, #27
 8004576:	4805      	ldr	r0, [pc, #20]	@ (800458c <I2C_WriteByte+0x40>)
 8004578:	f000 fa0c 	bl	8004994 <_Error_Handler>
 800457c:	e7f7      	b.n	800456e <I2C_WriteByte+0x22>
	if (delay_mode) delay_ms(50);
 800457e:	2032      	movs	r0, #50	@ 0x32
 8004580:	f001 f802 	bl	8005588 <delay_ms>
}
 8004584:	e7f4      	b.n	8004570 <I2C_WriteByte+0x24>
 8004586:	bf00      	nop
 8004588:	20000ce8 	.word	0x20000ce8
 800458c:	08007730 	.word	0x08007730

08004590 <I2C_ReadByte>:
 Arguments		:	I2C Device Address, Register Address, File name, Line number
 Return Value	:	Register value
 Example Call	:	I2C_ReadByte(MAG_ADDRESS, MAG_HXL, raw_data, __FILE__, __LINE__)
 ***********************************/
uint8_t I2C_ReadByte(uint16_t device_add, uint16_t register_add, char* file, int line)
{
 8004590:	b530      	push	{r4, r5, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	4614      	mov	r4, r2
 8004596:	461d      	mov	r5, r3
	uint8_t byte[] = {0x00}, ret;
 8004598:	2300      	movs	r3, #0
 800459a:	f88d 3014 	strb.w	r3, [sp, #20]
	ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 800459e:	23c8      	movs	r3, #200	@ 0xc8
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	2301      	movs	r3, #1
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	aa05      	add	r2, sp, #20
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	460a      	mov	r2, r1
 80045ac:	4601      	mov	r1, r0
 80045ae:	4806      	ldr	r0, [pc, #24]	@ (80045c8 <I2C_ReadByte+0x38>)
 80045b0:	f7fd fa97 	bl	8001ae2 <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, byte, 1, 200);
	if (ret != HAL_OK) _Error_Handler(file, line);
 80045b4:	b918      	cbnz	r0, 80045be <I2C_ReadByte+0x2e>
	return byte[0];
}
 80045b6:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80045ba:	b007      	add	sp, #28
 80045bc:	bd30      	pop	{r4, r5, pc}
	if (ret != HAL_OK) _Error_Handler(file, line);
 80045be:	4629      	mov	r1, r5
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 f9e7 	bl	8004994 <_Error_Handler>
 80045c6:	e7f6      	b.n	80045b6 <I2C_ReadByte+0x26>
 80045c8:	20000ce8 	.word	0x20000ce8

080045cc <I2C_ReadBytes>:
 Arguments		:	I2C Device Address, Register Address, Buffer, Size, File name, Line number
 Return Value	:	Register value
 Example Call	:	I2C_ReadBytes(MS5611_ADDRESS, MS5611_CMD_ADC_READ, rxbuf, 3, __FILE__, __LINE__)
 ***********************************/
void I2C_ReadBytes(uint16_t device_add, uint16_t register_add, uint8_t* bytes, uint16_t size, char* file, int line)
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	b084      	sub	sp, #16
	uint8_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 80045d0:	24c8      	movs	r4, #200	@ 0xc8
 80045d2:	9402      	str	r4, [sp, #8]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	9200      	str	r2, [sp, #0]
 80045d8:	2301      	movs	r3, #1
 80045da:	460a      	mov	r2, r1
 80045dc:	4601      	mov	r1, r0
 80045de:	4805      	ldr	r0, [pc, #20]	@ (80045f4 <I2C_ReadBytes+0x28>)
 80045e0:	f7fd fa7f 	bl	8001ae2 <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, bytes, size, 200);
	if (ret != HAL_OK) _Error_Handler(file, line);
 80045e4:	b908      	cbnz	r0, 80045ea <I2C_ReadBytes+0x1e>
}
 80045e6:	b004      	add	sp, #16
 80045e8:	bd10      	pop	{r4, pc}
	if (ret != HAL_OK) _Error_Handler(file, line);
 80045ea:	9907      	ldr	r1, [sp, #28]
 80045ec:	9806      	ldr	r0, [sp, #24]
 80045ee:	f000 f9d1 	bl	8004994 <_Error_Handler>
}
 80045f2:	e7f8      	b.n	80045e6 <I2C_ReadBytes+0x1a>
 80045f4:	20000ce8 	.word	0x20000ce8

080045f8 <I2C_ReadByteArray>:
 Example Call	:	I2C_ReadByteArray(MAG_ADDRESS, MAG_HXL, raw_data, 7, __FILE__, __LINE__)
 ***********************************/
void I2C_ReadByteArray(uint16_t device_add, uint16_t register_add, uint8_t* byte_array, uint16_t size, char* file, int line)
{
	int i = 0;
	while (i<size)
 80045f8:	b1c3      	cbz	r3, 800462c <I2C_ReadByteArray+0x34>
{
 80045fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fe:	4606      	mov	r6, r0
 8004600:	461f      	mov	r7, r3
 8004602:	4417      	add	r7, r2
	while (i<size)
 8004604:	4614      	mov	r4, r2
 8004606:	1a89      	subs	r1, r1, r2
 8004608:	b28d      	uxth	r5, r1
	{
		byte_array[i++] = I2C_ReadByte(device_add, register_add++, __FILE__, __LINE__);
 800460a:	f8df 9024 	ldr.w	r9, [pc, #36]	@ 8004630 <I2C_ReadByteArray+0x38>
 800460e:	f04f 084c 	mov.w	r8, #76	@ 0x4c
 8004612:	1929      	adds	r1, r5, r4
 8004614:	4643      	mov	r3, r8
 8004616:	464a      	mov	r2, r9
 8004618:	b289      	uxth	r1, r1
 800461a:	4630      	mov	r0, r6
 800461c:	f7ff ffb8 	bl	8004590 <I2C_ReadByte>
 8004620:	f804 0b01 	strb.w	r0, [r4], #1
	while (i<size)
 8004624:	42bc      	cmp	r4, r7
 8004626:	d1f4      	bne.n	8004612 <I2C_ReadByteArray+0x1a>
	}
}
 8004628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	08007730 	.word	0x08007730

08004634 <taskScheduler>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	taskScheduler()
 ***********************************/
void taskScheduler(void)
{
 8004634:	b508      	push	{r3, lr}
	// Compute angles
	if ((millis() - last_tick1) > 1) //time elapsed since last execution (last_tick1)
 8004636:	f000 ff9f 	bl	8005578 <millis>
 800463a:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <taskScheduler+0x74>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1ac0      	subs	r0, r0, r3
 8004640:	2801      	cmp	r0, #1
 8004642:	d810      	bhi.n	8004666 <taskScheduler+0x32>
		//AK8963_ReadData();	// Un-comment for mag calibration
		AHRS_ComputeAngles();
	}

	// Compute PID
	if ((millis() - last_tick3) >= 3)
 8004644:	f000 ff98 	bl	8005578 <millis>
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <taskScheduler+0x78>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	2802      	cmp	r0, #2
 8004650:	d810      	bhi.n	8004674 <taskScheduler+0x40>
		/* Control */
		PID_Update();
	}

	// Telemetry
	if ((millis() - last_tick2) > 3)
 8004652:	f000 ff91 	bl	8005578 <millis>
 8004656:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <taskScheduler+0x7c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1ac0      	subs	r0, r0, r3
 800465c:	2803      	cmp	r0, #3
 800465e:	d810      	bhi.n	8004682 <taskScheduler+0x4e>
	}

	/** Non-blocking tasks */ //These tasks are executed regardless of the time elapsed since the last execution.

	// Compute altitude
	MS5611_Update(); 
 8004660:	f7fe ff9a 	bl	8003598 <MS5611_Update>

	// Process MSP RX request/command frames (NOTE: READ BUG LOG IN DOCUMENTATION REPORT)
#ifndef MULTIWII_CONF
	MSP_Update();
#endif
}
 8004664:	bd08      	pop	{r3, pc}
		last_tick1 = millis();
 8004666:	f000 ff87 	bl	8005578 <millis>
 800466a:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <taskScheduler+0x74>)
 800466c:	6018      	str	r0, [r3, #0]
		AHRS_ComputeAngles();
 800466e:	f7fe fee1 	bl	8003434 <AHRS_ComputeAngles>
 8004672:	e7e7      	b.n	8004644 <taskScheduler+0x10>
		last_tick3 = millis();
 8004674:	f000 ff80 	bl	8005578 <millis>
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <taskScheduler+0x78>)
 800467a:	6018      	str	r0, [r3, #0]
		PID_Update();
 800467c:	f000 fce2 	bl	8005044 <PID_Update>
 8004680:	e7e7      	b.n	8004652 <taskScheduler+0x1e>
		last_tick2 = millis();
 8004682:	f000 ff79 	bl	8005578 <millis>
 8004686:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <taskScheduler+0x7c>)
 8004688:	6018      	str	r0, [r3, #0]
		MSP_SendIdent();
 800468a:	f000 f8e7 	bl	800485c <MSP_SendIdent>
		MSP_SendStatus();
 800468e:	f000 f905 	bl	800489c <MSP_SendStatus>
		MSP_SendMotor();
 8004692:	f000 f933 	bl	80048fc <MSP_SendMotor>
		MSP_SendAttitude();
 8004696:	f000 f943 	bl	8004920 <MSP_SendAttitude>
		MSP_SendAltitude();
 800469a:	f000 f953 	bl	8004944 <MSP_SendAltitude>
		MSP_SendRawIMU();
 800469e:	f000 f919 	bl	80048d4 <MSP_SendRawIMU>
		MSP_SendPID();
 80046a2:	f000 f961 	bl	8004968 <MSP_SendPID>
 80046a6:	e7db      	b.n	8004660 <taskScheduler+0x2c>
 80046a8:	20000b44 	.word	0x20000b44
 80046ac:	20000b3c 	.word	0x20000b3c
 80046b0:	20000b40 	.word	0x20000b40

080046b4 <setup>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	setup()
 ***********************************/
void setup(void)
{
 80046b4:	b508      	push	{r3, lr}
	Devices_Init();
 80046b6:	f7ff ff41 	bl	800453c <Devices_Init>
	serialBegin();
 80046ba:	f000 fdcf 	bl	800525c <serialBegin>
	IMU_Init();
 80046be:	f7fe fe73 	bl	80033a8 <IMU_Init>
	MS5611_Init();
 80046c2:	f7ff f881 	bl	80037c8 <MS5611_Init>
	PID_Init();
 80046c6:	f000 fc27 	bl	8004f18 <PID_Init>
}
 80046ca:	bd08      	pop	{r3, pc}

080046cc <main>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	Called automatically by the processor
 ***********************************/
int main(void)
{
 80046cc:	b508      	push	{r3, lr}

	
    startForkserver(0);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff fe6e 	bl	80043b0 <startForkserver>


	setup();
 80046d4:	f7ff ffee 	bl	80046b4 <setup>
	while (1)
	{
		HAL_IncTick();
 80046d8:	f7fc fd3e 	bl	8001158 <HAL_IncTick>
		taskScheduler();
 80046dc:	f7ff ffaa 	bl	8004634 <taskScheduler>
	while (1)
 80046e0:	e7fa      	b.n	80046d8 <main+0xc>

080046e2 <Motor_StopAll>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	Motor_StopAll()
 ***********************************/
void Motor_StopAll(void)
{
 80046e2:	b508      	push	{r3, lr}
	Motor1_SetPWM(0); // Back Right
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7ff fef7 	bl	80044d8 <Motor1_SetPWM>
	Motor2_SetPWM(0); // Front Right
 80046ea:	2000      	movs	r0, #0
 80046ec:	f7ff fefa 	bl	80044e4 <Motor2_SetPWM>
	Motor3_SetPWM(0); // Back Left
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7ff fefd 	bl	80044f0 <Motor3_SetPWM>
	Motor4_SetPWM(0); // Front Left
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7ff ff00 	bl	80044fc <Motor4_SetPWM>
}
 80046fc:	bd08      	pop	{r3, pc}
	...

08004700 <Motor_SetSpeed>:
 Arguments		:	PWM motor values
 Return Value	:	None
 Example Call	:	Motor_SetSpeed(0, 200, 500, 300)
 ***********************************/
void Motor_SetSpeed(int m1, int m2, int m3, int m4)
{
 8004700:	b510      	push	{r4, lr}
	motor_pwm[0] = constrain(m1, 0, 1000);
 8004702:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004706:	bfa8      	it	ge
 8004708:	f44f 707a 	movge.w	r0, #1000	@ 0x3e8
 800470c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004710:	4c1b      	ldr	r4, [pc, #108]	@ (8004780 <Motor_SetSpeed+0x80>)
 8004712:	6020      	str	r0, [r4, #0]
	motor_pwm[1] = constrain(m2, 0, 1000);
 8004714:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8004718:	bfa8      	it	ge
 800471a:	f44f 717a 	movge.w	r1, #1000	@ 0x3e8
 800471e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004722:	6061      	str	r1, [r4, #4]
	motor_pwm[2] = constrain(m3, 0, 1000);
 8004724:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004728:	bfa8      	it	ge
 800472a:	f44f 727a 	movge.w	r2, #1000	@ 0x3e8
 800472e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004732:	60a2      	str	r2, [r4, #8]
	motor_pwm[3] = constrain(m4, 0, 1000);
 8004734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004738:	bfa8      	it	ge
 800473a:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 800473e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004742:	60e3      	str	r3, [r4, #12]
	Motor1_SetPWM(motor_pwm[0]); // Back Right
 8004744:	f7ff fec8 	bl	80044d8 <Motor1_SetPWM>
	Motor2_SetPWM(motor_pwm[1]); // Front Right
 8004748:	6860      	ldr	r0, [r4, #4]
 800474a:	f7ff fecb 	bl	80044e4 <Motor2_SetPWM>
	Motor3_SetPWM(motor_pwm[2]); // Back Left
 800474e:	68a0      	ldr	r0, [r4, #8]
 8004750:	f7ff fece 	bl	80044f0 <Motor3_SetPWM>
	Motor4_SetPWM(motor_pwm[3]); // Front Left
 8004754:	68e0      	ldr	r0, [r4, #12]
 8004756:	f7ff fed1 	bl	80044fc <Motor4_SetPWM>
	msp_txf_motor.motor[0] = motor_pwm[0] + 1000;
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <Motor_SetSpeed+0x84>)
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8004762:	801a      	strh	r2, [r3, #0]
	msp_txf_motor.motor[1] = motor_pwm[1] + 1000;
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 800476a:	805a      	strh	r2, [r3, #2]
	msp_txf_motor.motor[2] = motor_pwm[2] + 1000;
 800476c:	68a2      	ldr	r2, [r4, #8]
 800476e:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8004772:	809a      	strh	r2, [r3, #4]
	msp_txf_motor.motor[3] = motor_pwm[3] + 1000;
 8004774:	68e2      	ldr	r2, [r4, #12]
 8004776:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 800477a:	80da      	strh	r2, [r3, #6]

	// Write PWM values to the motors
	Motor_UpdatePWM();
}
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	20000b48 	.word	0x20000b48
 8004784:	20000b88 	.word	0x20000b88

08004788 <Motor_DistributeSpeed>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	Motor_DistributeSpeed(1000, 1200, 1300, 1400)
 ***********************************/
void Motor_DistributeSpeed(float throttle, float pitch, float roll, float yaw)
{
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	4606      	mov	r6, r0
 800478e:	4688      	mov	r8, r1
 8004790:	4615      	mov	r5, r2
 8004792:	461c      	mov	r4, r3
	float M1, M2, M3, M4;

	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 8004794:	f7fc f9a4 	bl	8000ae0 <__aeabi_fsub>
 8004798:	4607      	mov	r7, r0
	M2 = throttle - pitch + roll - yaw - 1000; // Front Right
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 800479a:	4641      	mov	r1, r8
 800479c:	4630      	mov	r0, r6
 800479e:	f7fc f9a1 	bl	8000ae4 <__addsf3>
 80047a2:	4606      	mov	r6, r0
	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 80047a4:	4629      	mov	r1, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7fc f99a 	bl	8000ae0 <__aeabi_fsub>
 80047ac:	4621      	mov	r1, r4
 80047ae:	f7fc f999 	bl	8000ae4 <__addsf3>
 80047b2:	4919      	ldr	r1, [pc, #100]	@ (8004818 <Motor_DistributeSpeed+0x90>)
 80047b4:	f7fc f994 	bl	8000ae0 <__aeabi_fsub>
	M1 = throttle + pitch + roll + yaw - 1000; // Back Right

	// Update the PWM value array, but don't write the values to motors
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80047b8:	f7fc fc62 	bl	8001080 <__aeabi_f2iz>
 80047bc:	4681      	mov	r9, r0
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80047be:	4629      	mov	r1, r5
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7fc f98d 	bl	8000ae0 <__aeabi_fsub>
 80047c6:	4621      	mov	r1, r4
 80047c8:	f7fc f98a 	bl	8000ae0 <__aeabi_fsub>
 80047cc:	4912      	ldr	r1, [pc, #72]	@ (8004818 <Motor_DistributeSpeed+0x90>)
 80047ce:	f7fc f987 	bl	8000ae0 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80047d2:	f7fc fc55 	bl	8001080 <__aeabi_f2iz>
 80047d6:	4680      	mov	r8, r0
	M2 = throttle - pitch + roll - yaw - 1000; // Front Right
 80047d8:	4629      	mov	r1, r5
 80047da:	4638      	mov	r0, r7
 80047dc:	f7fc f982 	bl	8000ae4 <__addsf3>
 80047e0:	4621      	mov	r1, r4
 80047e2:	f7fc f97d 	bl	8000ae0 <__aeabi_fsub>
 80047e6:	490c      	ldr	r1, [pc, #48]	@ (8004818 <Motor_DistributeSpeed+0x90>)
 80047e8:	f7fc f97a 	bl	8000ae0 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80047ec:	f7fc fc48 	bl	8001080 <__aeabi_f2iz>
 80047f0:	4607      	mov	r7, r0
	M1 = throttle + pitch + roll + yaw - 1000; // Back Right
 80047f2:	4629      	mov	r1, r5
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7fc f975 	bl	8000ae4 <__addsf3>
 80047fa:	4621      	mov	r1, r4
 80047fc:	f7fc f972 	bl	8000ae4 <__addsf3>
 8004800:	4905      	ldr	r1, [pc, #20]	@ (8004818 <Motor_DistributeSpeed+0x90>)
 8004802:	f7fc f96d 	bl	8000ae0 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 8004806:	f7fc fc3b 	bl	8001080 <__aeabi_f2iz>
 800480a:	464b      	mov	r3, r9
 800480c:	4642      	mov	r2, r8
 800480e:	4639      	mov	r1, r7
 8004810:	f7ff ff76 	bl	8004700 <Motor_SetSpeed>
}
 8004814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004818:	447a0000 	.word	0x447a0000

0800481c <MSP_SendFrame>:
 Arguments		:	MSP message ID, byte array, array length
 Return Value	:	None
 Example Call	:	MSP_SendFrame(MSP_PIDNAMES, buff, data_length)
 ***********************************/
static void MSP_SendFrame(uint8_t code, uint8_t *data, uint16_t data_length)
{
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	4604      	mov	r4, r0
 8004820:	460e      	mov	r6, r1
 8004822:	4617      	mov	r7, r2
	uint8_t checksum = 0;

	// Send Header
	serialPrint("$M>");
 8004824:	480c      	ldr	r0, [pc, #48]	@ (8004858 <MSP_SendFrame+0x3c>)
 8004826:	f000 fd27 	bl	8005278 <serialPrint>

	// Send data length
	serialWrite(data_length);
 800482a:	b2fd      	uxtb	r5, r7
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fce5 	bl	80051fc <serialWrite>

	// Send MSP message ID
	serialWrite(code);
 8004832:	4620      	mov	r0, r4
 8004834:	f000 fce2 	bl	80051fc <serialWrite>

	// Update checksum
	checksum = code ^ data_length;
 8004838:	4065      	eors	r5, r4

	// Send byte array and update checksum
	for (int i=0; i<data_length; i++)
 800483a:	b14f      	cbz	r7, 8004850 <MSP_SendFrame+0x34>
 800483c:	4634      	mov	r4, r6
 800483e:	443e      	add	r6, r7
	{
		serialWrite((char) data[i]);
 8004840:	7820      	ldrb	r0, [r4, #0]
 8004842:	f000 fcdb 	bl	80051fc <serialWrite>
		checksum ^= data[i];
 8004846:	f814 3b01 	ldrb.w	r3, [r4], #1
 800484a:	405d      	eors	r5, r3
	for (int i=0; i<data_length; i++)
 800484c:	42b4      	cmp	r4, r6
 800484e:	d1f7      	bne.n	8004840 <MSP_SendFrame+0x24>
	}

	// Send checksum
	serialWrite(checksum);
 8004850:	4628      	mov	r0, r5
 8004852:	f000 fcd3 	bl	80051fc <serialWrite>
}
 8004856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004858:	08007740 	.word	0x08007740

0800485c <MSP_SendIdent>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendIdent()
 ***********************************/
void MSP_SendIdent(void)
{
 800485c:	b500      	push	{lr}
 800485e:	b083      	sub	sp, #12
	msp_txf_ident.version = 233;
 8004860:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <MSP_SendIdent+0x3c>)
 8004862:	22e9      	movs	r2, #233	@ 0xe9
 8004864:	701a      	strb	r2, [r3, #0]
	msp_txf_ident.multitype = 3;
 8004866:	2203      	movs	r2, #3
 8004868:	705a      	strb	r2, [r3, #1]
	msp_txf_ident.msp_version = 0;
 800486a:	2200      	movs	r2, #0
 800486c:	709a      	strb	r2, [r3, #2]
	msp_txf_ident.capability = 4;
 800486e:	2104      	movs	r1, #4
 8004870:	70d9      	strb	r1, [r3, #3]
 8004872:	711a      	strb	r2, [r3, #4]
 8004874:	715a      	strb	r2, [r3, #5]
 8004876:	719a      	strb	r2, [r3, #6]

	uint16_t data_length = sizeof(msp_ident);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_ident, data_length);				// Convert struct elements to bytes
 8004878:	e893 0003 	ldmia.w	r3, {r0, r1}
 800487c:	9000      	str	r0, [sp, #0]
 800487e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8004882:	0c09      	lsrs	r1, r1, #16
 8004884:	f88d 1006 	strb.w	r1, [sp, #6]
	MSP_SendFrame(MSP_IDENT, buff, data_length);			// Pack into MSP frame and transmit
 8004888:	2207      	movs	r2, #7
 800488a:	4669      	mov	r1, sp
 800488c:	2064      	movs	r0, #100	@ 0x64
 800488e:	f7ff ffc5 	bl	800481c <MSP_SendFrame>
}
 8004892:	b003      	add	sp, #12
 8004894:	f85d fb04 	ldr.w	pc, [sp], #4
 8004898:	20000bb0 	.word	0x20000bb0

0800489c <MSP_SendStatus>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendStatus()
 ***********************************/
void MSP_SendStatus(void)
{
 800489c:	b500      	push	{lr}
 800489e:	b085      	sub	sp, #20
	msp_txf_status.sensor = 7;
 80048a0:	4a0b      	ldr	r2, [pc, #44]	@ (80048d0 <MSP_SendStatus+0x34>)
 80048a2:	2307      	movs	r3, #7
 80048a4:	8093      	strh	r3, [r2, #4]
	msp_txf_status.flag = 42;
 80048a6:	2300      	movs	r3, #0
 80048a8:	212a      	movs	r1, #42	@ 0x2a
 80048aa:	80d1      	strh	r1, [r2, #6]
 80048ac:	8113      	strh	r3, [r2, #8]
	msp_txf_status.current_set = 0;
 80048ae:	7293      	strb	r3, [r2, #10]

	uint16_t data_length = sizeof(msp_status);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_status, data_length);				// Convert struct elements to bytes
 80048b0:	ab01      	add	r3, sp, #4
 80048b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80048b4:	c303      	stmia	r3!, {r0, r1}
 80048b6:	f823 2b02 	strh.w	r2, [r3], #2
 80048ba:	0c12      	lsrs	r2, r2, #16
 80048bc:	701a      	strb	r2, [r3, #0]
	MSP_SendFrame(MSP_STATUS, buff, data_length);			// Pack into MSP frame and transmit
 80048be:	220b      	movs	r2, #11
 80048c0:	a901      	add	r1, sp, #4
 80048c2:	2065      	movs	r0, #101	@ 0x65
 80048c4:	f7ff ffaa 	bl	800481c <MSP_SendFrame>
}
 80048c8:	b005      	add	sp, #20
 80048ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ce:	bf00      	nop
 80048d0:	20000ba4 	.word	0x20000ba4

080048d4 <MSP_SendRawIMU>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendRawIMU()
 ***********************************/
void MSP_SendRawIMU(void)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	b086      	sub	sp, #24
	uint16_t data_length = sizeof(msp_raw_imu);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_raw_imu, data_length);			// Convert struct elements to bytes
 80048d8:	f10d 0c04 	add.w	ip, sp, #4
 80048dc:	4c06      	ldr	r4, [pc, #24]	@ (80048f8 <MSP_SendRawIMU+0x24>)
 80048de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	f8ac 3000 	strh.w	r3, [ip]
	MSP_SendFrame(MSP_RAW_IMU, buff, data_length);			// Pack into MSP frame and transmit
 80048ea:	2212      	movs	r2, #18
 80048ec:	a901      	add	r1, sp, #4
 80048ee:	2066      	movs	r0, #102	@ 0x66
 80048f0:	f7ff ff94 	bl	800481c <MSP_SendFrame>
}
 80048f4:	b006      	add	sp, #24
 80048f6:	bd10      	pop	{r4, pc}
 80048f8:	20000b90 	.word	0x20000b90

080048fc <MSP_SendMotor>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendMotor()
 ***********************************/
void MSP_SendMotor(void)
{
 80048fc:	b500      	push	{lr}
 80048fe:	b083      	sub	sp, #12
	uint16_t data_length = sizeof(msp_motor);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_motor, data_length);				// Convert struct elements to bytes
 8004900:	4a06      	ldr	r2, [pc, #24]	@ (800491c <MSP_SendMotor+0x20>)
 8004902:	466b      	mov	r3, sp
 8004904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004908:	e883 0003 	stmia.w	r3, {r0, r1}
	MSP_SendFrame(MSP_MOTOR, buff, data_length);			// Pack into MSP frame and transmit
 800490c:	2208      	movs	r2, #8
 800490e:	4619      	mov	r1, r3
 8004910:	2068      	movs	r0, #104	@ 0x68
 8004912:	f7ff ff83 	bl	800481c <MSP_SendFrame>
}
 8004916:	b003      	add	sp, #12
 8004918:	f85d fb04 	ldr.w	pc, [sp], #4
 800491c:	20000b88 	.word	0x20000b88

08004920 <MSP_SendAttitude>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendAttitude()
 ***********************************/
void MSP_SendAttitude(void)
{
 8004920:	b500      	push	{lr}
 8004922:	b083      	sub	sp, #12
	uint16_t data_length = sizeof(msp_attitude);			// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_attitude, data_length);			// Convert struct elements to bytes
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <MSP_SendAttitude+0x20>)
 8004926:	e893 0003 	ldmia.w	r3, {r0, r1}
 800492a:	9000      	str	r0, [sp, #0]
 800492c:	f8ad 1004 	strh.w	r1, [sp, #4]
	MSP_SendFrame(MSP_ATTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004930:	2206      	movs	r2, #6
 8004932:	4669      	mov	r1, sp
 8004934:	206c      	movs	r0, #108	@ 0x6c
 8004936:	f7ff ff71 	bl	800481c <MSP_SendFrame>
}
 800493a:	b003      	add	sp, #12
 800493c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004940:	20000b80 	.word	0x20000b80

08004944 <MSP_SendAltitude>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendAltitude()
 ***********************************/
void MSP_SendAltitude(void)
{
 8004944:	b500      	push	{lr}
 8004946:	b083      	sub	sp, #12
	uint16_t data_length = sizeof(msp_altitude);			// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_altitude, data_length);			// Convert struct elements to bytes
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <MSP_SendAltitude+0x20>)
 800494a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800494e:	9000      	str	r0, [sp, #0]
 8004950:	f8ad 1004 	strh.w	r1, [sp, #4]
	MSP_SendFrame(MSP_ALTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004954:	2206      	movs	r2, #6
 8004956:	4669      	mov	r1, sp
 8004958:	206d      	movs	r0, #109	@ 0x6d
 800495a:	f7ff ff5f 	bl	800481c <MSP_SendFrame>
}
 800495e:	b003      	add	sp, #12
 8004960:	f85d fb04 	ldr.w	pc, [sp], #4
 8004964:	20000b78 	.word	0x20000b78

08004968 <MSP_SendPID>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendPID()
 ***********************************/
void MSP_SendPID(void)
{
 8004968:	b510      	push	{r4, lr}
 800496a:	b088      	sub	sp, #32
	uint16_t data_length = sizeof(msp_pid);					// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_pid, data_length);				// Convert struct elements to bytes
 800496c:	46ec      	mov	ip, sp
 800496e:	4c08      	ldr	r4, [pc, #32]	@ (8004990 <MSP_SendPID+0x28>)
 8004970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004976:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800497a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800497e:	f8ac 3000 	strh.w	r3, [ip]
	MSP_SendFrame(MSP_PID, buff, data_length);				// Pack into MSP frame and transmit
 8004982:	221e      	movs	r2, #30
 8004984:	4669      	mov	r1, sp
 8004986:	2070      	movs	r0, #112	@ 0x70
 8004988:	f7ff ff48 	bl	800481c <MSP_SendFrame>
}
 800498c:	b008      	add	sp, #32
 800498e:	bd10      	pop	{r4, pc}
 8004990:	20000b58 	.word	0x20000b58

08004994 <_Error_Handler>:
 Arguments		:	File and line number
 Return Value	:	None
 Example Call	:	_Error_Handler(__FILE__, __LINE__)
 ***********************************/
void _Error_Handler(char * file, int line)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	4606      	mov	r6, r0
 8004998:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, 1);
 800499a:	4c1c      	ldr	r4, [pc, #112]	@ (8004a0c <_Error_Handler+0x78>)
 800499c:	2201      	movs	r2, #1
 800499e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049a2:	4620      	mov	r0, r4
 80049a4:	f7fc fd94 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7fc fd8e 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, 0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7fc fd88 	bl	80014d0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
		HAL_GPIO_TogglePin(White_LED_GPIO_Port, White_LED_Pin);
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);

		// Print file name and line number to serial terminal
		serialPrint("Error with ");
 80049c0:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8004a10 <_Error_Handler+0x7c>
		serialPrint(file);
		serialPrint(" at line: ");
 80049c4:	4f13      	ldr	r7, [pc, #76]	@ (8004a14 <_Error_Handler+0x80>)
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 80049c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7fc fd86 	bl	80014dc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(White_LED_GPIO_Port, White_LED_Pin);
 80049d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7fc fd81 	bl	80014dc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 80049da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049de:	4620      	mov	r0, r4
 80049e0:	f7fc fd7c 	bl	80014dc <HAL_GPIO_TogglePin>
		serialPrint("Error with ");
 80049e4:	4640      	mov	r0, r8
 80049e6:	f000 fc47 	bl	8005278 <serialPrint>
		serialPrint(file);
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 fc44 	bl	8005278 <serialPrint>
		serialPrint(" at line: ");
 80049f0:	4638      	mov	r0, r7
 80049f2:	f000 fc41 	bl	8005278 <serialPrint>
		serialInt(line);
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 fc50 	bl	800529c <serialInt>
		serialWrite('\n');
 80049fc:	200a      	movs	r0, #10
 80049fe:	f000 fbfd 	bl	80051fc <serialWrite>

		// Delay to avoid terminal from hanging
		delay_ms(500);
 8004a02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a06:	f000 fdbf 	bl	8005588 <delay_ms>
	while (1)
 8004a0a:	e7dc      	b.n	80049c6 <_Error_Handler+0x32>
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	08007744 	.word	0x08007744
 8004a14:	08007750 	.word	0x08007750

08004a18 <SystemClock_Config>:
{
 8004a18:	b500      	push	{lr}
 8004a1a:	b091      	sub	sp, #68	@ 0x44
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a20:	2201      	movs	r2, #1
 8004a22:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a24:	2210      	movs	r2, #16
 8004a26:	920b      	str	r2, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a28:	930d      	str	r3, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004a2e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8004a32:	930f      	str	r3, [sp, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a34:	a806      	add	r0, sp, #24
 8004a36:	f7fd f9a3 	bl	8001d80 <HAL_RCC_OscConfig>
 8004a3a:	bb08      	cbnz	r0, 8004a80 <SystemClock_Config+0x68>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004a3c:	230f      	movs	r3, #15
 8004a3e:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a40:	2102      	movs	r1, #2
 8004a42:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a44:	2300      	movs	r3, #0
 8004a46:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a4c:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a4e:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a50:	a801      	add	r0, sp, #4
 8004a52:	f7fd fc7b 	bl	800234c <HAL_RCC_ClockConfig>
 8004a56:	b9b8      	cbnz	r0, 8004a88 <SystemClock_Config+0x70>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a58:	f7fd fd52 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <SystemClock_Config+0x78>)
 8004a5e:	fba3 3000 	umull	r3, r0, r3, r0
 8004a62:	0980      	lsrs	r0, r0, #6
 8004a64:	f7fc fbde 	bl	8001224 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a68:	2004      	movs	r0, #4
 8004a6a:	f7fc fbef 	bl	800124c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4611      	mov	r1, r2
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a76:	f7fc fb93 	bl	80011a0 <HAL_NVIC_SetPriority>
}
 8004a7a:	b011      	add	sp, #68	@ 0x44
 8004a7c:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 8004a80:	213c      	movs	r1, #60	@ 0x3c
 8004a82:	4804      	ldr	r0, [pc, #16]	@ (8004a94 <SystemClock_Config+0x7c>)
 8004a84:	f7ff ff86 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004a88:	2149      	movs	r1, #73	@ 0x49
 8004a8a:	4802      	ldr	r0, [pc, #8]	@ (8004a94 <SystemClock_Config+0x7c>)
 8004a8c:	f7ff ff82 	bl	8004994 <_Error_Handler>
 8004a90:	10624dd3 	.word	0x10624dd3
 8004a94:	0800775c 	.word	0x0800775c

08004a98 <Peripherals_Init>:
{
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	b095      	sub	sp, #84	@ 0x54
	HAL_Init();
 8004a9c:	f7fc fb4a 	bl	8001134 <HAL_Init>
	SystemClock_Config();
 8004aa0:	f7ff ffba 	bl	8004a18 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa4:	4ba9      	ldr	r3, [pc, #676]	@ (8004d4c <Peripherals_Init+0x2b4>)
 8004aa6:	699a      	ldr	r2, [r3, #24]
 8004aa8:	f042 0210 	orr.w	r2, r2, #16
 8004aac:	619a      	str	r2, [r3, #24]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	f002 0210 	and.w	r2, r2, #16
 8004ab4:	9201      	str	r2, [sp, #4]
 8004ab6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	f042 0204 	orr.w	r2, r2, #4
 8004abe:	619a      	str	r2, [r3, #24]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	f002 0204 	and.w	r2, r2, #4
 8004ac6:	9202      	str	r2, [sp, #8]
 8004ac8:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	f042 0208 	orr.w	r2, r2, #8
 8004ad0:	619a      	str	r2, [r3, #24]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	9303      	str	r3, [sp, #12]
 8004ada:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8004adc:	4f9c      	ldr	r7, [pc, #624]	@ (8004d50 <Peripherals_Init+0x2b8>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7fc fcf3 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004aea:	4c9a      	ldr	r4, [pc, #616]	@ (8004d54 <Peripherals_Init+0x2bc>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	2120      	movs	r1, #32
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fc fced 	bl	80014d0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004af6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004afa:	930d      	str	r3, [sp, #52]	@ 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004afc:	2601      	movs	r6, #1
 8004afe:	960e      	str	r6, [sp, #56]	@ 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b00:	2502      	movs	r5, #2
 8004b02:	9510      	str	r5, [sp, #64]	@ 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b04:	a90d      	add	r1, sp, #52	@ 0x34
 8004b06:	4638      	mov	r0, r7
 8004b08:	f7fc fbb0 	bl	800126c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	930d      	str	r3, [sp, #52]	@ 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b10:	960e      	str	r6, [sp, #56]	@ 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b12:	9510      	str	r5, [sp, #64]	@ 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b14:	a90d      	add	r1, sp, #52	@ 0x34
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7fc fba8 	bl	800126c <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8004b1c:	488e      	ldr	r0, [pc, #568]	@ (8004d58 <Peripherals_Init+0x2c0>)
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <Peripherals_Init+0x2c4>)
 8004b20:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8004b22:	4b8f      	ldr	r3, [pc, #572]	@ (8004d60 <Peripherals_Init+0x2c8>)
 8004b24:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b26:	2300      	movs	r3, #0
 8004b28:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004b2a:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b30:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b32:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004b34:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b36:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b38:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b3a:	f7fc feb5 	bl	80018a8 <HAL_I2C_Init>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	f040 80e2 	bne.w	8004d08 <Peripherals_Init+0x270>
	huart1.Instance = USART1;
 8004b44:	4887      	ldr	r0, [pc, #540]	@ (8004d64 <Peripherals_Init+0x2cc>)
 8004b46:	4b88      	ldr	r3, [pc, #544]	@ (8004d68 <Peripherals_Init+0x2d0>)
 8004b48:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = UART1_BAUD;
 8004b4a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004b4e:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b50:	2300      	movs	r3, #0
 8004b52:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004b54:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004b56:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004b58:	220c      	movs	r2, #12
 8004b5a:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b5c:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b5e:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b60:	f7fd ffc0 	bl	8002ae4 <HAL_UART_Init>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f040 80d3 	bne.w	8004d10 <Peripherals_Init+0x278>
	htim1.Instance = TIM1;
 8004b6a:	4880      	ldr	r0, [pc, #512]	@ (8004d6c <Peripherals_Init+0x2d4>)
 8004b6c:	4b80      	ldr	r3, [pc, #512]	@ (8004d70 <Peripherals_Init+0x2d8>)
 8004b6e:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 2;
 8004b70:	2302      	movs	r3, #2
 8004b72:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	2300      	movs	r3, #0
 8004b76:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 1000;
 8004b78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b7c:	60c2      	str	r2, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b7e:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8004b80:	6143      	str	r3, [r0, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b82:	f7fd fdaf 	bl	80026e4 <HAL_TIM_PWM_Init>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f040 80c7 	bne.w	8004d1a <Peripherals_Init+0x282>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9304      	str	r3, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b90:	9305      	str	r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b92:	a904      	add	r1, sp, #16
 8004b94:	4875      	ldr	r0, [pc, #468]	@ (8004d6c <Peripherals_Init+0x2d4>)
 8004b96:	f7fd fea8 	bl	80028ea <HAL_TIMEx_MasterConfigSynchronization>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f040 80c1 	bne.w	8004d22 <Peripherals_Init+0x28a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ba0:	2360      	movs	r3, #96	@ 0x60
 8004ba2:	9306      	str	r3, [sp, #24]
	sConfigOC.Pulse = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9307      	str	r3, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ba8:	9308      	str	r3, [sp, #32]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004baa:	930a      	str	r3, [sp, #40]	@ 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bac:	930b      	str	r3, [sp, #44]	@ 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bae:	930c      	str	r3, [sp, #48]	@ 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004bb0:	220c      	movs	r2, #12
 8004bb2:	a906      	add	r1, sp, #24
 8004bb4:	486d      	ldr	r0, [pc, #436]	@ (8004d6c <Peripherals_Init+0x2d4>)
 8004bb6:	f7fd fddd 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	f040 80b5 	bne.w	8004d2a <Peripherals_Init+0x292>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	930d      	str	r3, [sp, #52]	@ 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004bc4:	930e      	str	r3, [sp, #56]	@ 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bc6:	930f      	str	r3, [sp, #60]	@ 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8004bc8:	9310      	str	r3, [sp, #64]	@ 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bca:	9311      	str	r3, [sp, #68]	@ 0x44
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bd0:	9212      	str	r2, [sp, #72]	@ 0x48
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bd2:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004bd4:	a90d      	add	r1, sp, #52	@ 0x34
 8004bd6:	4865      	ldr	r0, [pc, #404]	@ (8004d6c <Peripherals_Init+0x2d4>)
 8004bd8:	f7fd fe62 	bl	80028a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 80a8 	bne.w	8004d32 <Peripherals_Init+0x29a>
	HAL_TIM_MspPostInit(&htim1);
 8004be2:	4862      	ldr	r0, [pc, #392]	@ (8004d6c <Peripherals_Init+0x2d4>)
 8004be4:	f000 fc10 	bl	8005408 <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 8004be8:	4862      	ldr	r0, [pc, #392]	@ (8004d74 <Peripherals_Init+0x2dc>)
 8004bea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004bee:	6003      	str	r3, [r0, #0]
	htim2.Init.Prescaler = 2;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 1000;
 8004bf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bfc:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfe:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c00:	f7fd fd70 	bl	80026e4 <HAL_TIM_PWM_Init>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f040 8098 	bne.w	8004d3a <Peripherals_Init+0x2a2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c0e:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c10:	a906      	add	r1, sp, #24
 8004c12:	4858      	ldr	r0, [pc, #352]	@ (8004d74 <Peripherals_Init+0x2dc>)
 8004c14:	f7fd fe69 	bl	80028ea <HAL_TIMEx_MasterConfigSynchronization>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f040 8092 	bne.w	8004d42 <Peripherals_Init+0x2aa>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c1e:	2360      	movs	r3, #96	@ 0x60
 8004c20:	930d      	str	r3, [sp, #52]	@ 0x34
	sConfigOC.Pulse = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	930e      	str	r3, [sp, #56]	@ 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c26:	930f      	str	r3, [sp, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c28:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	a90d      	add	r1, sp, #52	@ 0x34
 8004c2e:	4851      	ldr	r0, [pc, #324]	@ (8004d74 <Peripherals_Init+0x2dc>)
 8004c30:	f7fd fda0 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f040 80a9 	bne.w	8004d8c <Peripherals_Init+0x2f4>
	HAL_TIM_MspPostInit(&htim2);
 8004c3a:	484e      	ldr	r0, [pc, #312]	@ (8004d74 <Peripherals_Init+0x2dc>)
 8004c3c:	f000 fbe4 	bl	8005408 <HAL_TIM_MspPostInit>
	htim3.Instance = TIM3;
 8004c40:	484d      	ldr	r0, [pc, #308]	@ (8004d78 <Peripherals_Init+0x2e0>)
 8004c42:	4b4e      	ldr	r3, [pc, #312]	@ (8004d7c <Peripherals_Init+0x2e4>)
 8004c44:	6003      	str	r3, [r0, #0]
	htim3.Init.Prescaler = 2;
 8004c46:	2302      	movs	r3, #2
 8004c48:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 1000;
 8004c4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c52:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c54:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c56:	f7fd fd45 	bl	80026e4 <HAL_TIM_PWM_Init>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 809a 	bne.w	8004d94 <Peripherals_Init+0x2fc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c60:	2300      	movs	r3, #0
 8004c62:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c64:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c66:	a906      	add	r1, sp, #24
 8004c68:	4843      	ldr	r0, [pc, #268]	@ (8004d78 <Peripherals_Init+0x2e0>)
 8004c6a:	f7fd fe3e 	bl	80028ea <HAL_TIMEx_MasterConfigSynchronization>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 8094 	bne.w	8004d9c <Peripherals_Init+0x304>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c74:	2360      	movs	r3, #96	@ 0x60
 8004c76:	930d      	str	r3, [sp, #52]	@ 0x34
	sConfigOC.Pulse = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	930e      	str	r3, [sp, #56]	@ 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c7c:	930f      	str	r3, [sp, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c7e:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c80:	2208      	movs	r2, #8
 8004c82:	a90d      	add	r1, sp, #52	@ 0x34
 8004c84:	483c      	ldr	r0, [pc, #240]	@ (8004d78 <Peripherals_Init+0x2e0>)
 8004c86:	f7fd fd75 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f040 808a 	bne.w	8004da4 <Peripherals_Init+0x30c>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c90:	220c      	movs	r2, #12
 8004c92:	a90d      	add	r1, sp, #52	@ 0x34
 8004c94:	4838      	ldr	r0, [pc, #224]	@ (8004d78 <Peripherals_Init+0x2e0>)
 8004c96:	f7fd fd6d 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f040 8087 	bne.w	8004dae <Peripherals_Init+0x316>
	HAL_TIM_MspPostInit(&htim3);
 8004ca0:	4835      	ldr	r0, [pc, #212]	@ (8004d78 <Peripherals_Init+0x2e0>)
 8004ca2:	f000 fbb1 	bl	8005408 <HAL_TIM_MspPostInit>
	htim4.Instance = TIM4;
 8004ca6:	4836      	ldr	r0, [pc, #216]	@ (8004d80 <Peripherals_Init+0x2e8>)
 8004ca8:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <Peripherals_Init+0x2ec>)
 8004caa:	6003      	str	r3, [r0, #0]
	htim4.Init.Prescaler = 2;
 8004cac:	2302      	movs	r3, #2
 8004cae:	6043      	str	r3, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 1000;
 8004cb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cb8:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cba:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004cbc:	f7fd fd12 	bl	80026e4 <HAL_TIM_PWM_Init>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d179      	bne.n	8004db8 <Peripherals_Init+0x320>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cc8:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004cca:	a906      	add	r1, sp, #24
 8004ccc:	482c      	ldr	r0, [pc, #176]	@ (8004d80 <Peripherals_Init+0x2e8>)
 8004cce:	f7fd fe0c 	bl	80028ea <HAL_TIMEx_MasterConfigSynchronization>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d175      	bne.n	8004dc2 <Peripherals_Init+0x32a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cd6:	2360      	movs	r3, #96	@ 0x60
 8004cd8:	930d      	str	r3, [sp, #52]	@ 0x34
	sConfigOC.Pulse = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	930e      	str	r3, [sp, #56]	@ 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cde:	930f      	str	r3, [sp, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ce0:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	a90d      	add	r1, sp, #52	@ 0x34
 8004ce6:	4826      	ldr	r0, [pc, #152]	@ (8004d80 <Peripherals_Init+0x2e8>)
 8004ce8:	f7fd fd44 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d16d      	bne.n	8004dcc <Peripherals_Init+0x334>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cf0:	220c      	movs	r2, #12
 8004cf2:	a90d      	add	r1, sp, #52	@ 0x34
 8004cf4:	4822      	ldr	r0, [pc, #136]	@ (8004d80 <Peripherals_Init+0x2e8>)
 8004cf6:	f7fd fd3d 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d16b      	bne.n	8004dd6 <Peripherals_Init+0x33e>
	HAL_TIM_MspPostInit(&htim4);
 8004cfe:	4820      	ldr	r0, [pc, #128]	@ (8004d80 <Peripherals_Init+0x2e8>)
 8004d00:	f000 fb82 	bl	8005408 <HAL_TIM_MspPostInit>
}
 8004d04:	b015      	add	sp, #84	@ 0x54
 8004d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_Error_Handler(__FILE__, __LINE__);
 8004d08:	216b      	movs	r1, #107	@ 0x6b
 8004d0a:	481f      	ldr	r0, [pc, #124]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d0c:	f7ff fe42 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d10:	f240 1151 	movw	r1, #337	@ 0x151
 8004d14:	481c      	ldr	r0, [pc, #112]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d16:	f7ff fe3d 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d1a:	2188      	movs	r1, #136	@ 0x88
 8004d1c:	481a      	ldr	r0, [pc, #104]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d1e:	f7ff fe39 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d22:	218f      	movs	r1, #143	@ 0x8f
 8004d24:	4818      	ldr	r0, [pc, #96]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d26:	f7ff fe35 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d2a:	219a      	movs	r1, #154	@ 0x9a
 8004d2c:	4816      	ldr	r0, [pc, #88]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d2e:	f7ff fe31 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d32:	21a6      	movs	r1, #166	@ 0xa6
 8004d34:	4814      	ldr	r0, [pc, #80]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d36:	f7ff fe2d 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d3a:	21c3      	movs	r1, #195	@ 0xc3
 8004d3c:	4812      	ldr	r0, [pc, #72]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d3e:	f7ff fe29 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d42:	21ca      	movs	r1, #202	@ 0xca
 8004d44:	4810      	ldr	r0, [pc, #64]	@ (8004d88 <Peripherals_Init+0x2f0>)
 8004d46:	f7ff fe25 	bl	8004994 <_Error_Handler>
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40010800 	.word	0x40010800
 8004d58:	20000ce8 	.word	0x20000ce8
 8004d5c:	40005400 	.word	0x40005400
 8004d60:	00061a80 	.word	0x00061a80
 8004d64:	20000bb8 	.word	0x20000bb8
 8004d68:	40013800 	.word	0x40013800
 8004d6c:	20000cac 	.word	0x20000cac
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	20000c70 	.word	0x20000c70
 8004d78:	20000c34 	.word	0x20000c34
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	20000bf8 	.word	0x20000bf8
 8004d84:	40000800 	.word	0x40000800
 8004d88:	0800775c 	.word	0x0800775c
		_Error_Handler(__FILE__, __LINE__);
 8004d8c:	21d3      	movs	r1, #211	@ 0xd3
 8004d8e:	4814      	ldr	r0, [pc, #80]	@ (8004de0 <Peripherals_Init+0x348>)
 8004d90:	f7ff fe00 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d94:	21f0      	movs	r1, #240	@ 0xf0
 8004d96:	4812      	ldr	r0, [pc, #72]	@ (8004de0 <Peripherals_Init+0x348>)
 8004d98:	f7ff fdfc 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004d9c:	21f7      	movs	r1, #247	@ 0xf7
 8004d9e:	4810      	ldr	r0, [pc, #64]	@ (8004de0 <Peripherals_Init+0x348>)
 8004da0:	f7ff fdf8 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004da8:	480d      	ldr	r0, [pc, #52]	@ (8004de0 <Peripherals_Init+0x348>)
 8004daa:	f7ff fdf3 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004dae:	f240 1105 	movw	r1, #261	@ 0x105
 8004db2:	480b      	ldr	r0, [pc, #44]	@ (8004de0 <Peripherals_Init+0x348>)
 8004db4:	f7ff fdee 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004db8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004dbc:	4808      	ldr	r0, [pc, #32]	@ (8004de0 <Peripherals_Init+0x348>)
 8004dbe:	f7ff fde9 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004dc2:	f240 1129 	movw	r1, #297	@ 0x129
 8004dc6:	4806      	ldr	r0, [pc, #24]	@ (8004de0 <Peripherals_Init+0x348>)
 8004dc8:	f7ff fde4 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004dcc:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8004dd0:	4803      	ldr	r0, [pc, #12]	@ (8004de0 <Peripherals_Init+0x348>)
 8004dd2:	f7ff fddf 	bl	8004994 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8004dd6:	f240 1137 	movw	r1, #311	@ 0x137
 8004dda:	4801      	ldr	r0, [pc, #4]	@ (8004de0 <Peripherals_Init+0x348>)
 8004ddc:	f7ff fdda 	bl	8004994 <_Error_Handler>
 8004de0:	0800775c 	.word	0x0800775c

08004de4 <PID_Compute>:
 Arguments		:	PID struct instance
 Return Value	:	None
 Example Call	:	PID_Compute(&pid_pitch)
 ***********************************/
static void PID_Compute(PID_TypeDef *pid)
{
 8004de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de8:	4604      	mov	r4, r0
	float KP = 0, KI = 0, KD = 0;

	// Compute error
	pid->error = (pid->set_point + pid->offset) - pid->input;
 8004dea:	69c0      	ldr	r0, [r0, #28]
 8004dec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004dee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8004df0:	f7fb fe78 	bl	8000ae4 <__addsf3>
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fe73 	bl	8000ae0 <__aeabi_fsub>
 8004dfa:	62a0      	str	r0, [r4, #40]	@ 0x28
     * -179 degrees and the input is +179 degrees, the standard PID output would
     * be -358 degrees leading to a very high yaw rotation rate to correct the
     * -358 degrees error.  However, +2 degrees achieves the same result, with
     * a  much lower rotation rate to fix the error.
     * -----------------------------------------------------------------------*/
	if (pid->instance == YAW)
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d019      	beq.n	8004e36 <PID_Compute+0x52>
	}

	// Conservative PID gains
	//if (pid_altitude.output < pid->breakpoint)
	//{
		KP = pid->con_KP;
 8004e02:	6861      	ldr	r1, [r4, #4]
		KI = pid->con_KI;
 8004e04:	68a5      	ldr	r5, [r4, #8]
		KD = pid->con_KD;
 8004e06:	68e6      	ldr	r6, [r4, #12]
		KI = pid->agr_KI;
		KD = pid->agr_KD;
	}*/

	// Compute proportional term
	pid->proportional = KP * pid->error;
 8004e08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e0a:	f7fb ff73 	bl	8000cf4 <__aeabi_fmul>
 8004e0e:	63a0      	str	r0, [r4, #56]	@ 0x38

	// Compute integral sum
	pid->integral += pid->error;
 8004e10:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004e12:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e14:	f7fb fe66 	bl	8000ae4 <__addsf3>
 8004e18:	63e0      	str	r0, [r4, #60]	@ 0x3c

	// Constrain integral term to prevent wind-up
	pid->integral = constrain(pid->integral, -PID_LIMIT, PID_LIMIT);
 8004e1a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e1c:	4939      	ldr	r1, [pc, #228]	@ (8004f04 <PID_Compute+0x120>)
 8004e1e:	f7fc f907 	bl	8001030 <__aeabi_fcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d132      	bne.n	8004e8c <PID_Compute+0xa8>
 8004e26:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e28:	4937      	ldr	r1, [pc, #220]	@ (8004f08 <PID_Compute+0x124>)
 8004e2a:	f7fc f91f 	bl	800106c <__aeabi_fcmpgt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d157      	bne.n	8004ee2 <PID_Compute+0xfe>
 8004e32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004e34:	e02b      	b.n	8004e8e <PID_Compute+0xaa>
		if (abs(pid->error) > 180)
 8004e36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e38:	2100      	movs	r1, #0
 8004e3a:	f7fc f917 	bl	800106c <__aeabi_fcmpgt>
 8004e3e:	b1d0      	cbz	r0, 8004e76 <PID_Compute+0x92>
 8004e40:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e42:	4932      	ldr	r1, [pc, #200]	@ (8004f0c <PID_Compute+0x128>)
 8004e44:	f7fc f912 	bl	800106c <__aeabi_fcmpgt>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0da      	beq.n	8004e02 <PID_Compute+0x1e>
			pid->error = pid->error - (360 * pid->error / abs(pid->error));
 8004e4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e4e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e50:	492f      	ldr	r1, [pc, #188]	@ (8004f10 <PID_Compute+0x12c>)
 8004e52:	f7fb ff4f 	bl	8000cf4 <__aeabi_fmul>
 8004e56:	4605      	mov	r5, r0
 8004e58:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f7fc f906 	bl	800106c <__aeabi_fcmpgt>
 8004e60:	b180      	cbz	r0, 8004e84 <PID_Compute+0xa0>
 8004e62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004e64:	4628      	mov	r0, r5
 8004e66:	f7fb fff9 	bl	8000e5c <__aeabi_fdiv>
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7fb fe37 	bl	8000ae0 <__aeabi_fsub>
 8004e72:	62a0      	str	r0, [r4, #40]	@ 0x28
 8004e74:	e7c5      	b.n	8004e02 <PID_Compute+0x1e>
		if (abs(pid->error) > 180)
 8004e76:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e78:	4926      	ldr	r1, [pc, #152]	@ (8004f14 <PID_Compute+0x130>)
 8004e7a:	f7fc f8d9 	bl	8001030 <__aeabi_fcmplt>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d0bf      	beq.n	8004e02 <PID_Compute+0x1e>
 8004e82:	e7e3      	b.n	8004e4c <PID_Compute+0x68>
			pid->error = pid->error - (360 * pid->error / abs(pid->error));
 8004e84:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004e86:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004e8a:	e7eb      	b.n	8004e64 <PID_Compute+0x80>
	pid->integral = constrain(pid->integral, -PID_LIMIT, PID_LIMIT);
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <PID_Compute+0x120>)
 8004e8e:	63e3      	str	r3, [r4, #60]	@ 0x3c

	// Compute derivative term
#ifndef PID_GYRO
	pid->derivative = pid->input - pid->last_input;
 8004e90:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e94:	f7fb fe24 	bl	8000ae0 <__aeabi_fsub>
 8004e98:	6420      	str	r0, [r4, #64]	@ 0x40
#ifdef PID_GYRO
	pid->derivative = pid->gyro;
#endif

	// Compute angle PID output
	pid->output = (pid->proportional) + (KI * pid->integral) - (KD * pid->derivative);
 8004e9a:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 8004e9e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ea0:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb ff26 	bl	8000cf4 <__aeabi_fmul>
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	f7fb fe1b 	bl	8000ae4 <__addsf3>
 8004eae:	4605      	mov	r5, r0
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7fb ff1e 	bl	8000cf4 <__aeabi_fmul>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7fb fe10 	bl	8000ae0 <__aeabi_fsub>
 8004ec0:	64a0      	str	r0, [r4, #72]	@ 0x48

	// Constrain angle PID output to PWM range
	pid->output = pid->direction * constrain(pid->output, -PID_LIMIT, PID_LIMIT);
 8004ec2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004ec4:	f7fb fec2 	bl	8000c4c <__aeabi_i2f>
 8004ec8:	4605      	mov	r5, r0
 8004eca:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004ecc:	490d      	ldr	r1, [pc, #52]	@ (8004f04 <PID_Compute+0x120>)
 8004ece:	f7fc f8af 	bl	8001030 <__aeabi_fcmplt>
 8004ed2:	b940      	cbnz	r0, 8004ee6 <PID_Compute+0x102>
 8004ed4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004ed6:	490c      	ldr	r1, [pc, #48]	@ (8004f08 <PID_Compute+0x124>)
 8004ed8:	f7fc f8c8 	bl	800106c <__aeabi_fcmpgt>
 8004edc:	b980      	cbnz	r0, 8004f00 <PID_Compute+0x11c>
 8004ede:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ee0:	e002      	b.n	8004ee8 <PID_Compute+0x104>
	pid->integral = constrain(pid->integral, -PID_LIMIT, PID_LIMIT);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <PID_Compute+0x124>)
 8004ee4:	e7d3      	b.n	8004e8e <PID_Compute+0xaa>
	pid->output = pid->direction * constrain(pid->output, -PID_LIMIT, PID_LIMIT);
 8004ee6:	4907      	ldr	r1, [pc, #28]	@ (8004f04 <PID_Compute+0x120>)
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7fb ff03 	bl	8000cf4 <__aeabi_fmul>
 8004eee:	64a0      	str	r0, [r4, #72]	@ 0x48

	// Store variable for next iteration
	pid->last_input = pid->input;
 8004ef0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ef2:	6363      	str	r3, [r4, #52]	@ 0x34
	pid->last_error = pid->error;
 8004ef4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ef6:	62e3      	str	r3, [r4, #44]	@ 0x2c
	pid->last_time  = pid->time;
 8004ef8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004efa:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8004efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pid->output = pid->direction * constrain(pid->output, -PID_LIMIT, PID_LIMIT);
 8004f00:	4901      	ldr	r1, [pc, #4]	@ (8004f08 <PID_Compute+0x124>)
 8004f02:	e7f1      	b.n	8004ee8 <PID_Compute+0x104>
 8004f04:	c3fa0000 	.word	0xc3fa0000
 8004f08:	43fa0000 	.word	0x43fa0000
 8004f0c:	43340000 	.word	0x43340000
 8004f10:	43b40000 	.word	0x43b40000
 8004f14:	c3340000 	.word	0xc3340000

08004f18 <PID_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	PID_Init()
 ***********************************/
void PID_Init(void)
{
 8004f18:	b530      	push	{r4, r5, lr}
	/* Set Controller Direction */
	pid_pitch.direction = DIRECT;
 8004f1a:	4c1f      	ldr	r4, [pc, #124]	@ (8004f98 <PID_Init+0x80>)
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	64e3      	str	r3, [r4, #76]	@ 0x4c
	pid_roll.direction = DIRECT;
 8004f20:	481e      	ldr	r0, [pc, #120]	@ (8004f9c <PID_Init+0x84>)
 8004f22:	64c3      	str	r3, [r0, #76]	@ 0x4c
	pid_yaw.direction = REVERSE;
 8004f24:	491e      	ldr	r1, [pc, #120]	@ (8004fa0 <PID_Init+0x88>)
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f2a:	64ca      	str	r2, [r1, #76]	@ 0x4c
	pid_altitude.direction = DIRECT;
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <PID_Init+0x8c>)
 8004f2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	pid_roll.delta = 5;
	pid_yaw.delta = 5;
	pid_altitude.delta = 5;*/

	/* Set Breakpoint Value - Border value between conservative and aggressive PID gains */
	pid_pitch.breakpoint = 1500;
 8004f30:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <PID_Init+0x90>)
 8004f32:	6223      	str	r3, [r4, #32]
	pid_roll.breakpoint = 1450;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	@ (8004fac <PID_Init+0x94>)
 8004f36:	6203      	str	r3, [r0, #32]
	pid_yaw.breakpoint = 2000;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <PID_Init+0x98>)
 8004f3a:	620b      	str	r3, [r1, #32]
	pid_altitude.breakpoint = 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6213      	str	r3, [r2, #32]
			pid_pitch.con_KP = ckp;
 8004f40:	4d1c      	ldr	r5, [pc, #112]	@ (8004fb4 <PID_Init+0x9c>)
 8004f42:	6065      	str	r5, [r4, #4]
			pid_pitch.con_KI = cki;
 8004f44:	f8df c070 	ldr.w	ip, [pc, #112]	@ 8004fb8 <PID_Init+0xa0>
 8004f48:	f8c4 c008 	str.w	ip, [r4, #8]
			pid_pitch.con_KD = ckd;
 8004f4c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8004fbc <PID_Init+0xa4>
 8004f50:	f8c4 e00c 	str.w	lr, [r4, #12]
			pid_pitch.agr_KP = akp;
 8004f54:	4d1a      	ldr	r5, [pc, #104]	@ (8004fc0 <PID_Init+0xa8>)
 8004f56:	6125      	str	r5, [r4, #16]
			pid_pitch.agr_KI = aki;
 8004f58:	f8c4 c014 	str.w	ip, [r4, #20]
			pid_pitch.agr_KD = akd;
 8004f5c:	4d19      	ldr	r5, [pc, #100]	@ (8004fc4 <PID_Init+0xac>)
 8004f5e:	61a5      	str	r5, [r4, #24]
			pid_roll.con_KP = ckp;
 8004f60:	4c19      	ldr	r4, [pc, #100]	@ (8004fc8 <PID_Init+0xb0>)
 8004f62:	6044      	str	r4, [r0, #4]
			pid_roll.con_KI = cki;
 8004f64:	f8c0 c008 	str.w	ip, [r0, #8]
			pid_roll.con_KD = ckd;
 8004f68:	4d18      	ldr	r5, [pc, #96]	@ (8004fcc <PID_Init+0xb4>)
 8004f6a:	60c5      	str	r5, [r0, #12]
			pid_roll.agr_KP = akp;
 8004f6c:	6104      	str	r4, [r0, #16]
			pid_roll.agr_KI = aki;
 8004f6e:	f8c0 c014 	str.w	ip, [r0, #20]
			pid_roll.agr_KD = akd;
 8004f72:	4c17      	ldr	r4, [pc, #92]	@ (8004fd0 <PID_Init+0xb8>)
 8004f74:	6184      	str	r4, [r0, #24]
			pid_yaw.con_KP = ckp;
 8004f76:	4817      	ldr	r0, [pc, #92]	@ (8004fd4 <PID_Init+0xbc>)
 8004f78:	6048      	str	r0, [r1, #4]
			pid_yaw.con_KI = cki;
 8004f7a:	4817      	ldr	r0, [pc, #92]	@ (8004fd8 <PID_Init+0xc0>)
 8004f7c:	6088      	str	r0, [r1, #8]
			pid_yaw.con_KD = ckd;
 8004f7e:	f8c1 e00c 	str.w	lr, [r1, #12]
			pid_yaw.agr_KP = akp;
 8004f82:	610b      	str	r3, [r1, #16]
			pid_yaw.agr_KI = aki;
 8004f84:	614b      	str	r3, [r1, #20]
			pid_yaw.agr_KD = akd;
 8004f86:	618b      	str	r3, [r1, #24]
			pid_altitude.con_KP = ckp;
 8004f88:	4914      	ldr	r1, [pc, #80]	@ (8004fdc <PID_Init+0xc4>)
 8004f8a:	6051      	str	r1, [r2, #4]
			pid_altitude.con_KI = cki;
 8004f8c:	6093      	str	r3, [r2, #8]
			pid_altitude.con_KD = ckd;
 8004f8e:	60d3      	str	r3, [r2, #12]
			pid_altitude.agr_KP = akp;
 8004f90:	6113      	str	r3, [r2, #16]
			pid_altitude.agr_KI = aki;
 8004f92:	6153      	str	r3, [r2, #20]
			pid_altitude.agr_KD = akd;
 8004f94:	6193      	str	r3, [r2, #24]
	/* Set PID Gains */
	PID_SetGains(PITCH, 4.4f, 0.02f, 280.0f, 4.5f, 0.02f, 360.0f);
	PID_SetGains(ROLL, 3.8f, 0.02f, 260.0f, 3.8f, 0.02f, 320.0f);
	PID_SetGains(YAW, 3.0f, 0.01f, 280.0f, 0, 0, 0);
	PID_SetGains(ALT, 10.0f, 0, 0, 0, 0, 0);
}
 8004f96:	bd30      	pop	{r4, r5, pc}
 8004f98:	20000160 	.word	0x20000160
 8004f9c:	20000104 	.word	0x20000104
 8004fa0:	200000a8 	.word	0x200000a8
 8004fa4:	2000004c 	.word	0x2000004c
 8004fa8:	44bb8000 	.word	0x44bb8000
 8004fac:	44b54000 	.word	0x44b54000
 8004fb0:	44fa0000 	.word	0x44fa0000
 8004fb4:	408ccccd 	.word	0x408ccccd
 8004fb8:	3ca3d70a 	.word	0x3ca3d70a
 8004fbc:	438c0000 	.word	0x438c0000
 8004fc0:	40900000 	.word	0x40900000
 8004fc4:	43b40000 	.word	0x43b40000
 8004fc8:	40733333 	.word	0x40733333
 8004fcc:	43820000 	.word	0x43820000
 8004fd0:	43a00000 	.word	0x43a00000
 8004fd4:	40400000 	.word	0x40400000
 8004fd8:	3c23d70a 	.word	0x3c23d70a
 8004fdc:	41200000 	.word	0x41200000

08004fe0 <PID_UpdateAltitude>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	PID_UpdateAltitude()
 ***********************************/
void PID_UpdateAltitude(void)
{
 8004fe0:	b508      	push	{r3, lr}
	// Enable altitude hold mode
	if (joystick.ALT_HOLD)
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <PID_UpdateAltitude+0x54>)
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	b1d3      	cbz	r3, 800501e <PID_UpdateAltitude+0x3e>
	{
		if (ALT_FLAG == 0)
 8004fe8:	4b13      	ldr	r3, [pc, #76]	@ (8005038 <PID_UpdateAltitude+0x58>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b96b      	cbnz	r3, 800500a <PID_UpdateAltitude+0x2a>
		{
			// Start level holding at the current altitude
			pid_altitude.set_point = MS5611_GetFilteredAltitude()*100;
 8004fee:	f7fe facd 	bl	800358c <MS5611_GetFilteredAltitude>
 8004ff2:	4912      	ldr	r1, [pc, #72]	@ (800503c <PID_UpdateAltitude+0x5c>)
 8004ff4:	f7fb fe7e 	bl	8000cf4 <__aeabi_fmul>
 8004ff8:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <PID_UpdateAltitude+0x60>)
 8004ffa:	61d8      	str	r0, [r3, #28]
			ALT_FLAG = 1;
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <PID_UpdateAltitude+0x58>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
		// Feedback input to hold level at the set altitude
		else pid_altitude.input = MS5611_GetFilteredAltitude()*100;
	}

	// Manual throttle control mode
	if (!joystick.ALT_HOLD)
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <PID_UpdateAltitude+0x54>)
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	b9a3      	cbnz	r3, 8005032 <PID_UpdateAltitude+0x52>
 8005008:	e00c      	b.n	8005024 <PID_UpdateAltitude+0x44>
		else pid_altitude.input = MS5611_GetFilteredAltitude()*100;
 800500a:	f7fe fabf 	bl	800358c <MS5611_GetFilteredAltitude>
 800500e:	490b      	ldr	r1, [pc, #44]	@ (800503c <PID_UpdateAltitude+0x5c>)
 8005010:	f7fb fe70 	bl	8000cf4 <__aeabi_fmul>
 8005014:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <PID_UpdateAltitude+0x60>)
 8005016:	6318      	str	r0, [r3, #48]	@ 0x30
	if (!joystick.ALT_HOLD)
 8005018:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <PID_UpdateAltitude+0x54>)
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	b94b      	cbnz	r3, 8005032 <PID_UpdateAltitude+0x52>
	{
		if (ALT_FLAG) ALT_FLAG = 0;
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <PID_UpdateAltitude+0x58>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b113      	cbz	r3, 800502a <PID_UpdateAltitude+0x4a>
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <PID_UpdateAltitude+0x58>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
		pid_altitude.output = (float) joystick.throttle;
 800502a:	4b02      	ldr	r3, [pc, #8]	@ (8005034 <PID_UpdateAltitude+0x54>)
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <PID_UpdateAltitude+0x60>)
 8005030:	649a      	str	r2, [r3, #72]	@ 0x48
	}
}
 8005032:	bd08      	pop	{r3, pc}
 8005034:	20000b34 	.word	0x20000b34
 8005038:	20000d24 	.word	0x20000d24
 800503c:	42c80000 	.word	0x42c80000
 8005040:	2000004c 	.word	0x2000004c

08005044 <PID_Update>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	PID_Update()
 ***********************************/
void PID_Update(void)
{
 8005044:	b538      	push	{r3, r4, r5, lr}
	// Update PID inputs
	pid_pitch.input = AHRS_GetPitch();
 8005046:	f7fe f9bd 	bl	80033c4 <AHRS_GetPitch>
 800504a:	4c62      	ldr	r4, [pc, #392]	@ (80051d4 <PID_Update+0x190>)
 800504c:	6320      	str	r0, [r4, #48]	@ 0x30
	pid_roll.input = AHRS_GetRoll();
 800504e:	f7fe f9c5 	bl	80033dc <AHRS_GetRoll>
 8005052:	4b61      	ldr	r3, [pc, #388]	@ (80051d8 <PID_Update+0x194>)
 8005054:	6318      	str	r0, [r3, #48]	@ 0x30
	pid_yaw.input = AHRS_GetYaw();
 8005056:	f7fe f9cd 	bl	80033f4 <AHRS_GetYaw>
 800505a:	4b60      	ldr	r3, [pc, #384]	@ (80051dc <PID_Update+0x198>)
 800505c:	6318      	str	r0, [r3, #48]	@ 0x30

	// Update altitude PID input
	PID_UpdateAltitude();
 800505e:	f7ff ffbf 	bl	8004fe0 <PID_UpdateAltitude>
	serialInt(pid_yaw.input);
	serialWrite('\t');
#endif

	/* Emergency Power Down  for angles greater than 80 degrees */
	if ((abs(pid_pitch.input) > 80) || (abs(pid_roll.input) > 80))
 8005062:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005064:	2100      	movs	r1, #0
 8005066:	f7fc f801 	bl	800106c <__aeabi_fcmpgt>
 800506a:	2800      	cmp	r0, #0
 800506c:	f000 808c 	beq.w	8005188 <PID_Update+0x144>
 8005070:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005072:	495b      	ldr	r1, [pc, #364]	@ (80051e0 <PID_Update+0x19c>)
 8005074:	f7fb fffa 	bl	800106c <__aeabi_fcmpgt>
 8005078:	2800      	cmp	r0, #0
 800507a:	f040 808d 	bne.w	8005198 <PID_Update+0x154>
 800507e:	4b56      	ldr	r3, [pc, #344]	@ (80051d8 <PID_Update+0x194>)
 8005080:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005082:	2100      	movs	r1, #0
 8005084:	f7fb fff2 	bl	800106c <__aeabi_fcmpgt>
 8005088:	2800      	cmp	r0, #0
 800508a:	f000 808d 	beq.w	80051a8 <PID_Update+0x164>
 800508e:	4b52      	ldr	r3, [pc, #328]	@ (80051d8 <PID_Update+0x194>)
 8005090:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005092:	4953      	ldr	r1, [pc, #332]	@ (80051e0 <PID_Update+0x19c>)
 8005094:	f7fb ffea 	bl	800106c <__aeabi_fcmpgt>
 8005098:	2800      	cmp	r0, #0
 800509a:	d17d      	bne.n	8005198 <PID_Update+0x154>
		// Stop motors for safety
		Motor_StopAll();
		toggleLED(0, 1, 0);
		return;
	}
	else toggleLED(1, 1, 1);
 800509c:	2201      	movs	r2, #1
 800509e:	4611      	mov	r1, r2
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7ff f9d3 	bl	800444c <toggleLED>

	/* Compute PID */
	PID_Compute(&pid_pitch);
 80050a6:	484b      	ldr	r0, [pc, #300]	@ (80051d4 <PID_Update+0x190>)
 80050a8:	f7ff fe9c 	bl	8004de4 <PID_Compute>
	PID_Compute(&pid_roll);
 80050ac:	484a      	ldr	r0, [pc, #296]	@ (80051d8 <PID_Update+0x194>)
 80050ae:	f7ff fe99 	bl	8004de4 <PID_Compute>
	PID_Compute(&pid_yaw);
 80050b2:	484a      	ldr	r0, [pc, #296]	@ (80051dc <PID_Update+0x198>)
 80050b4:	f7ff fe96 	bl	8004de4 <PID_Compute>

	if (joystick.ALT_HOLD)
 80050b8:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <PID_Update+0x1a0>)
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d17c      	bne.n	80051ba <PID_Update+0x176>
	}

	//pid_pitch.output = 0;
	//pid_roll.output = 0;
	//pid_yaw.output = 0;
	pid_altitude.output = joystick.throttle; // Currently in manual mode
 80050c0:	4b48      	ldr	r3, [pc, #288]	@ (80051e4 <PID_Update+0x1a0>)
 80050c2:	6859      	ldr	r1, [r3, #4]
 80050c4:	4a48      	ldr	r2, [pc, #288]	@ (80051e8 <PID_Update+0x1a4>)
 80050c6:	6491      	str	r1, [r2, #72]	@ 0x48

	// If drone is armed, update motor PWM values
	if (joystick.MOTOR_ARM) Motor_DistributeSpeed(pid_altitude.output, pid_pitch.output, pid_roll.output, pid_yaw.output);
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d07f      	beq.n	80051ce <PID_Update+0x18a>
 80050ce:	6c90      	ldr	r0, [r2, #72]	@ 0x48
 80050d0:	4b40      	ldr	r3, [pc, #256]	@ (80051d4 <PID_Update+0x190>)
 80050d2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80050d4:	4b40      	ldr	r3, [pc, #256]	@ (80051d8 <PID_Update+0x194>)
 80050d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d8:	4b40      	ldr	r3, [pc, #256]	@ (80051dc <PID_Update+0x198>)
 80050da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050dc:	f7ff fb54 	bl	8004788 <Motor_DistributeSpeed>
	msp_txf_pid.pitch.p = pid_pitch.con_KP * 255;
 80050e0:	4d3c      	ldr	r5, [pc, #240]	@ (80051d4 <PID_Update+0x190>)
 80050e2:	6868      	ldr	r0, [r5, #4]
 80050e4:	4c41      	ldr	r4, [pc, #260]	@ (80051ec <PID_Update+0x1a8>)
 80050e6:	4942      	ldr	r1, [pc, #264]	@ (80051f0 <PID_Update+0x1ac>)
 80050e8:	f7fb fe04 	bl	8000cf4 <__aeabi_fmul>
 80050ec:	f7fb ffee 	bl	80010cc <__aeabi_f2uiz>
 80050f0:	70e0      	strb	r0, [r4, #3]
	msp_txf_pid.pitch.i = pid_pitch.con_KI * 255;
 80050f2:	68a8      	ldr	r0, [r5, #8]
 80050f4:	493e      	ldr	r1, [pc, #248]	@ (80051f0 <PID_Update+0x1ac>)
 80050f6:	f7fb fdfd 	bl	8000cf4 <__aeabi_fmul>
 80050fa:	f7fb ffe7 	bl	80010cc <__aeabi_f2uiz>
 80050fe:	7120      	strb	r0, [r4, #4]
	msp_txf_pid.roll.d = pid_pitch.con_KD * 255;
 8005100:	68eb      	ldr	r3, [r5, #12]
	msp_txf_pid.roll.p = pid_roll.con_KP * 255;
 8005102:	4d35      	ldr	r5, [pc, #212]	@ (80051d8 <PID_Update+0x194>)
 8005104:	6868      	ldr	r0, [r5, #4]
 8005106:	493a      	ldr	r1, [pc, #232]	@ (80051f0 <PID_Update+0x1ac>)
 8005108:	f7fb fdf4 	bl	8000cf4 <__aeabi_fmul>
 800510c:	f7fb ffde 	bl	80010cc <__aeabi_f2uiz>
 8005110:	7020      	strb	r0, [r4, #0]
	msp_txf_pid.roll.i = pid_roll.con_KI * 255;
 8005112:	68a8      	ldr	r0, [r5, #8]
 8005114:	4936      	ldr	r1, [pc, #216]	@ (80051f0 <PID_Update+0x1ac>)
 8005116:	f7fb fded 	bl	8000cf4 <__aeabi_fmul>
 800511a:	f7fb ffd7 	bl	80010cc <__aeabi_f2uiz>
 800511e:	7060      	strb	r0, [r4, #1]
	msp_txf_pid.roll.d = pid_roll.con_KD * 255;
 8005120:	68e8      	ldr	r0, [r5, #12]
 8005122:	4933      	ldr	r1, [pc, #204]	@ (80051f0 <PID_Update+0x1ac>)
 8005124:	f7fb fde6 	bl	8000cf4 <__aeabi_fmul>
 8005128:	f7fb ffd0 	bl	80010cc <__aeabi_f2uiz>
 800512c:	70a0      	strb	r0, [r4, #2]
	msp_txf_pid.yaw.p = pid_yaw.con_KP * 255;
 800512e:	4d2b      	ldr	r5, [pc, #172]	@ (80051dc <PID_Update+0x198>)
 8005130:	6868      	ldr	r0, [r5, #4]
 8005132:	492f      	ldr	r1, [pc, #188]	@ (80051f0 <PID_Update+0x1ac>)
 8005134:	f7fb fdde 	bl	8000cf4 <__aeabi_fmul>
 8005138:	f7fb ffc8 	bl	80010cc <__aeabi_f2uiz>
 800513c:	71a0      	strb	r0, [r4, #6]
	msp_txf_pid.yaw.i = pid_yaw.con_KI * 255;
 800513e:	68a8      	ldr	r0, [r5, #8]
 8005140:	492b      	ldr	r1, [pc, #172]	@ (80051f0 <PID_Update+0x1ac>)
 8005142:	f7fb fdd7 	bl	8000cf4 <__aeabi_fmul>
 8005146:	f7fb ffc1 	bl	80010cc <__aeabi_f2uiz>
 800514a:	71e0      	strb	r0, [r4, #7]
	msp_txf_pid.yaw.d = pid_yaw.con_KD * 255;
 800514c:	68e8      	ldr	r0, [r5, #12]
 800514e:	4928      	ldr	r1, [pc, #160]	@ (80051f0 <PID_Update+0x1ac>)
 8005150:	f7fb fdd0 	bl	8000cf4 <__aeabi_fmul>
 8005154:	f7fb ffba 	bl	80010cc <__aeabi_f2uiz>
 8005158:	7220      	strb	r0, [r4, #8]
	msp_txf_pid.alt.p = pid_altitude.con_KP * 255;
 800515a:	4d23      	ldr	r5, [pc, #140]	@ (80051e8 <PID_Update+0x1a4>)
 800515c:	6868      	ldr	r0, [r5, #4]
 800515e:	4924      	ldr	r1, [pc, #144]	@ (80051f0 <PID_Update+0x1ac>)
 8005160:	f7fb fdc8 	bl	8000cf4 <__aeabi_fmul>
 8005164:	f7fb ffb2 	bl	80010cc <__aeabi_f2uiz>
 8005168:	7260      	strb	r0, [r4, #9]
	msp_txf_pid.alt.i = pid_altitude.con_KI * 255;
 800516a:	68a8      	ldr	r0, [r5, #8]
 800516c:	4920      	ldr	r1, [pc, #128]	@ (80051f0 <PID_Update+0x1ac>)
 800516e:	f7fb fdc1 	bl	8000cf4 <__aeabi_fmul>
 8005172:	f7fb ffab 	bl	80010cc <__aeabi_f2uiz>
 8005176:	72a0      	strb	r0, [r4, #10]
	msp_txf_pid.alt.d = pid_altitude.con_KD * 255;
 8005178:	68e8      	ldr	r0, [r5, #12]
 800517a:	491d      	ldr	r1, [pc, #116]	@ (80051f0 <PID_Update+0x1ac>)
 800517c:	f7fb fdba 	bl	8000cf4 <__aeabi_fmul>
 8005180:	f7fb ffa4 	bl	80010cc <__aeabi_f2uiz>
 8005184:	72e0      	strb	r0, [r4, #11]
}
 8005186:	e00e      	b.n	80051a6 <PID_Update+0x162>
	if ((abs(pid_pitch.input) > 80) || (abs(pid_roll.input) > 80))
 8005188:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <PID_Update+0x190>)
 800518a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800518c:	4919      	ldr	r1, [pc, #100]	@ (80051f4 <PID_Update+0x1b0>)
 800518e:	f7fb ff4f 	bl	8001030 <__aeabi_fcmplt>
 8005192:	2800      	cmp	r0, #0
 8005194:	f43f af73 	beq.w	800507e <PID_Update+0x3a>
		Motor_StopAll();
 8005198:	f7ff faa3 	bl	80046e2 <Motor_StopAll>
		toggleLED(0, 1, 0);
 800519c:	2200      	movs	r2, #0
 800519e:	2101      	movs	r1, #1
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7ff f953 	bl	800444c <toggleLED>
	else Motor_StopAll();

	// Update PID MSP frame
	PID_UpdateMSP();
}
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
	if ((abs(pid_pitch.input) > 80) || (abs(pid_roll.input) > 80))
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <PID_Update+0x194>)
 80051aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051ac:	4911      	ldr	r1, [pc, #68]	@ (80051f4 <PID_Update+0x1b0>)
 80051ae:	f7fb ff3f 	bl	8001030 <__aeabi_fcmplt>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f43f af72 	beq.w	800509c <PID_Update+0x58>
 80051b8:	e7ee      	b.n	8005198 <PID_Update+0x154>
		PID_Compute(&pid_altitude);
 80051ba:	4c0b      	ldr	r4, [pc, #44]	@ (80051e8 <PID_Update+0x1a4>)
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff fe11 	bl	8004de4 <PID_Compute>
		pid_altitude.output += 1500;
 80051c2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80051c4:	490c      	ldr	r1, [pc, #48]	@ (80051f8 <PID_Update+0x1b4>)
 80051c6:	f7fb fc8d 	bl	8000ae4 <__addsf3>
 80051ca:	64a0      	str	r0, [r4, #72]	@ 0x48
 80051cc:	e778      	b.n	80050c0 <PID_Update+0x7c>
	else Motor_StopAll();
 80051ce:	f7ff fa88 	bl	80046e2 <Motor_StopAll>
 80051d2:	e785      	b.n	80050e0 <PID_Update+0x9c>
 80051d4:	20000160 	.word	0x20000160
 80051d8:	20000104 	.word	0x20000104
 80051dc:	200000a8 	.word	0x200000a8
 80051e0:	42a00000 	.word	0x42a00000
 80051e4:	20000b34 	.word	0x20000b34
 80051e8:	2000004c 	.word	0x2000004c
 80051ec:	20000b58 	.word	0x20000b58
 80051f0:	437f0000 	.word	0x437f0000
 80051f4:	c2a00000 	.word	0xc2a00000
 80051f8:	44bb8000 	.word	0x44bb8000

080051fc <serialWrite>:
 Arguments		:	Byte to send
 Return Value	:	None
 Example Call	:	serialWrite('H')
 ***********************************/
void serialWrite(unsigned char ch)
{
 80051fc:	b508      	push	{r3, lr}
	tx_buffer[0] = ch;
 80051fe:	4904      	ldr	r1, [pc, #16]	@ (8005210 <serialWrite+0x14>)
 8005200:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tx_buffer, 1, 5);
 8005202:	2305      	movs	r3, #5
 8005204:	2201      	movs	r2, #1
 8005206:	4803      	ldr	r0, [pc, #12]	@ (8005214 <serialWrite+0x18>)
 8005208:	f7fd fc99 	bl	8002b3e <HAL_UART_Transmit>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800520c:	bd08      	pop	{r3, pc}
 800520e:	bf00      	nop
 8005210:	20000d28 	.word	0x20000d28
 8005214:	20000bb8 	.word	0x20000bb8

08005218 <HAL_UART_RxCpltCallback>:
 Return Value	:	None
 Example Call	:	HAL_UART_RxCpltCallback(&huart1)
 ***********************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
 8005218:	6802      	ldr	r2, [r0, #0]
 800521a:	4b08      	ldr	r3, [pc, #32]	@ (800523c <HAL_UART_RxCpltCallback+0x24>)
 800521c:	429a      	cmp	r2, r3
 800521e:	d000      	beq.n	8005222 <HAL_UART_RxCpltCallback+0xa>
 8005220:	4770      	bx	lr
{
 8005222:	b510      	push	{r4, lr}
	{
		// Put the received data into the FIFO buffer
		CB_Write(&rxc, rx_buffer[0]);
 8005224:	4c06      	ldr	r4, [pc, #24]	@ (8005240 <HAL_UART_RxCpltCallback+0x28>)
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	4806      	ldr	r0, [pc, #24]	@ (8005244 <HAL_UART_RxCpltCallback+0x2c>)
 800522a:	f7ff f8cf 	bl	80043cc <CB_Write>

		// Enable RX interrupt flags to receive the next data
		HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 800522e:	2201      	movs	r2, #1
 8005230:	4621      	mov	r1, r4
 8005232:	4805      	ldr	r0, [pc, #20]	@ (8005248 <HAL_UART_RxCpltCallback+0x30>)
 8005234:	f7fd fd5c 	bl	8002cf0 <HAL_UART_Receive_IT>

		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 8005238:	bd10      	pop	{r4, pc}
 800523a:	bf00      	nop
 800523c:	40013800 	.word	0x40013800
 8005240:	20000d8c 	.word	0x20000d8c
 8005244:	2000032c 	.word	0x2000032c
 8005248:	20000bb8 	.word	0x20000bb8

0800524c <serialFlush>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	serialFlush()
 ***********************************/
void serialFlush(void)
{
 800524c:	b508      	push	{r3, lr}
	CB_Init(&rxc);
 800524e:	4802      	ldr	r0, [pc, #8]	@ (8005258 <serialFlush+0xc>)
 8005250:	f7ff f8d8 	bl	8004404 <CB_Init>
}
 8005254:	bd08      	pop	{r3, pc}
 8005256:	bf00      	nop
 8005258:	2000032c 	.word	0x2000032c

0800525c <serialBegin>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	serialBegin()
 ***********************************/
void serialBegin(void)
{
 800525c:	b508      	push	{r3, lr}
	serialFlush();
 800525e:	f7ff fff5 	bl	800524c <serialFlush>
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8005262:	2201      	movs	r2, #1
 8005264:	4902      	ldr	r1, [pc, #8]	@ (8005270 <serialBegin+0x14>)
 8005266:	4803      	ldr	r0, [pc, #12]	@ (8005274 <serialBegin+0x18>)
 8005268:	f7fd fd42 	bl	8002cf0 <HAL_UART_Receive_IT>
}
 800526c:	bd08      	pop	{r3, pc}
 800526e:	bf00      	nop
 8005270:	20000d8c 	.word	0x20000d8c
 8005274:	20000bb8 	.word	0x20000bb8

08005278 <serialPrint>:
 Arguments		:	Data stream
 Return Value	:	None
 Example Call	:	serialPrint("Hola Monde!")
 ***********************************/
void serialPrint(char* data)
{
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4605      	mov	r5, r0
	for (int i = 0; i < strlen(data); i++)
 800527c:	1e44      	subs	r4, r0, #1
 800527e:	f1c0 0601 	rsb	r6, r0, #1
 8005282:	e003      	b.n	800528c <serialPrint+0x14>
		serialWrite(data[i]);
 8005284:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005288:	f7ff ffb8 	bl	80051fc <serialWrite>
	for (int i = 0; i < strlen(data); i++)
 800528c:	4628      	mov	r0, r5
 800528e:	f7fa ff5f 	bl	8000150 <strlen>
 8005292:	1933      	adds	r3, r6, r4
 8005294:	4298      	cmp	r0, r3
 8005296:	d8f5      	bhi.n	8005284 <serialPrint+0xc>
}
 8005298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800529c <serialInt>:
 Arguments		:	Integer value
 Return Value	:	None
 Example Call	:	serialInt()
 ***********************************/
void serialInt(int val)
{
 800529c:	b510      	push	{r4, lr}
 800529e:	4602      	mov	r2, r0
	sprintf(tx_buffer, "%i", val);
 80052a0:	4c04      	ldr	r4, [pc, #16]	@ (80052b4 <serialInt+0x18>)
 80052a2:	4905      	ldr	r1, [pc, #20]	@ (80052b8 <serialInt+0x1c>)
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 f999 	bl	80055dc <siprintf>
	serialPrint(tx_buffer);
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff ffe4 	bl	8005278 <serialPrint>
}
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	20000d28 	.word	0x20000d28
 80052b8:	08007774 	.word	0x08007774

080052bc <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80052bc:	b500      	push	{lr}
 80052be:	b083      	sub	sp, #12
	__HAL_RCC_AFIO_CLK_ENABLE();
 80052c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <HAL_MspInit+0x78>)
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	619a      	str	r2, [r3, #24]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	9b01      	ldr	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052d4:	2003      	movs	r0, #3
 80052d6:	f7fb ff51 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	4611      	mov	r1, r2
 80052de:	f06f 000b 	mvn.w	r0, #11
 80052e2:	f7fb ff5d 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80052e6:	2200      	movs	r2, #0
 80052e8:	4611      	mov	r1, r2
 80052ea:	f06f 000a 	mvn.w	r0, #10
 80052ee:	f7fb ff57 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	4611      	mov	r1, r2
 80052f6:	f06f 0009 	mvn.w	r0, #9
 80052fa:	f7fb ff51 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80052fe:	2200      	movs	r2, #0
 8005300:	4611      	mov	r1, r2
 8005302:	f06f 0004 	mvn.w	r0, #4
 8005306:	f7fb ff4b 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	4611      	mov	r1, r2
 800530e:	f06f 0003 	mvn.w	r0, #3
 8005312:	f7fb ff45 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005316:	2200      	movs	r2, #0
 8005318:	4611      	mov	r1, r2
 800531a:	f06f 0001 	mvn.w	r0, #1
 800531e:	f7fb ff3f 	bl	80011a0 <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005322:	2200      	movs	r2, #0
 8005324:	4611      	mov	r1, r2
 8005326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800532a:	f7fb ff39 	bl	80011a0 <HAL_NVIC_SetPriority>
}
 800532e:	b003      	add	sp, #12
 8005330:	f85d fb04 	ldr.w	pc, [sp], #4
 8005334:	40021000 	.word	0x40021000

08005338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	if (hi2c->Instance == I2C1)
 8005338:	6802      	ldr	r2, [r0, #0]
 800533a:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <HAL_I2C_MspInit+0x3c>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d000      	beq.n	8005342 <HAL_I2C_MspInit+0xa>
 8005340:	4770      	bx	lr
{
 8005342:	b500      	push	{lr}
 8005344:	b087      	sub	sp, #28
	{
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8005346:	23c0      	movs	r3, #192	@ 0xc0
 8005348:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800534a:	2312      	movs	r3, #18
 800534c:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800534e:	2303      	movs	r3, #3
 8005350:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005352:	a902      	add	r1, sp, #8
 8005354:	4808      	ldr	r0, [pc, #32]	@ (8005378 <HAL_I2C_MspInit+0x40>)
 8005356:	f7fb ff89 	bl	800126c <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800535a:	4b08      	ldr	r3, [pc, #32]	@ (800537c <HAL_I2C_MspInit+0x44>)
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8005362:	61da      	str	r2, [r3, #28]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	9b01      	ldr	r3, [sp, #4]
	}
}
 800536e:	b007      	add	sp, #28
 8005370:	f85d fb04 	ldr.w	pc, [sp], #4
 8005374:	40005400 	.word	0x40005400
 8005378:	40010c00 	.word	0x40010c00
 800537c:	40021000 	.word	0x40021000

08005380 <HAL_TIM_PWM_MspInit>:
	}

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005380:	b084      	sub	sp, #16
	if (htim_pwm->Instance == TIM1)
 8005382:	6803      	ldr	r3, [r0, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_TIM_PWM_MspInit+0x78>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_TIM_PWM_MspInit+0x32>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
	}
	else if (htim_pwm->Instance == TIM2)
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538e:	d01c      	beq.n	80053ca <HAL_TIM_PWM_MspInit+0x4a>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
	}
	else if (htim_pwm->Instance == TIM3)
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <HAL_TIM_PWM_MspInit+0x7c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d025      	beq.n	80053e2 <HAL_TIM_PWM_MspInit+0x62>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
	else if (htim_pwm->Instance == TIM4)
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <HAL_TIM_PWM_MspInit+0x80>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d114      	bne.n	80053c6 <HAL_TIM_PWM_MspInit+0x46>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 800539c:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <HAL_TIM_PWM_MspInit+0x84>)
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	f042 0204 	orr.w	r2, r2, #4
 80053a4:	61da      	str	r2, [r3, #28]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	9b03      	ldr	r3, [sp, #12]
	}
}
 80053b0:	e009      	b.n	80053c6 <HAL_TIM_PWM_MspInit+0x46>
		__HAL_RCC_TIM1_CLK_ENABLE();
 80053b2:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <HAL_TIM_PWM_MspInit+0x84>)
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ba:	619a      	str	r2, [r3, #24]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	9b00      	ldr	r3, [sp, #0]
}
 80053c6:	b004      	add	sp, #16
 80053c8:	4770      	bx	lr
		__HAL_RCC_TIM2_CLK_ENABLE();
 80053ca:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	e7f1      	b.n	80053c6 <HAL_TIM_PWM_MspInit+0x46>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <HAL_TIM_PWM_MspInit+0x84>)
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	f042 0202 	orr.w	r2, r2, #2
 80053ea:	61da      	str	r2, [r3, #28]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	9b02      	ldr	r3, [sp, #8]
 80053f6:	e7e6      	b.n	80053c6 <HAL_TIM_PWM_MspInit+0x46>
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40021000 	.word	0x40021000

08005408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005408:	b500      	push	{lr}
 800540a:	b085      	sub	sp, #20
	GPIO_InitTypeDef GPIO_InitStruct;
	if (htim->Instance == TIM1)
 800540c:	6803      	ldr	r3, [r0, #0]
 800540e:	4a1c      	ldr	r2, [pc, #112]	@ (8005480 <HAL_TIM_MspPostInit+0x78>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <HAL_TIM_MspPostInit+0x24>
		GPIO_InitStruct.Pin = Motor_6_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(Motor_6_GPIO_Port, &GPIO_InitStruct);
	}
	else if (htim->Instance == TIM2)
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005418:	d013      	beq.n	8005442 <HAL_TIM_MspPostInit+0x3a>
		GPIO_InitStruct.Pin = Motor_3_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(Motor_3_GPIO_Port, &GPIO_InitStruct);
	}
	else if (htim->Instance == TIM3)
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_TIM_MspPostInit+0x7c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d019      	beq.n	8005454 <HAL_TIM_MspPostInit+0x4c>
		GPIO_InitStruct.Pin = Motor_4_Pin | Motor_5_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
	else if (htim->Instance == TIM4)
 8005420:	4a19      	ldr	r2, [pc, #100]	@ (8005488 <HAL_TIM_MspPostInit+0x80>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d020      	beq.n	8005468 <HAL_TIM_MspPostInit+0x60>
		GPIO_InitStruct.Pin = Motor_2_Pin | Motor_1_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8005426:	b005      	add	sp, #20
 8005428:	f85d fb04 	ldr.w	pc, [sp], #4
		GPIO_InitStruct.Pin = Motor_6_Pin;
 800542c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005430:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	2302      	movs	r3, #2
 8005434:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(Motor_6_GPIO_Port, &GPIO_InitStruct);
 8005438:	4669      	mov	r1, sp
 800543a:	4814      	ldr	r0, [pc, #80]	@ (800548c <HAL_TIM_MspPostInit+0x84>)
 800543c:	f7fb ff16 	bl	800126c <HAL_GPIO_Init>
 8005440:	e7f1      	b.n	8005426 <HAL_TIM_MspPostInit+0x1e>
		GPIO_InitStruct.Pin = Motor_3_Pin;
 8005442:	2302      	movs	r3, #2
 8005444:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005446:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(Motor_3_GPIO_Port, &GPIO_InitStruct);
 800544a:	4669      	mov	r1, sp
 800544c:	480f      	ldr	r0, [pc, #60]	@ (800548c <HAL_TIM_MspPostInit+0x84>)
 800544e:	f7fb ff0d 	bl	800126c <HAL_GPIO_Init>
 8005452:	e7e8      	b.n	8005426 <HAL_TIM_MspPostInit+0x1e>
		GPIO_InitStruct.Pin = Motor_4_Pin | Motor_5_Pin;
 8005454:	2303      	movs	r3, #3
 8005456:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005458:	2302      	movs	r3, #2
 800545a:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545c:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800545e:	4669      	mov	r1, sp
 8005460:	480b      	ldr	r0, [pc, #44]	@ (8005490 <HAL_TIM_MspPostInit+0x88>)
 8005462:	f7fb ff03 	bl	800126c <HAL_GPIO_Init>
 8005466:	e7de      	b.n	8005426 <HAL_TIM_MspPostInit+0x1e>
		GPIO_InitStruct.Pin = Motor_2_Pin | Motor_1_Pin;
 8005468:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800546c:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546e:	2302      	movs	r3, #2
 8005470:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005472:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005474:	4669      	mov	r1, sp
 8005476:	4806      	ldr	r0, [pc, #24]	@ (8005490 <HAL_TIM_MspPostInit+0x88>)
 8005478:	f7fb fef8 	bl	800126c <HAL_GPIO_Init>
}
 800547c:	e7d3      	b.n	8005426 <HAL_TIM_MspPostInit+0x1e>
 800547e:	bf00      	nop
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40010800 	.word	0x40010800
 8005490:	40010c00 	.word	0x40010c00

08005494 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1)
 8005494:	6802      	ldr	r2, [r0, #0]
 8005496:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <HAL_UART_MspInit+0x64>)
 8005498:	429a      	cmp	r2, r3
 800549a:	d000      	beq.n	800549e <HAL_UART_MspInit+0xa>
 800549c:	4770      	bx	lr
{
 800549e:	b530      	push	{r4, r5, lr}
 80054a0:	b087      	sub	sp, #28
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80054a2:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ac:	619a      	str	r2, [r3, #24]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	9b01      	ldr	r3, [sp, #4]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10    ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054bc:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	2302      	movs	r3, #2
 80054c0:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c2:	2303      	movs	r3, #3
 80054c4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c6:	4d0d      	ldr	r5, [pc, #52]	@ (80054fc <HAL_UART_MspInit+0x68>)
 80054c8:	a902      	add	r1, sp, #8
 80054ca:	4628      	mov	r0, r5
 80054cc:	f7fb fece 	bl	800126c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d4:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d6:	2400      	movs	r4, #0
 80054d8:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054dc:	a902      	add	r1, sp, #8
 80054de:	4628      	mov	r0, r5
 80054e0:	f7fb fec4 	bl	800126c <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054e4:	4622      	mov	r2, r4
 80054e6:	4621      	mov	r1, r4
 80054e8:	2025      	movs	r0, #37	@ 0x25
 80054ea:	f7fb fe59 	bl	80011a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054ee:	2025      	movs	r0, #37	@ 0x25
 80054f0:	f7fb fe8c 	bl	800120c <HAL_NVIC_EnableIRQ>
	}
}
 80054f4:	b007      	add	sp, #28
 80054f6:	bd30      	pop	{r4, r5, pc}
 80054f8:	40013800 	.word	0x40013800
 80054fc:	40010800 	.word	0x40010800

08005500 <NMI_Handler>:
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
}
 8005500:	4770      	bx	lr

08005502 <HardFault_Handler>:
/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
	while (1)
 8005502:	e7fe      	b.n	8005502 <HardFault_Handler>

08005504 <MemManage_Handler>:
/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
	while (1)
 8005504:	e7fe      	b.n	8005504 <MemManage_Handler>

08005506 <BusFault_Handler>:
/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
	while (1)
 8005506:	e7fe      	b.n	8005506 <BusFault_Handler>

08005508 <UsageFault_Handler>:
/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
	while (1)
 8005508:	e7fe      	b.n	8005508 <UsageFault_Handler>

0800550a <SVC_Handler>:
/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
}
 800550a:	4770      	bx	lr

0800550c <DebugMon_Handler>:
/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
}
 800550c:	4770      	bx	lr

0800550e <PendSV_Handler>:
/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
}
 800550e:	4770      	bx	lr

08005510 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005510:	b508      	push	{r3, lr}
	HAL_IncTick();
 8005512:	f7fb fe21 	bl	8001158 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8005516:	f7fb fea5 	bl	8001264 <HAL_SYSTICK_IRQHandler>
}
 800551a:	bd08      	pop	{r3, pc}

0800551c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 800551c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart1);
 800551e:	4802      	ldr	r0, [pc, #8]	@ (8005528 <USART1_IRQHandler+0xc>)
 8005520:	f7fd fc7e 	bl	8002e20 <HAL_UART_IRQHandler>
}
 8005524:	bd08      	pop	{r3, pc}
 8005526:	bf00      	nop
 8005528:	20000bb8 	.word	0x20000bb8

0800552c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800552c:	4b0f      	ldr	r3, [pc, #60]	@ (800556c <SystemInit+0x40>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	4a0d      	ldr	r2, [pc, #52]	@ (8005570 <SystemInit+0x44>)
 800553a:	400a      	ands	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8005544:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005548:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005550:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8005558:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800555a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800555e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005560:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <SystemInit+0x48>)
 8005562:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005566:	609a      	str	r2, [r3, #8]
#endif 
}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	f8ff0000 	.word	0xf8ff0000
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <millis>:
 Arguments		:	None
 Return Value	:	Program time in milliseconds
 Example Call	:	millis()
 ***********************************/
uint32_t millis(void)
{
 8005578:	b508      	push	{r3, lr}
	return HAL_GetTick();
 800557a:	f7fb fdf5 	bl	8001168 <HAL_GetTick>
}
 800557e:	bd08      	pop	{r3, pc}

08005580 <micros>:
 Arguments		:	None
 Return Value	:	Program time in microseconds
 Example Call	:	micros()
 ***********************************/
uint32_t micros(void)
{
 8005580:	b508      	push	{r3, lr}
	//Micros = millis() * 1000 + 1000 - SysTick->VAL/64;
	//return Micros;

	// Doesn't work properly with some libraries, currently returns millis()
	return HAL_GetTick();
 8005582:	f7fb fdf1 	bl	8001168 <HAL_GetTick>
}
 8005586:	bd08      	pop	{r3, pc}

08005588 <delay_ms>:
 Arguments		:	Delay in milliseconds
 Return Value	:	None
 Example Call	:	delay_ms()
 ***********************************/
void delay_ms(uint32_t Delay)
{
 8005588:	b508      	push	{r3, lr}
	HAL_Delay(Delay);
 800558a:	f7fb fdf3 	bl	8001174 <HAL_Delay>
}
 800558e:	bd08      	pop	{r3, pc}

08005590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005592:	e003      	b.n	800559c <LoopCopyDataInit>

08005594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800559a:	3104      	adds	r1, #4

0800559c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800559c:	480a      	ldr	r0, [pc, #40]	@ (80055c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800559e:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80055a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80055a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80055a4:	d3f6      	bcc.n	8005594 <CopyDataInit>
  ldr r2, =_sbss
 80055a6:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80055a8:	e002      	b.n	80055b0 <LoopFillZerobss>

080055aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80055ac:	f842 3b04 	str.w	r3, [r2], #4

080055b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80055b0:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80055b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80055b4:	d3f9      	bcc.n	80055aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055b6:	f7ff ffb9 	bl	800552c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ba:	f000 f82f 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055be:	f7ff f885 	bl	80046cc <main>
  bx lr
 80055c2:	4770      	bx	lr
  ldr r3, =_sidata
 80055c4:	08007878 	.word	0x08007878
  ldr r0, =_sdata
 80055c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80055cc:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 80055d0:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 80055d4:	20000edc 	.word	0x20000edc

080055d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055d8:	e7fe      	b.n	80055d8 <ADC1_2_IRQHandler>
	...

080055dc <siprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055e2:	b500      	push	{lr}
 80055e4:	b09c      	sub	sp, #112	@ 0x70
 80055e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80055e8:	9002      	str	r0, [sp, #8]
 80055ea:	9006      	str	r0, [sp, #24]
 80055ec:	9107      	str	r1, [sp, #28]
 80055ee:	9104      	str	r1, [sp, #16]
 80055f0:	4808      	ldr	r0, [pc, #32]	@ (8005614 <siprintf+0x38>)
 80055f2:	4909      	ldr	r1, [pc, #36]	@ (8005618 <siprintf+0x3c>)
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	a902      	add	r1, sp, #8
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f000 f984 	bl	800590c <_svfiprintf_r>
 8005604:	2200      	movs	r2, #0
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	b01c      	add	sp, #112	@ 0x70
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	b003      	add	sp, #12
 8005612:	4770      	bx	lr
 8005614:	200001c0 	.word	0x200001c0
 8005618:	ffff0208 	.word	0xffff0208

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2600      	movs	r6, #0
 8005620:	4d0c      	ldr	r5, [pc, #48]	@ (8005654 <__libc_init_array+0x38>)
 8005622:	4c0d      	ldr	r4, [pc, #52]	@ (8005658 <__libc_init_array+0x3c>)
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	f002 f84e 	bl	80076cc <_init>
 8005630:	2600      	movs	r6, #0
 8005632:	4d0a      	ldr	r5, [pc, #40]	@ (800565c <__libc_init_array+0x40>)
 8005634:	4c0a      	ldr	r4, [pc, #40]	@ (8005660 <__libc_init_array+0x44>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f855 3b04 	ldr.w	r3, [r5], #4
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f855 3b04 	ldr.w	r3, [r5], #4
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08007870 	.word	0x08007870
 8005658:	08007870 	.word	0x08007870
 800565c:	08007870 	.word	0x08007870
 8005660:	08007874 	.word	0x08007874

08005664 <__retarget_lock_acquire_recursive>:
 8005664:	4770      	bx	lr

08005666 <__retarget_lock_release_recursive>:
 8005666:	4770      	bx	lr

08005668 <_free_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4605      	mov	r5, r0
 800566c:	2900      	cmp	r1, #0
 800566e:	d040      	beq.n	80056f2 <_free_r+0x8a>
 8005670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005674:	1f0c      	subs	r4, r1, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	bfb8      	it	lt
 800567a:	18e4      	addlt	r4, r4, r3
 800567c:	f000 f8de 	bl	800583c <__malloc_lock>
 8005680:	4a1c      	ldr	r2, [pc, #112]	@ (80056f4 <_free_r+0x8c>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	b933      	cbnz	r3, 8005694 <_free_r+0x2c>
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	6014      	str	r4, [r2, #0]
 800568a:	4628      	mov	r0, r5
 800568c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005690:	f000 b8da 	b.w	8005848 <__malloc_unlock>
 8005694:	42a3      	cmp	r3, r4
 8005696:	d908      	bls.n	80056aa <_free_r+0x42>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	1821      	adds	r1, r4, r0
 800569c:	428b      	cmp	r3, r1
 800569e:	bf01      	itttt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	e7ed      	b.n	8005686 <_free_r+0x1e>
 80056aa:	461a      	mov	r2, r3
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	b10b      	cbz	r3, 80056b4 <_free_r+0x4c>
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d9fa      	bls.n	80056aa <_free_r+0x42>
 80056b4:	6811      	ldr	r1, [r2, #0]
 80056b6:	1850      	adds	r0, r2, r1
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d10b      	bne.n	80056d4 <_free_r+0x6c>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	4401      	add	r1, r0
 80056c0:	1850      	adds	r0, r2, r1
 80056c2:	4283      	cmp	r3, r0
 80056c4:	6011      	str	r1, [r2, #0]
 80056c6:	d1e0      	bne.n	800568a <_free_r+0x22>
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4408      	add	r0, r1
 80056ce:	6010      	str	r0, [r2, #0]
 80056d0:	6053      	str	r3, [r2, #4]
 80056d2:	e7da      	b.n	800568a <_free_r+0x22>
 80056d4:	d902      	bls.n	80056dc <_free_r+0x74>
 80056d6:	230c      	movs	r3, #12
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	e7d6      	b.n	800568a <_free_r+0x22>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	1821      	adds	r1, r4, r0
 80056e0:	428b      	cmp	r3, r1
 80056e2:	bf01      	itttt	eq
 80056e4:	6819      	ldreq	r1, [r3, #0]
 80056e6:	685b      	ldreq	r3, [r3, #4]
 80056e8:	1809      	addeq	r1, r1, r0
 80056ea:	6021      	streq	r1, [r4, #0]
 80056ec:	6063      	str	r3, [r4, #4]
 80056ee:	6054      	str	r4, [r2, #4]
 80056f0:	e7cb      	b.n	800568a <_free_r+0x22>
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20000ed4 	.word	0x20000ed4

080056f8 <sbrk_aligned>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005738 <sbrk_aligned+0x40>)
 80056fc:	460c      	mov	r4, r1
 80056fe:	6831      	ldr	r1, [r6, #0]
 8005700:	4605      	mov	r5, r0
 8005702:	b911      	cbnz	r1, 800570a <sbrk_aligned+0x12>
 8005704:	f000 fbaa 	bl	8005e5c <_sbrk_r>
 8005708:	6030      	str	r0, [r6, #0]
 800570a:	4621      	mov	r1, r4
 800570c:	4628      	mov	r0, r5
 800570e:	f000 fba5 	bl	8005e5c <_sbrk_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d103      	bne.n	800571e <sbrk_aligned+0x26>
 8005716:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800571a:	4620      	mov	r0, r4
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	1cc4      	adds	r4, r0, #3
 8005720:	f024 0403 	bic.w	r4, r4, #3
 8005724:	42a0      	cmp	r0, r4
 8005726:	d0f8      	beq.n	800571a <sbrk_aligned+0x22>
 8005728:	1a21      	subs	r1, r4, r0
 800572a:	4628      	mov	r0, r5
 800572c:	f000 fb96 	bl	8005e5c <_sbrk_r>
 8005730:	3001      	adds	r0, #1
 8005732:	d1f2      	bne.n	800571a <sbrk_aligned+0x22>
 8005734:	e7ef      	b.n	8005716 <sbrk_aligned+0x1e>
 8005736:	bf00      	nop
 8005738:	20000ed0 	.word	0x20000ed0

0800573c <_malloc_r>:
 800573c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005740:	1ccd      	adds	r5, r1, #3
 8005742:	f025 0503 	bic.w	r5, r5, #3
 8005746:	3508      	adds	r5, #8
 8005748:	2d0c      	cmp	r5, #12
 800574a:	bf38      	it	cc
 800574c:	250c      	movcc	r5, #12
 800574e:	2d00      	cmp	r5, #0
 8005750:	4606      	mov	r6, r0
 8005752:	db01      	blt.n	8005758 <_malloc_r+0x1c>
 8005754:	42a9      	cmp	r1, r5
 8005756:	d904      	bls.n	8005762 <_malloc_r+0x26>
 8005758:	230c      	movs	r3, #12
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	2000      	movs	r0, #0
 800575e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005838 <_malloc_r+0xfc>
 8005766:	f000 f869 	bl	800583c <__malloc_lock>
 800576a:	f8d8 3000 	ldr.w	r3, [r8]
 800576e:	461c      	mov	r4, r3
 8005770:	bb44      	cbnz	r4, 80057c4 <_malloc_r+0x88>
 8005772:	4629      	mov	r1, r5
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff ffbf 	bl	80056f8 <sbrk_aligned>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	4604      	mov	r4, r0
 800577e:	d158      	bne.n	8005832 <_malloc_r+0xf6>
 8005780:	f8d8 4000 	ldr.w	r4, [r8]
 8005784:	4627      	mov	r7, r4
 8005786:	2f00      	cmp	r7, #0
 8005788:	d143      	bne.n	8005812 <_malloc_r+0xd6>
 800578a:	2c00      	cmp	r4, #0
 800578c:	d04b      	beq.n	8005826 <_malloc_r+0xea>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	4639      	mov	r1, r7
 8005792:	4630      	mov	r0, r6
 8005794:	eb04 0903 	add.w	r9, r4, r3
 8005798:	f000 fb60 	bl	8005e5c <_sbrk_r>
 800579c:	4581      	cmp	r9, r0
 800579e:	d142      	bne.n	8005826 <_malloc_r+0xea>
 80057a0:	6821      	ldr	r1, [r4, #0]
 80057a2:	4630      	mov	r0, r6
 80057a4:	1a6d      	subs	r5, r5, r1
 80057a6:	4629      	mov	r1, r5
 80057a8:	f7ff ffa6 	bl	80056f8 <sbrk_aligned>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d03a      	beq.n	8005826 <_malloc_r+0xea>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	442b      	add	r3, r5
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	bb62      	cbnz	r2, 8005818 <_malloc_r+0xdc>
 80057be:	f8c8 7000 	str.w	r7, [r8]
 80057c2:	e00f      	b.n	80057e4 <_malloc_r+0xa8>
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	1b52      	subs	r2, r2, r5
 80057c8:	d420      	bmi.n	800580c <_malloc_r+0xd0>
 80057ca:	2a0b      	cmp	r2, #11
 80057cc:	d917      	bls.n	80057fe <_malloc_r+0xc2>
 80057ce:	1961      	adds	r1, r4, r5
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	6025      	str	r5, [r4, #0]
 80057d4:	bf18      	it	ne
 80057d6:	6059      	strne	r1, [r3, #4]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	bf08      	it	eq
 80057dc:	f8c8 1000 	streq.w	r1, [r8]
 80057e0:	5162      	str	r2, [r4, r5]
 80057e2:	604b      	str	r3, [r1, #4]
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 f82f 	bl	8005848 <__malloc_unlock>
 80057ea:	f104 000b 	add.w	r0, r4, #11
 80057ee:	1d23      	adds	r3, r4, #4
 80057f0:	f020 0007 	bic.w	r0, r0, #7
 80057f4:	1ac2      	subs	r2, r0, r3
 80057f6:	bf1c      	itt	ne
 80057f8:	1a1b      	subne	r3, r3, r0
 80057fa:	50a3      	strne	r3, [r4, r2]
 80057fc:	e7af      	b.n	800575e <_malloc_r+0x22>
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	42a3      	cmp	r3, r4
 8005802:	bf0c      	ite	eq
 8005804:	f8c8 2000 	streq.w	r2, [r8]
 8005808:	605a      	strne	r2, [r3, #4]
 800580a:	e7eb      	b.n	80057e4 <_malloc_r+0xa8>
 800580c:	4623      	mov	r3, r4
 800580e:	6864      	ldr	r4, [r4, #4]
 8005810:	e7ae      	b.n	8005770 <_malloc_r+0x34>
 8005812:	463c      	mov	r4, r7
 8005814:	687f      	ldr	r7, [r7, #4]
 8005816:	e7b6      	b.n	8005786 <_malloc_r+0x4a>
 8005818:	461a      	mov	r2, r3
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	42a3      	cmp	r3, r4
 800581e:	d1fb      	bne.n	8005818 <_malloc_r+0xdc>
 8005820:	2300      	movs	r3, #0
 8005822:	6053      	str	r3, [r2, #4]
 8005824:	e7de      	b.n	80057e4 <_malloc_r+0xa8>
 8005826:	230c      	movs	r3, #12
 8005828:	4630      	mov	r0, r6
 800582a:	6033      	str	r3, [r6, #0]
 800582c:	f000 f80c 	bl	8005848 <__malloc_unlock>
 8005830:	e794      	b.n	800575c <_malloc_r+0x20>
 8005832:	6005      	str	r5, [r0, #0]
 8005834:	e7d6      	b.n	80057e4 <_malloc_r+0xa8>
 8005836:	bf00      	nop
 8005838:	20000ed4 	.word	0x20000ed4

0800583c <__malloc_lock>:
 800583c:	4801      	ldr	r0, [pc, #4]	@ (8005844 <__malloc_lock+0x8>)
 800583e:	f7ff bf11 	b.w	8005664 <__retarget_lock_acquire_recursive>
 8005842:	bf00      	nop
 8005844:	20000ecc 	.word	0x20000ecc

08005848 <__malloc_unlock>:
 8005848:	4801      	ldr	r0, [pc, #4]	@ (8005850 <__malloc_unlock+0x8>)
 800584a:	f7ff bf0c 	b.w	8005666 <__retarget_lock_release_recursive>
 800584e:	bf00      	nop
 8005850:	20000ecc 	.word	0x20000ecc

08005854 <__ssputs_r>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	461f      	mov	r7, r3
 800585a:	688e      	ldr	r6, [r1, #8]
 800585c:	4682      	mov	sl, r0
 800585e:	42be      	cmp	r6, r7
 8005860:	460c      	mov	r4, r1
 8005862:	4690      	mov	r8, r2
 8005864:	680b      	ldr	r3, [r1, #0]
 8005866:	d82d      	bhi.n	80058c4 <__ssputs_r+0x70>
 8005868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800586c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005870:	d026      	beq.n	80058c0 <__ssputs_r+0x6c>
 8005872:	6965      	ldr	r5, [r4, #20]
 8005874:	6909      	ldr	r1, [r1, #16]
 8005876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800587a:	eba3 0901 	sub.w	r9, r3, r1
 800587e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005882:	1c7b      	adds	r3, r7, #1
 8005884:	444b      	add	r3, r9
 8005886:	106d      	asrs	r5, r5, #1
 8005888:	429d      	cmp	r5, r3
 800588a:	bf38      	it	cc
 800588c:	461d      	movcc	r5, r3
 800588e:	0553      	lsls	r3, r2, #21
 8005890:	d527      	bpl.n	80058e2 <__ssputs_r+0x8e>
 8005892:	4629      	mov	r1, r5
 8005894:	f7ff ff52 	bl	800573c <_malloc_r>
 8005898:	4606      	mov	r6, r0
 800589a:	b360      	cbz	r0, 80058f6 <__ssputs_r+0xa2>
 800589c:	464a      	mov	r2, r9
 800589e:	6921      	ldr	r1, [r4, #16]
 80058a0:	f000 fafa 	bl	8005e98 <memcpy>
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80058aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	6126      	str	r6, [r4, #16]
 80058b2:	444e      	add	r6, r9
 80058b4:	6026      	str	r6, [r4, #0]
 80058b6:	463e      	mov	r6, r7
 80058b8:	6165      	str	r5, [r4, #20]
 80058ba:	eba5 0509 	sub.w	r5, r5, r9
 80058be:	60a5      	str	r5, [r4, #8]
 80058c0:	42be      	cmp	r6, r7
 80058c2:	d900      	bls.n	80058c6 <__ssputs_r+0x72>
 80058c4:	463e      	mov	r6, r7
 80058c6:	4632      	mov	r2, r6
 80058c8:	4641      	mov	r1, r8
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	f000 faac 	bl	8005e28 <memmove>
 80058d0:	2000      	movs	r0, #0
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	1b9b      	subs	r3, r3, r6
 80058d6:	60a3      	str	r3, [r4, #8]
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	4433      	add	r3, r6
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	462a      	mov	r2, r5
 80058e4:	f000 fae6 	bl	8005eb4 <_realloc_r>
 80058e8:	4606      	mov	r6, r0
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d1e0      	bne.n	80058b0 <__ssputs_r+0x5c>
 80058ee:	4650      	mov	r0, sl
 80058f0:	6921      	ldr	r1, [r4, #16]
 80058f2:	f7ff feb9 	bl	8005668 <_free_r>
 80058f6:	230c      	movs	r3, #12
 80058f8:	f8ca 3000 	str.w	r3, [sl]
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	e7e9      	b.n	80058de <__ssputs_r+0x8a>
	...

0800590c <_svfiprintf_r>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	4698      	mov	r8, r3
 8005912:	898b      	ldrh	r3, [r1, #12]
 8005914:	4607      	mov	r7, r0
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	460d      	mov	r5, r1
 800591a:	4614      	mov	r4, r2
 800591c:	b09d      	sub	sp, #116	@ 0x74
 800591e:	d510      	bpl.n	8005942 <_svfiprintf_r+0x36>
 8005920:	690b      	ldr	r3, [r1, #16]
 8005922:	b973      	cbnz	r3, 8005942 <_svfiprintf_r+0x36>
 8005924:	2140      	movs	r1, #64	@ 0x40
 8005926:	f7ff ff09 	bl	800573c <_malloc_r>
 800592a:	6028      	str	r0, [r5, #0]
 800592c:	6128      	str	r0, [r5, #16]
 800592e:	b930      	cbnz	r0, 800593e <_svfiprintf_r+0x32>
 8005930:	230c      	movs	r3, #12
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005938:	b01d      	add	sp, #116	@ 0x74
 800593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593e:	2340      	movs	r3, #64	@ 0x40
 8005940:	616b      	str	r3, [r5, #20]
 8005942:	2300      	movs	r3, #0
 8005944:	9309      	str	r3, [sp, #36]	@ 0x24
 8005946:	2320      	movs	r3, #32
 8005948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800594c:	2330      	movs	r3, #48	@ 0x30
 800594e:	f04f 0901 	mov.w	r9, #1
 8005952:	f8cd 800c 	str.w	r8, [sp, #12]
 8005956:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005af0 <_svfiprintf_r+0x1e4>
 800595a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800595e:	4623      	mov	r3, r4
 8005960:	469a      	mov	sl, r3
 8005962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005966:	b10a      	cbz	r2, 800596c <_svfiprintf_r+0x60>
 8005968:	2a25      	cmp	r2, #37	@ 0x25
 800596a:	d1f9      	bne.n	8005960 <_svfiprintf_r+0x54>
 800596c:	ebba 0b04 	subs.w	fp, sl, r4
 8005970:	d00b      	beq.n	800598a <_svfiprintf_r+0x7e>
 8005972:	465b      	mov	r3, fp
 8005974:	4622      	mov	r2, r4
 8005976:	4629      	mov	r1, r5
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ff6b 	bl	8005854 <__ssputs_r>
 800597e:	3001      	adds	r0, #1
 8005980:	f000 80a7 	beq.w	8005ad2 <_svfiprintf_r+0x1c6>
 8005984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005986:	445a      	add	r2, fp
 8005988:	9209      	str	r2, [sp, #36]	@ 0x24
 800598a:	f89a 3000 	ldrb.w	r3, [sl]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 809f 	beq.w	8005ad2 <_svfiprintf_r+0x1c6>
 8005994:	2300      	movs	r3, #0
 8005996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800599a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800599e:	f10a 0a01 	add.w	sl, sl, #1
 80059a2:	9304      	str	r3, [sp, #16]
 80059a4:	9307      	str	r3, [sp, #28]
 80059a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80059ac:	4654      	mov	r4, sl
 80059ae:	2205      	movs	r2, #5
 80059b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b4:	484e      	ldr	r0, [pc, #312]	@ (8005af0 <_svfiprintf_r+0x1e4>)
 80059b6:	f000 fa61 	bl	8005e7c <memchr>
 80059ba:	9a04      	ldr	r2, [sp, #16]
 80059bc:	b9d8      	cbnz	r0, 80059f6 <_svfiprintf_r+0xea>
 80059be:	06d0      	lsls	r0, r2, #27
 80059c0:	bf44      	itt	mi
 80059c2:	2320      	movmi	r3, #32
 80059c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059c8:	0711      	lsls	r1, r2, #28
 80059ca:	bf44      	itt	mi
 80059cc:	232b      	movmi	r3, #43	@ 0x2b
 80059ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059d2:	f89a 3000 	ldrb.w	r3, [sl]
 80059d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059d8:	d015      	beq.n	8005a06 <_svfiprintf_r+0xfa>
 80059da:	4654      	mov	r4, sl
 80059dc:	2000      	movs	r0, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	9a07      	ldr	r2, [sp, #28]
 80059e4:	4621      	mov	r1, r4
 80059e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ea:	3b30      	subs	r3, #48	@ 0x30
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d94b      	bls.n	8005a88 <_svfiprintf_r+0x17c>
 80059f0:	b1b0      	cbz	r0, 8005a20 <_svfiprintf_r+0x114>
 80059f2:	9207      	str	r2, [sp, #28]
 80059f4:	e014      	b.n	8005a20 <_svfiprintf_r+0x114>
 80059f6:	eba0 0308 	sub.w	r3, r0, r8
 80059fa:	fa09 f303 	lsl.w	r3, r9, r3
 80059fe:	4313      	orrs	r3, r2
 8005a00:	46a2      	mov	sl, r4
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	e7d2      	b.n	80059ac <_svfiprintf_r+0xa0>
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	1d19      	adds	r1, r3, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	9103      	str	r1, [sp, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfbb      	ittet	lt
 8005a12:	425b      	neglt	r3, r3
 8005a14:	f042 0202 	orrlt.w	r2, r2, #2
 8005a18:	9307      	strge	r3, [sp, #28]
 8005a1a:	9307      	strlt	r3, [sp, #28]
 8005a1c:	bfb8      	it	lt
 8005a1e:	9204      	strlt	r2, [sp, #16]
 8005a20:	7823      	ldrb	r3, [r4, #0]
 8005a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a24:	d10a      	bne.n	8005a3c <_svfiprintf_r+0x130>
 8005a26:	7863      	ldrb	r3, [r4, #1]
 8005a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a2a:	d132      	bne.n	8005a92 <_svfiprintf_r+0x186>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	3402      	adds	r4, #2
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	9203      	str	r2, [sp, #12]
 8005a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005af4 <_svfiprintf_r+0x1e8>
 8005a40:	2203      	movs	r2, #3
 8005a42:	4650      	mov	r0, sl
 8005a44:	7821      	ldrb	r1, [r4, #0]
 8005a46:	f000 fa19 	bl	8005e7c <memchr>
 8005a4a:	b138      	cbz	r0, 8005a5c <_svfiprintf_r+0x150>
 8005a4c:	2240      	movs	r2, #64	@ 0x40
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	eba0 000a 	sub.w	r0, r0, sl
 8005a54:	4082      	lsls	r2, r0
 8005a56:	4313      	orrs	r3, r2
 8005a58:	3401      	adds	r4, #1
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a60:	2206      	movs	r2, #6
 8005a62:	4825      	ldr	r0, [pc, #148]	@ (8005af8 <_svfiprintf_r+0x1ec>)
 8005a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a68:	f000 fa08 	bl	8005e7c <memchr>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d036      	beq.n	8005ade <_svfiprintf_r+0x1d2>
 8005a70:	4b22      	ldr	r3, [pc, #136]	@ (8005afc <_svfiprintf_r+0x1f0>)
 8005a72:	bb1b      	cbnz	r3, 8005abc <_svfiprintf_r+0x1b0>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	3307      	adds	r3, #7
 8005a78:	f023 0307 	bic.w	r3, r3, #7
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a82:	4433      	add	r3, r6
 8005a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a86:	e76a      	b.n	800595e <_svfiprintf_r+0x52>
 8005a88:	460c      	mov	r4, r1
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a90:	e7a8      	b.n	80059e4 <_svfiprintf_r+0xd8>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f04f 0c0a 	mov.w	ip, #10
 8005a98:	4619      	mov	r1, r3
 8005a9a:	3401      	adds	r4, #1
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa4:	3a30      	subs	r2, #48	@ 0x30
 8005aa6:	2a09      	cmp	r2, #9
 8005aa8:	d903      	bls.n	8005ab2 <_svfiprintf_r+0x1a6>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0c6      	beq.n	8005a3c <_svfiprintf_r+0x130>
 8005aae:	9105      	str	r1, [sp, #20]
 8005ab0:	e7c4      	b.n	8005a3c <_svfiprintf_r+0x130>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aba:	e7f0      	b.n	8005a9e <_svfiprintf_r+0x192>
 8005abc:	ab03      	add	r3, sp, #12
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	462a      	mov	r2, r5
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b00 <_svfiprintf_r+0x1f4>)
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	f3af 8000 	nop.w
 8005acc:	1c42      	adds	r2, r0, #1
 8005ace:	4606      	mov	r6, r0
 8005ad0:	d1d6      	bne.n	8005a80 <_svfiprintf_r+0x174>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	065b      	lsls	r3, r3, #25
 8005ad6:	f53f af2d 	bmi.w	8005934 <_svfiprintf_r+0x28>
 8005ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005adc:	e72c      	b.n	8005938 <_svfiprintf_r+0x2c>
 8005ade:	ab03      	add	r3, sp, #12
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <_svfiprintf_r+0x1f4>)
 8005ae8:	a904      	add	r1, sp, #16
 8005aea:	f000 f87d 	bl	8005be8 <_printf_i>
 8005aee:	e7ed      	b.n	8005acc <_svfiprintf_r+0x1c0>
 8005af0:	08007790 	.word	0x08007790
 8005af4:	08007796 	.word	0x08007796
 8005af8:	0800779a 	.word	0x0800779a
 8005afc:	00000000 	.word	0x00000000
 8005b00:	08005855 	.word	0x08005855

08005b04 <_printf_common>:
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	4616      	mov	r6, r2
 8005b0a:	4698      	mov	r8, r3
 8005b0c:	688a      	ldr	r2, [r1, #8]
 8005b0e:	690b      	ldr	r3, [r1, #16]
 8005b10:	4607      	mov	r7, r0
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bfb8      	it	lt
 8005b16:	4613      	movlt	r3, r2
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b1e:	460c      	mov	r4, r1
 8005b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b24:	b10a      	cbz	r2, 8005b2a <_printf_common+0x26>
 8005b26:	3301      	adds	r3, #1
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	0699      	lsls	r1, r3, #26
 8005b2e:	bf42      	ittt	mi
 8005b30:	6833      	ldrmi	r3, [r6, #0]
 8005b32:	3302      	addmi	r3, #2
 8005b34:	6033      	strmi	r3, [r6, #0]
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	f015 0506 	ands.w	r5, r5, #6
 8005b3c:	d106      	bne.n	8005b4c <_printf_common+0x48>
 8005b3e:	f104 0a19 	add.w	sl, r4, #25
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	6832      	ldr	r2, [r6, #0]
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	42ab      	cmp	r3, r5
 8005b4a:	dc2b      	bgt.n	8005ba4 <_printf_common+0xa0>
 8005b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	3b00      	subs	r3, #0
 8005b54:	bf18      	it	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	0692      	lsls	r2, r2, #26
 8005b5a:	d430      	bmi.n	8005bbe <_printf_common+0xba>
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b64:	47c8      	blx	r9
 8005b66:	3001      	adds	r0, #1
 8005b68:	d023      	beq.n	8005bb2 <_printf_common+0xae>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	bf14      	ite	ne
 8005b76:	2500      	movne	r5, #0
 8005b78:	6833      	ldreq	r3, [r6, #0]
 8005b7a:	f04f 0600 	mov.w	r6, #0
 8005b7e:	bf08      	it	eq
 8005b80:	68e5      	ldreq	r5, [r4, #12]
 8005b82:	f104 041a 	add.w	r4, r4, #26
 8005b86:	bf08      	it	eq
 8005b88:	1aed      	subeq	r5, r5, r3
 8005b8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b8e:	bf08      	it	eq
 8005b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b94:	4293      	cmp	r3, r2
 8005b96:	bfc4      	itt	gt
 8005b98:	1a9b      	subgt	r3, r3, r2
 8005b9a:	18ed      	addgt	r5, r5, r3
 8005b9c:	42b5      	cmp	r5, r6
 8005b9e:	d11a      	bne.n	8005bd6 <_printf_common+0xd2>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e008      	b.n	8005bb6 <_printf_common+0xb2>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c8      	blx	r9
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d103      	bne.n	8005bba <_printf_common+0xb6>
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bba:	3501      	adds	r5, #1
 8005bbc:	e7c1      	b.n	8005b42 <_printf_common+0x3e>
 8005bbe:	2030      	movs	r0, #48	@ 0x30
 8005bc0:	18e1      	adds	r1, r4, r3
 8005bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bcc:	4422      	add	r2, r4
 8005bce:	3302      	adds	r3, #2
 8005bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bd4:	e7c2      	b.n	8005b5c <_printf_common+0x58>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4641      	mov	r1, r8
 8005bdc:	4638      	mov	r0, r7
 8005bde:	47c8      	blx	r9
 8005be0:	3001      	adds	r0, #1
 8005be2:	d0e6      	beq.n	8005bb2 <_printf_common+0xae>
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7d9      	b.n	8005b9c <_printf_common+0x98>

08005be8 <_printf_i>:
 8005be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	7e0f      	ldrb	r7, [r1, #24]
 8005bee:	4691      	mov	r9, r2
 8005bf0:	2f78      	cmp	r7, #120	@ 0x78
 8005bf2:	4680      	mov	r8, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	469a      	mov	sl, r3
 8005bf8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bfe:	d807      	bhi.n	8005c10 <_printf_i+0x28>
 8005c00:	2f62      	cmp	r7, #98	@ 0x62
 8005c02:	d80a      	bhi.n	8005c1a <_printf_i+0x32>
 8005c04:	2f00      	cmp	r7, #0
 8005c06:	f000 80d3 	beq.w	8005db0 <_printf_i+0x1c8>
 8005c0a:	2f58      	cmp	r7, #88	@ 0x58
 8005c0c:	f000 80ba 	beq.w	8005d84 <_printf_i+0x19c>
 8005c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c18:	e03a      	b.n	8005c90 <_printf_i+0xa8>
 8005c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c1e:	2b15      	cmp	r3, #21
 8005c20:	d8f6      	bhi.n	8005c10 <_printf_i+0x28>
 8005c22:	a101      	add	r1, pc, #4	@ (adr r1, 8005c28 <_printf_i+0x40>)
 8005c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c11 	.word	0x08005c11
 8005c34:	08005c11 	.word	0x08005c11
 8005c38:	08005c11 	.word	0x08005c11
 8005c3c:	08005c11 	.word	0x08005c11
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c11 	.word	0x08005c11
 8005c48:	08005c11 	.word	0x08005c11
 8005c4c:	08005c11 	.word	0x08005c11
 8005c50:	08005c11 	.word	0x08005c11
 8005c54:	08005d97 	.word	0x08005d97
 8005c58:	08005cbf 	.word	0x08005cbf
 8005c5c:	08005d51 	.word	0x08005d51
 8005c60:	08005c11 	.word	0x08005c11
 8005c64:	08005c11 	.word	0x08005c11
 8005c68:	08005db9 	.word	0x08005db9
 8005c6c:	08005c11 	.word	0x08005c11
 8005c70:	08005cbf 	.word	0x08005cbf
 8005c74:	08005c11 	.word	0x08005c11
 8005c78:	08005c11 	.word	0x08005c11
 8005c7c:	08005d59 	.word	0x08005d59
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6032      	str	r2, [r6, #0]
 8005c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c90:	2301      	movs	r3, #1
 8005c92:	e09e      	b.n	8005dd2 <_printf_i+0x1ea>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	6031      	str	r1, [r6, #0]
 8005c9c:	0606      	lsls	r6, r0, #24
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_i+0xbc>
 8005ca0:	681d      	ldr	r5, [r3, #0]
 8005ca2:	e003      	b.n	8005cac <_printf_i+0xc4>
 8005ca4:	0645      	lsls	r5, r0, #25
 8005ca6:	d5fb      	bpl.n	8005ca0 <_printf_i+0xb8>
 8005ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	da03      	bge.n	8005cb8 <_printf_i+0xd0>
 8005cb0:	232d      	movs	r3, #45	@ 0x2d
 8005cb2:	426d      	negs	r5, r5
 8005cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb8:	230a      	movs	r3, #10
 8005cba:	4859      	ldr	r0, [pc, #356]	@ (8005e20 <_printf_i+0x238>)
 8005cbc:	e011      	b.n	8005ce2 <_printf_i+0xfa>
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	0608      	lsls	r0, r1, #24
 8005cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cc8:	d402      	bmi.n	8005cd0 <_printf_i+0xe8>
 8005cca:	0649      	lsls	r1, r1, #25
 8005ccc:	bf48      	it	mi
 8005cce:	b2ad      	uxthmi	r5, r5
 8005cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cd2:	6033      	str	r3, [r6, #0]
 8005cd4:	bf14      	ite	ne
 8005cd6:	230a      	movne	r3, #10
 8005cd8:	2308      	moveq	r3, #8
 8005cda:	4851      	ldr	r0, [pc, #324]	@ (8005e20 <_printf_i+0x238>)
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ce2:	6866      	ldr	r6, [r4, #4]
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	bfa8      	it	ge
 8005ce8:	6821      	ldrge	r1, [r4, #0]
 8005cea:	60a6      	str	r6, [r4, #8]
 8005cec:	bfa4      	itt	ge
 8005cee:	f021 0104 	bicge.w	r1, r1, #4
 8005cf2:	6021      	strge	r1, [r4, #0]
 8005cf4:	b90d      	cbnz	r5, 8005cfa <_printf_i+0x112>
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d04b      	beq.n	8005d92 <_printf_i+0x1aa>
 8005cfa:	4616      	mov	r6, r2
 8005cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d00:	fb03 5711 	mls	r7, r3, r1, r5
 8005d04:	5dc7      	ldrb	r7, [r0, r7]
 8005d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d0a:	462f      	mov	r7, r5
 8005d0c:	42bb      	cmp	r3, r7
 8005d0e:	460d      	mov	r5, r1
 8005d10:	d9f4      	bls.n	8005cfc <_printf_i+0x114>
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d10b      	bne.n	8005d2e <_printf_i+0x146>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	d508      	bpl.n	8005d2e <_printf_i+0x146>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	6861      	ldr	r1, [r4, #4]
 8005d20:	4299      	cmp	r1, r3
 8005d22:	bfde      	ittt	le
 8005d24:	2330      	movle	r3, #48	@ 0x30
 8005d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d2e:	1b92      	subs	r2, r2, r6
 8005d30:	6122      	str	r2, [r4, #16]
 8005d32:	464b      	mov	r3, r9
 8005d34:	4621      	mov	r1, r4
 8005d36:	4640      	mov	r0, r8
 8005d38:	f8cd a000 	str.w	sl, [sp]
 8005d3c:	aa03      	add	r2, sp, #12
 8005d3e:	f7ff fee1 	bl	8005b04 <_printf_common>
 8005d42:	3001      	adds	r0, #1
 8005d44:	d14a      	bne.n	8005ddc <_printf_i+0x1f4>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d4a:	b004      	add	sp, #16
 8005d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	2778      	movs	r7, #120	@ 0x78
 8005d5a:	4832      	ldr	r0, [pc, #200]	@ (8005e24 <_printf_i+0x23c>)
 8005d5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	061f      	lsls	r7, r3, #24
 8005d66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d6a:	d402      	bmi.n	8005d72 <_printf_i+0x18a>
 8005d6c:	065f      	lsls	r7, r3, #25
 8005d6e:	bf48      	it	mi
 8005d70:	b2ad      	uxthmi	r5, r5
 8005d72:	6031      	str	r1, [r6, #0]
 8005d74:	07d9      	lsls	r1, r3, #31
 8005d76:	bf44      	itt	mi
 8005d78:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7c:	6023      	strmi	r3, [r4, #0]
 8005d7e:	b11d      	cbz	r5, 8005d88 <_printf_i+0x1a0>
 8005d80:	2310      	movs	r3, #16
 8005d82:	e7ab      	b.n	8005cdc <_printf_i+0xf4>
 8005d84:	4826      	ldr	r0, [pc, #152]	@ (8005e20 <_printf_i+0x238>)
 8005d86:	e7e9      	b.n	8005d5c <_printf_i+0x174>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	e7f6      	b.n	8005d80 <_printf_i+0x198>
 8005d92:	4616      	mov	r6, r2
 8005d94:	e7bd      	b.n	8005d12 <_printf_i+0x12a>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	6825      	ldr	r5, [r4, #0]
 8005d9a:	1d18      	adds	r0, r3, #4
 8005d9c:	6961      	ldr	r1, [r4, #20]
 8005d9e:	6030      	str	r0, [r6, #0]
 8005da0:	062e      	lsls	r6, r5, #24
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	d501      	bpl.n	8005daa <_printf_i+0x1c2>
 8005da6:	6019      	str	r1, [r3, #0]
 8005da8:	e002      	b.n	8005db0 <_printf_i+0x1c8>
 8005daa:	0668      	lsls	r0, r5, #25
 8005dac:	d5fb      	bpl.n	8005da6 <_printf_i+0x1be>
 8005dae:	8019      	strh	r1, [r3, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	4616      	mov	r6, r2
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	e7bc      	b.n	8005d32 <_printf_i+0x14a>
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	2100      	movs	r1, #0
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	6032      	str	r2, [r6, #0]
 8005dc0:	681e      	ldr	r6, [r3, #0]
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	f000 f859 	bl	8005e7c <memchr>
 8005dca:	b108      	cbz	r0, 8005dd0 <_printf_i+0x1e8>
 8005dcc:	1b80      	subs	r0, r0, r6
 8005dce:	6060      	str	r0, [r4, #4]
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dda:	e7aa      	b.n	8005d32 <_printf_i+0x14a>
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4649      	mov	r1, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	47d0      	blx	sl
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0ad      	beq.n	8005d46 <_printf_i+0x15e>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	079b      	lsls	r3, r3, #30
 8005dee:	d413      	bmi.n	8005e18 <_printf_i+0x230>
 8005df0:	68e0      	ldr	r0, [r4, #12]
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	4298      	cmp	r0, r3
 8005df6:	bfb8      	it	lt
 8005df8:	4618      	movlt	r0, r3
 8005dfa:	e7a6      	b.n	8005d4a <_printf_i+0x162>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4649      	mov	r1, r9
 8005e02:	4640      	mov	r0, r8
 8005e04:	47d0      	blx	sl
 8005e06:	3001      	adds	r0, #1
 8005e08:	d09d      	beq.n	8005d46 <_printf_i+0x15e>
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	68e3      	ldr	r3, [r4, #12]
 8005e0e:	9903      	ldr	r1, [sp, #12]
 8005e10:	1a5b      	subs	r3, r3, r1
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	dcf2      	bgt.n	8005dfc <_printf_i+0x214>
 8005e16:	e7eb      	b.n	8005df0 <_printf_i+0x208>
 8005e18:	2500      	movs	r5, #0
 8005e1a:	f104 0619 	add.w	r6, r4, #25
 8005e1e:	e7f5      	b.n	8005e0c <_printf_i+0x224>
 8005e20:	080077a1 	.word	0x080077a1
 8005e24:	080077b2 	.word	0x080077b2

08005e28 <memmove>:
 8005e28:	4288      	cmp	r0, r1
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	eb01 0402 	add.w	r4, r1, r2
 8005e30:	d902      	bls.n	8005e38 <memmove+0x10>
 8005e32:	4284      	cmp	r4, r0
 8005e34:	4623      	mov	r3, r4
 8005e36:	d807      	bhi.n	8005e48 <memmove+0x20>
 8005e38:	1e43      	subs	r3, r0, #1
 8005e3a:	42a1      	cmp	r1, r4
 8005e3c:	d008      	beq.n	8005e50 <memmove+0x28>
 8005e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e46:	e7f8      	b.n	8005e3a <memmove+0x12>
 8005e48:	4601      	mov	r1, r0
 8005e4a:	4402      	add	r2, r0
 8005e4c:	428a      	cmp	r2, r1
 8005e4e:	d100      	bne.n	8005e52 <memmove+0x2a>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e5a:	e7f7      	b.n	8005e4c <memmove+0x24>

08005e5c <_sbrk_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4d05      	ldr	r5, [pc, #20]	@ (8005e78 <_sbrk_r+0x1c>)
 8005e62:	4604      	mov	r4, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	f001 fc22 	bl	80076b0 <_sbrk>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_sbrk_r+0x1a>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_sbrk_r+0x1a>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	20000ec8 	.word	0x20000ec8

08005e7c <memchr>:
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	b2c9      	uxtb	r1, r1
 8005e82:	4402      	add	r2, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	d101      	bne.n	8005e8e <memchr+0x12>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e003      	b.n	8005e96 <memchr+0x1a>
 8005e8e:	7804      	ldrb	r4, [r0, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	428c      	cmp	r4, r1
 8005e94:	d1f6      	bne.n	8005e84 <memchr+0x8>
 8005e96:	bd10      	pop	{r4, pc}

08005e98 <memcpy>:
 8005e98:	440a      	add	r2, r1
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ea0:	d100      	bne.n	8005ea4 <memcpy+0xc>
 8005ea2:	4770      	bx	lr
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb0:	d1f9      	bne.n	8005ea6 <memcpy+0xe>
 8005eb2:	bd10      	pop	{r4, pc}

08005eb4 <_realloc_r>:
 8005eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4615      	mov	r5, r2
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	b921      	cbnz	r1, 8005eca <_realloc_r+0x16>
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	f7ff bc39 	b.w	800573c <_malloc_r>
 8005eca:	b92a      	cbnz	r2, 8005ed8 <_realloc_r+0x24>
 8005ecc:	f7ff fbcc 	bl	8005668 <_free_r>
 8005ed0:	2400      	movs	r4, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed8:	f000 f81a 	bl	8005f10 <_malloc_usable_size_r>
 8005edc:	4285      	cmp	r5, r0
 8005ede:	4606      	mov	r6, r0
 8005ee0:	d802      	bhi.n	8005ee8 <_realloc_r+0x34>
 8005ee2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ee6:	d8f4      	bhi.n	8005ed2 <_realloc_r+0x1e>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4640      	mov	r0, r8
 8005eec:	f7ff fc26 	bl	800573c <_malloc_r>
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0ec      	beq.n	8005ed0 <_realloc_r+0x1c>
 8005ef6:	42b5      	cmp	r5, r6
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4621      	mov	r1, r4
 8005efc:	bf28      	it	cs
 8005efe:	4632      	movcs	r2, r6
 8005f00:	f7ff ffca 	bl	8005e98 <memcpy>
 8005f04:	4621      	mov	r1, r4
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7ff fbae 	bl	8005668 <_free_r>
 8005f0c:	463c      	mov	r4, r7
 8005f0e:	e7e0      	b.n	8005ed2 <_realloc_r+0x1e>

08005f10 <_malloc_usable_size_r>:
 8005f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f14:	1f18      	subs	r0, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bfbc      	itt	lt
 8005f1a:	580b      	ldrlt	r3, [r1, r0]
 8005f1c:	18c0      	addlt	r0, r0, r3
 8005f1e:	4770      	bx	lr

08005f20 <asin>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	4604      	mov	r4, r0
 8005f24:	460d      	mov	r5, r1
 8005f26:	f000 f997 	bl	8006258 <__ieee754_asin>
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	462b      	mov	r3, r5
 8005f32:	4620      	mov	r0, r4
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7fa fd69 	bl	8000a0c <__aeabi_dcmpun>
 8005f3a:	b988      	cbnz	r0, 8005f60 <asin+0x40>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f000 f8a4 	bl	800608c <fabs>
 8005f44:	2200      	movs	r2, #0
 8005f46:	4b08      	ldr	r3, [pc, #32]	@ (8005f68 <asin+0x48>)
 8005f48:	f7fa fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8005f4c:	b140      	cbz	r0, 8005f60 <asin+0x40>
 8005f4e:	f001 fba9 	bl	80076a4 <__errno>
 8005f52:	2321      	movs	r3, #33	@ 0x21
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	4805      	ldr	r0, [pc, #20]	@ (8005f6c <asin+0x4c>)
 8005f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f5c:	f000 b8a0 	b.w	80060a0 <nan>
 8005f60:	4630      	mov	r0, r6
 8005f62:	4639      	mov	r1, r7
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f66:	bf00      	nop
 8005f68:	3ff00000 	.word	0x3ff00000
 8005f6c:	08007795 	.word	0x08007795

08005f70 <atan2>:
 8005f70:	f000 bb6e 	b.w	8006650 <__ieee754_atan2>

08005f74 <pow>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4689      	mov	r9, r1
 8005f80:	f000 fc3a 	bl	80067f8 <__ieee754_pow>
 8005f84:	4622      	mov	r2, r4
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa fd3c 	bl	8000a0c <__aeabi_dcmpun>
 8005f94:	bbc8      	cbnz	r0, 800600a <pow+0x96>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	f7fa fd03 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa2:	b1b8      	cbz	r0, 8005fd4 <pow+0x60>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d141      	bne.n	8006038 <pow+0xc4>
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f000 f86c 	bl	8006094 <finite>
 8005fbc:	b328      	cbz	r0, 800600a <pow+0x96>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7fa fcf9 	bl	80009bc <__aeabi_dcmplt>
 8005fca:	b1f0      	cbz	r0, 800600a <pow+0x96>
 8005fcc:	f001 fb6a 	bl	80076a4 <__errno>
 8005fd0:	2322      	movs	r3, #34	@ 0x22
 8005fd2:	e019      	b.n	8006008 <pow+0x94>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	f000 f85c 	bl	8006094 <finite>
 8005fdc:	b9c8      	cbnz	r0, 8006012 <pow+0x9e>
 8005fde:	4640      	mov	r0, r8
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	f000 f857 	bl	8006094 <finite>
 8005fe6:	b1a0      	cbz	r0, 8006012 <pow+0x9e>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f000 f852 	bl	8006094 <finite>
 8005ff0:	b178      	cbz	r0, 8006012 <pow+0x9e>
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa fd07 	bl	8000a0c <__aeabi_dcmpun>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0e4      	beq.n	8005fcc <pow+0x58>
 8006002:	f001 fb4f 	bl	80076a4 <__errno>
 8006006:	2321      	movs	r3, #33	@ 0x21
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800601e:	2800      	cmp	r0, #0
 8006020:	d0f3      	beq.n	800600a <pow+0x96>
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f000 f835 	bl	8006094 <finite>
 800602a:	2800      	cmp	r0, #0
 800602c:	d0ed      	beq.n	800600a <pow+0x96>
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f000 f82f 	bl	8006094 <finite>
 8006036:	e7c8      	b.n	8005fca <pow+0x56>
 8006038:	2600      	movs	r6, #0
 800603a:	4f01      	ldr	r7, [pc, #4]	@ (8006040 <pow+0xcc>)
 800603c:	e7e5      	b.n	800600a <pow+0x96>
 800603e:	bf00      	nop
 8006040:	3ff00000 	.word	0x3ff00000

08006044 <sqrt>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	f000 f82f 	bl	80060ac <__ieee754_sqrt>
 800604e:	4632      	mov	r2, r6
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	463b      	mov	r3, r7
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa fcd7 	bl	8000a0c <__aeabi_dcmpun>
 800605e:	b990      	cbnz	r0, 8006086 <sqrt+0x42>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa fca8 	bl	80009bc <__aeabi_dcmplt>
 800606c:	b158      	cbz	r0, 8006086 <sqrt+0x42>
 800606e:	f001 fb19 	bl	80076a4 <__errno>
 8006072:	2321      	movs	r3, #33	@ 0x21
 8006074:	2200      	movs	r2, #0
 8006076:	6003      	str	r3, [r0, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	f7fa fb55 	bl	800072c <__aeabi_ddiv>
 8006082:	4604      	mov	r4, r0
 8006084:	460d      	mov	r5, r1
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800608c <fabs>:
 800608c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006090:	4619      	mov	r1, r3
 8006092:	4770      	bx	lr

08006094 <finite>:
 8006094:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006098:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800609c:	0fc0      	lsrs	r0, r0, #31
 800609e:	4770      	bx	lr

080060a0 <nan>:
 80060a0:	2000      	movs	r0, #0
 80060a2:	4901      	ldr	r1, [pc, #4]	@ (80060a8 <nan+0x8>)
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	7ff80000 	.word	0x7ff80000

080060ac <__ieee754_sqrt>:
 80060ac:	4a67      	ldr	r2, [pc, #412]	@ (800624c <__ieee754_sqrt+0x1a0>)
 80060ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b2:	438a      	bics	r2, r1
 80060b4:	4606      	mov	r6, r0
 80060b6:	460f      	mov	r7, r1
 80060b8:	460b      	mov	r3, r1
 80060ba:	4604      	mov	r4, r0
 80060bc:	d10e      	bne.n	80060dc <__ieee754_sqrt+0x30>
 80060be:	4602      	mov	r2, r0
 80060c0:	f7fa fa0a 	bl	80004d8 <__aeabi_dmul>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa f84e 	bl	800016c <__adddf3>
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	2900      	cmp	r1, #0
 80060de:	dc0c      	bgt.n	80060fa <__ieee754_sqrt+0x4e>
 80060e0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80060e4:	4302      	orrs	r2, r0
 80060e6:	d0f5      	beq.n	80060d4 <__ieee754_sqrt+0x28>
 80060e8:	b189      	cbz	r1, 800610e <__ieee754_sqrt+0x62>
 80060ea:	4602      	mov	r2, r0
 80060ec:	f7fa f83c 	bl	8000168 <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	f7fa fb1a 	bl	800072c <__aeabi_ddiv>
 80060f8:	e7ea      	b.n	80060d0 <__ieee754_sqrt+0x24>
 80060fa:	150a      	asrs	r2, r1, #20
 80060fc:	d115      	bne.n	800612a <__ieee754_sqrt+0x7e>
 80060fe:	2100      	movs	r1, #0
 8006100:	e009      	b.n	8006116 <__ieee754_sqrt+0x6a>
 8006102:	0ae3      	lsrs	r3, r4, #11
 8006104:	3a15      	subs	r2, #21
 8006106:	0564      	lsls	r4, r4, #21
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0fa      	beq.n	8006102 <__ieee754_sqrt+0x56>
 800610c:	e7f7      	b.n	80060fe <__ieee754_sqrt+0x52>
 800610e:	460a      	mov	r2, r1
 8006110:	e7fa      	b.n	8006108 <__ieee754_sqrt+0x5c>
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	3101      	adds	r1, #1
 8006116:	02d8      	lsls	r0, r3, #11
 8006118:	d5fb      	bpl.n	8006112 <__ieee754_sqrt+0x66>
 800611a:	1e48      	subs	r0, r1, #1
 800611c:	1a12      	subs	r2, r2, r0
 800611e:	f1c1 0020 	rsb	r0, r1, #32
 8006122:	fa24 f000 	lsr.w	r0, r4, r0
 8006126:	4303      	orrs	r3, r0
 8006128:	408c      	lsls	r4, r1
 800612a:	2600      	movs	r6, #0
 800612c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006130:	2116      	movs	r1, #22
 8006132:	07d2      	lsls	r2, r2, #31
 8006134:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006138:	4632      	mov	r2, r6
 800613a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006142:	bf5c      	itt	pl
 8006144:	005b      	lslpl	r3, r3, #1
 8006146:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800614a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800614e:	bf58      	it	pl
 8006150:	0064      	lslpl	r4, r4, #1
 8006152:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006156:	107f      	asrs	r7, r7, #1
 8006158:	0064      	lsls	r4, r4, #1
 800615a:	1815      	adds	r5, r2, r0
 800615c:	429d      	cmp	r5, r3
 800615e:	bfde      	ittt	le
 8006160:	182a      	addle	r2, r5, r0
 8006162:	1b5b      	suble	r3, r3, r5
 8006164:	1836      	addle	r6, r6, r0
 8006166:	0fe5      	lsrs	r5, r4, #31
 8006168:	3901      	subs	r1, #1
 800616a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800616e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006172:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006176:	d1f0      	bne.n	800615a <__ieee754_sqrt+0xae>
 8006178:	460d      	mov	r5, r1
 800617a:	f04f 0a20 	mov.w	sl, #32
 800617e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006182:	429a      	cmp	r2, r3
 8006184:	eb01 0c00 	add.w	ip, r1, r0
 8006188:	db02      	blt.n	8006190 <__ieee754_sqrt+0xe4>
 800618a:	d113      	bne.n	80061b4 <__ieee754_sqrt+0x108>
 800618c:	45a4      	cmp	ip, r4
 800618e:	d811      	bhi.n	80061b4 <__ieee754_sqrt+0x108>
 8006190:	f1bc 0f00 	cmp.w	ip, #0
 8006194:	eb0c 0100 	add.w	r1, ip, r0
 8006198:	da42      	bge.n	8006220 <__ieee754_sqrt+0x174>
 800619a:	2900      	cmp	r1, #0
 800619c:	db40      	blt.n	8006220 <__ieee754_sqrt+0x174>
 800619e:	f102 0e01 	add.w	lr, r2, #1
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	4672      	mov	r2, lr
 80061a6:	45a4      	cmp	ip, r4
 80061a8:	bf88      	it	hi
 80061aa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80061ae:	eba4 040c 	sub.w	r4, r4, ip
 80061b2:	4405      	add	r5, r0
 80061b4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80061b8:	f1ba 0a01 	subs.w	sl, sl, #1
 80061bc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80061c0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061c4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061c8:	d1db      	bne.n	8006182 <__ieee754_sqrt+0xd6>
 80061ca:	431c      	orrs	r4, r3
 80061cc:	d01a      	beq.n	8006204 <__ieee754_sqrt+0x158>
 80061ce:	4c20      	ldr	r4, [pc, #128]	@ (8006250 <__ieee754_sqrt+0x1a4>)
 80061d0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006254 <__ieee754_sqrt+0x1a8>
 80061d4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80061d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80061dc:	f7f9 ffc4 	bl	8000168 <__aeabi_dsub>
 80061e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7fa fbf0 	bl	80009d0 <__aeabi_dcmple>
 80061f0:	b140      	cbz	r0, 8006204 <__ieee754_sqrt+0x158>
 80061f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80061f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80061fa:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80061fe:	d111      	bne.n	8006224 <__ieee754_sqrt+0x178>
 8006200:	4655      	mov	r5, sl
 8006202:	3601      	adds	r6, #1
 8006204:	1072      	asrs	r2, r6, #1
 8006206:	086b      	lsrs	r3, r5, #1
 8006208:	07f1      	lsls	r1, r6, #31
 800620a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800620e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006212:	bf48      	it	mi
 8006214:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006218:	4618      	mov	r0, r3
 800621a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800621e:	e757      	b.n	80060d0 <__ieee754_sqrt+0x24>
 8006220:	4696      	mov	lr, r2
 8006222:	e7be      	b.n	80061a2 <__ieee754_sqrt+0xf6>
 8006224:	f7f9 ffa2 	bl	800016c <__adddf3>
 8006228:	e9d4 8900 	ldrd	r8, r9, [r4]
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa fbc2 	bl	80009bc <__aeabi_dcmplt>
 8006238:	b120      	cbz	r0, 8006244 <__ieee754_sqrt+0x198>
 800623a:	1ca8      	adds	r0, r5, #2
 800623c:	bf08      	it	eq
 800623e:	3601      	addeq	r6, #1
 8006240:	3502      	adds	r5, #2
 8006242:	e7df      	b.n	8006204 <__ieee754_sqrt+0x158>
 8006244:	1c6b      	adds	r3, r5, #1
 8006246:	f023 0501 	bic.w	r5, r3, #1
 800624a:	e7db      	b.n	8006204 <__ieee754_sqrt+0x158>
 800624c:	7ff00000 	.word	0x7ff00000
 8006250:	20000218 	.word	0x20000218
 8006254:	20000210 	.word	0x20000210

08006258 <__ieee754_asin>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4bc4      	ldr	r3, [pc, #784]	@ (8006570 <__ieee754_asin+0x318>)
 800625e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006262:	b087      	sub	sp, #28
 8006264:	429e      	cmp	r6, r3
 8006266:	4604      	mov	r4, r0
 8006268:	460d      	mov	r5, r1
 800626a:	9101      	str	r1, [sp, #4]
 800626c:	d929      	bls.n	80062c2 <__ieee754_asin+0x6a>
 800626e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8006272:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006276:	4306      	orrs	r6, r0
 8006278:	d114      	bne.n	80062a4 <__ieee754_asin+0x4c>
 800627a:	a3a3      	add	r3, pc, #652	@ (adr r3, 8006508 <__ieee754_asin+0x2b0>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006510 <__ieee754_asin+0x2b8>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa f921 	bl	80004d8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7f9 ff65 	bl	800016c <__adddf3>
 80062a2:	e007      	b.n	80062b4 <__ieee754_asin+0x5c>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	f7f9 ff5e 	bl	8000168 <__aeabi_dsub>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	f7fa fa3c 	bl	800072c <__aeabi_ddiv>
 80062b4:	4604      	mov	r4, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	b007      	add	sp, #28
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	4bac      	ldr	r3, [pc, #688]	@ (8006574 <__ieee754_asin+0x31c>)
 80062c4:	429e      	cmp	r6, r3
 80062c6:	d80e      	bhi.n	80062e6 <__ieee754_asin+0x8e>
 80062c8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80062cc:	f080 80ab 	bcs.w	8006426 <__ieee754_asin+0x1ce>
 80062d0:	a391      	add	r3, pc, #580	@ (adr r3, 8006518 <__ieee754_asin+0x2c0>)
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f7f9 ff49 	bl	800016c <__adddf3>
 80062da:	2200      	movs	r2, #0
 80062dc:	4ba6      	ldr	r3, [pc, #664]	@ (8006578 <__ieee754_asin+0x320>)
 80062de:	f7fa fb8b 	bl	80009f8 <__aeabi_dcmpgt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d1e8      	bne.n	80062b8 <__ieee754_asin+0x60>
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7ff fecf 	bl	800608c <fabs>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	2000      	movs	r0, #0
 80062f4:	49a0      	ldr	r1, [pc, #640]	@ (8006578 <__ieee754_asin+0x320>)
 80062f6:	f7f9 ff37 	bl	8000168 <__aeabi_dsub>
 80062fa:	2200      	movs	r2, #0
 80062fc:	4b9f      	ldr	r3, [pc, #636]	@ (800657c <__ieee754_asin+0x324>)
 80062fe:	f7fa f8eb 	bl	80004d8 <__aeabi_dmul>
 8006302:	a387      	add	r3, pc, #540	@ (adr r3, 8006520 <__ieee754_asin+0x2c8>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	a385      	add	r3, pc, #532	@ (adr r3, 8006528 <__ieee754_asin+0x2d0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f7f9 ff29 	bl	800016c <__adddf3>
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	f7fa f8db 	bl	80004d8 <__aeabi_dmul>
 8006322:	a383      	add	r3, pc, #524	@ (adr r3, 8006530 <__ieee754_asin+0x2d8>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7f9 ff1e 	bl	8000168 <__aeabi_dsub>
 800632c:	4622      	mov	r2, r4
 800632e:	462b      	mov	r3, r5
 8006330:	f7fa f8d2 	bl	80004d8 <__aeabi_dmul>
 8006334:	a380      	add	r3, pc, #512	@ (adr r3, 8006538 <__ieee754_asin+0x2e0>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff17 	bl	800016c <__adddf3>
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	f7fa f8c9 	bl	80004d8 <__aeabi_dmul>
 8006346:	a37e      	add	r3, pc, #504	@ (adr r3, 8006540 <__ieee754_asin+0x2e8>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	4622      	mov	r2, r4
 8006352:	462b      	mov	r3, r5
 8006354:	f7fa f8c0 	bl	80004d8 <__aeabi_dmul>
 8006358:	a37b      	add	r3, pc, #492	@ (adr r3, 8006548 <__ieee754_asin+0x2f0>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7f9 ff05 	bl	800016c <__adddf3>
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	f7fa f8b7 	bl	80004d8 <__aeabi_dmul>
 800636a:	a379      	add	r3, pc, #484	@ (adr r3, 8006550 <__ieee754_asin+0x2f8>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f7fa f8ae 	bl	80004d8 <__aeabi_dmul>
 800637c:	a376      	add	r3, pc, #472	@ (adr r3, 8006558 <__ieee754_asin+0x300>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7f9 fef1 	bl	8000168 <__aeabi_dsub>
 8006386:	4622      	mov	r2, r4
 8006388:	462b      	mov	r3, r5
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	a374      	add	r3, pc, #464	@ (adr r3, 8006560 <__ieee754_asin+0x308>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7f9 feea 	bl	800016c <__adddf3>
 8006398:	4622      	mov	r2, r4
 800639a:	462b      	mov	r3, r5
 800639c:	f7fa f89c 	bl	80004d8 <__aeabi_dmul>
 80063a0:	a371      	add	r3, pc, #452	@ (adr r3, 8006568 <__ieee754_asin+0x310>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 fedf 	bl	8000168 <__aeabi_dsub>
 80063aa:	4622      	mov	r2, r4
 80063ac:	462b      	mov	r3, r5
 80063ae:	f7fa f893 	bl	80004d8 <__aeabi_dmul>
 80063b2:	4b71      	ldr	r3, [pc, #452]	@ (8006578 <__ieee754_asin+0x320>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	f7f9 fed9 	bl	800016c <__adddf3>
 80063ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063be:	4620      	mov	r0, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	f7ff fe73 	bl	80060ac <__ieee754_sqrt>
 80063c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006580 <__ieee754_asin+0x328>)
 80063c8:	4682      	mov	sl, r0
 80063ca:	429e      	cmp	r6, r3
 80063cc:	468b      	mov	fp, r1
 80063ce:	f240 80d9 	bls.w	8006584 <__ieee754_asin+0x32c>
 80063d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063da:	f7fa f9a7 	bl	800072c <__aeabi_ddiv>
 80063de:	4652      	mov	r2, sl
 80063e0:	465b      	mov	r3, fp
 80063e2:	f7fa f879 	bl	80004d8 <__aeabi_dmul>
 80063e6:	4652      	mov	r2, sl
 80063e8:	465b      	mov	r3, fp
 80063ea:	f7f9 febf 	bl	800016c <__adddf3>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	f7f9 febb 	bl	800016c <__adddf3>
 80063f6:	a346      	add	r3, pc, #280	@ (adr r3, 8006510 <__ieee754_asin+0x2b8>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 feb4 	bl	8000168 <__aeabi_dsub>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	a140      	add	r1, pc, #256	@ (adr r1, 8006508 <__ieee754_asin+0x2b0>)
 8006406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640a:	f7f9 fead 	bl	8000168 <__aeabi_dsub>
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	4604      	mov	r4, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfdc      	itt	le
 8006416:	4602      	movle	r2, r0
 8006418:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800641c:	460d      	mov	r5, r1
 800641e:	bfdc      	itt	le
 8006420:	4614      	movle	r4, r2
 8006422:	461d      	movle	r5, r3
 8006424:	e748      	b.n	80062b8 <__ieee754_asin+0x60>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	f7fa f855 	bl	80004d8 <__aeabi_dmul>
 800642e:	a33c      	add	r3, pc, #240	@ (adr r3, 8006520 <__ieee754_asin+0x2c8>)
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	4606      	mov	r6, r0
 8006436:	460f      	mov	r7, r1
 8006438:	f7fa f84e 	bl	80004d8 <__aeabi_dmul>
 800643c:	a33a      	add	r3, pc, #232	@ (adr r3, 8006528 <__ieee754_asin+0x2d0>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7f9 fe93 	bl	800016c <__adddf3>
 8006446:	4632      	mov	r2, r6
 8006448:	463b      	mov	r3, r7
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	a338      	add	r3, pc, #224	@ (adr r3, 8006530 <__ieee754_asin+0x2d8>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f7f9 fe88 	bl	8000168 <__aeabi_dsub>
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	f7fa f83c 	bl	80004d8 <__aeabi_dmul>
 8006460:	a335      	add	r3, pc, #212	@ (adr r3, 8006538 <__ieee754_asin+0x2e0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7f9 fe81 	bl	800016c <__adddf3>
 800646a:	4632      	mov	r2, r6
 800646c:	463b      	mov	r3, r7
 800646e:	f7fa f833 	bl	80004d8 <__aeabi_dmul>
 8006472:	a333      	add	r3, pc, #204	@ (adr r3, 8006540 <__ieee754_asin+0x2e8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7f9 fe76 	bl	8000168 <__aeabi_dsub>
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	f7fa f82a 	bl	80004d8 <__aeabi_dmul>
 8006484:	a330      	add	r3, pc, #192	@ (adr r3, 8006548 <__ieee754_asin+0x2f0>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7f9 fe6f 	bl	800016c <__adddf3>
 800648e:	4632      	mov	r2, r6
 8006490:	463b      	mov	r3, r7
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	a32e      	add	r3, pc, #184	@ (adr r3, 8006550 <__ieee754_asin+0x2f8>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7fa f818 	bl	80004d8 <__aeabi_dmul>
 80064a8:	a32b      	add	r3, pc, #172	@ (adr r3, 8006558 <__ieee754_asin+0x300>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7f9 fe5b 	bl	8000168 <__aeabi_dsub>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	f7fa f80f 	bl	80004d8 <__aeabi_dmul>
 80064ba:	a329      	add	r3, pc, #164	@ (adr r3, 8006560 <__ieee754_asin+0x308>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 fe54 	bl	800016c <__adddf3>
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	f7fa f806 	bl	80004d8 <__aeabi_dmul>
 80064cc:	a326      	add	r3, pc, #152	@ (adr r3, 8006568 <__ieee754_asin+0x310>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7f9 fe49 	bl	8000168 <__aeabi_dsub>
 80064d6:	4632      	mov	r2, r6
 80064d8:	463b      	mov	r3, r7
 80064da:	f7f9 fffd 	bl	80004d8 <__aeabi_dmul>
 80064de:	2200      	movs	r2, #0
 80064e0:	4b25      	ldr	r3, [pc, #148]	@ (8006578 <__ieee754_asin+0x320>)
 80064e2:	f7f9 fe43 	bl	800016c <__adddf3>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4640      	mov	r0, r8
 80064ec:	4649      	mov	r1, r9
 80064ee:	f7fa f91d 	bl	800072c <__aeabi_ddiv>
 80064f2:	4622      	mov	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	f7f9 ffef 	bl	80004d8 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	e6cc      	b.n	800629e <__ieee754_asin+0x46>
 8006504:	f3af 8000 	nop.w
 8006508:	54442d18 	.word	0x54442d18
 800650c:	3ff921fb 	.word	0x3ff921fb
 8006510:	33145c07 	.word	0x33145c07
 8006514:	3c91a626 	.word	0x3c91a626
 8006518:	8800759c 	.word	0x8800759c
 800651c:	7e37e43c 	.word	0x7e37e43c
 8006520:	0dfdf709 	.word	0x0dfdf709
 8006524:	3f023de1 	.word	0x3f023de1
 8006528:	7501b288 	.word	0x7501b288
 800652c:	3f49efe0 	.word	0x3f49efe0
 8006530:	b5688f3b 	.word	0xb5688f3b
 8006534:	3fa48228 	.word	0x3fa48228
 8006538:	0e884455 	.word	0x0e884455
 800653c:	3fc9c155 	.word	0x3fc9c155
 8006540:	03eb6f7d 	.word	0x03eb6f7d
 8006544:	3fd4d612 	.word	0x3fd4d612
 8006548:	55555555 	.word	0x55555555
 800654c:	3fc55555 	.word	0x3fc55555
 8006550:	b12e9282 	.word	0xb12e9282
 8006554:	3fb3b8c5 	.word	0x3fb3b8c5
 8006558:	1b8d0159 	.word	0x1b8d0159
 800655c:	3fe6066c 	.word	0x3fe6066c
 8006560:	9c598ac8 	.word	0x9c598ac8
 8006564:	40002ae5 	.word	0x40002ae5
 8006568:	1c8a2d4b 	.word	0x1c8a2d4b
 800656c:	40033a27 	.word	0x40033a27
 8006570:	3fefffff 	.word	0x3fefffff
 8006574:	3fdfffff 	.word	0x3fdfffff
 8006578:	3ff00000 	.word	0x3ff00000
 800657c:	3fe00000 	.word	0x3fe00000
 8006580:	3fef3332 	.word	0x3fef3332
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	f7f9 fdf0 	bl	800016c <__adddf3>
 800658c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006598:	f7fa f8c8 	bl	800072c <__aeabi_ddiv>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7f9 ff98 	bl	80004d8 <__aeabi_dmul>
 80065a8:	f04f 0800 	mov.w	r8, #0
 80065ac:	4606      	mov	r6, r0
 80065ae:	460f      	mov	r7, r1
 80065b0:	4642      	mov	r2, r8
 80065b2:	465b      	mov	r3, fp
 80065b4:	4640      	mov	r0, r8
 80065b6:	4659      	mov	r1, fp
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4620      	mov	r0, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	4642      	mov	r2, r8
 80065ca:	4604      	mov	r4, r0
 80065cc:	460d      	mov	r5, r1
 80065ce:	465b      	mov	r3, fp
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	f7f9 fdca 	bl	800016c <__adddf3>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7fa f8a4 	bl	800072c <__aeabi_ddiv>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	f7f9 fdc0 	bl	800016c <__adddf3>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	a113      	add	r1, pc, #76	@ (adr r1, 8006640 <__ieee754_asin+0x3e8>)
 80065f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065f6:	f7f9 fdb7 	bl	8000168 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7f9 fdb1 	bl	8000168 <__aeabi_dsub>
 8006606:	4642      	mov	r2, r8
 8006608:	4604      	mov	r4, r0
 800660a:	460d      	mov	r5, r1
 800660c:	465b      	mov	r3, fp
 800660e:	4640      	mov	r0, r8
 8006610:	4659      	mov	r1, fp
 8006612:	f7f9 fdab 	bl	800016c <__adddf3>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006648 <__ieee754_asin+0x3f0>)
 800661c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006620:	f7f9 fda2 	bl	8000168 <__aeabi_dsub>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fd9c 	bl	8000168 <__aeabi_dsub>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	a104      	add	r1, pc, #16	@ (adr r1, 8006648 <__ieee754_asin+0x3f0>)
 8006636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800663a:	e6e6      	b.n	800640a <__ieee754_asin+0x1b2>
 800663c:	f3af 8000 	nop.w
 8006640:	33145c07 	.word	0x33145c07
 8006644:	3c91a626 	.word	0x3c91a626
 8006648:	54442d18 	.word	0x54442d18
 800664c:	3fe921fb 	.word	0x3fe921fb

08006650 <__ieee754_atan2>:
 8006650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	4617      	mov	r7, r2
 8006656:	4690      	mov	r8, r2
 8006658:	4699      	mov	r9, r3
 800665a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800665e:	427b      	negs	r3, r7
 8006660:	f8df a184 	ldr.w	sl, [pc, #388]	@ 80067e8 <__ieee754_atan2+0x198>
 8006664:	433b      	orrs	r3, r7
 8006666:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800666a:	4553      	cmp	r3, sl
 800666c:	4604      	mov	r4, r0
 800666e:	460d      	mov	r5, r1
 8006670:	d809      	bhi.n	8006686 <__ieee754_atan2+0x36>
 8006672:	4246      	negs	r6, r0
 8006674:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006678:	4306      	orrs	r6, r0
 800667a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800667e:	4556      	cmp	r6, sl
 8006680:	468e      	mov	lr, r1
 8006682:	4683      	mov	fp, r0
 8006684:	d908      	bls.n	8006698 <__ieee754_atan2+0x48>
 8006686:	4642      	mov	r2, r8
 8006688:	464b      	mov	r3, r9
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7f9 fd6d 	bl	800016c <__adddf3>
 8006692:	4604      	mov	r4, r0
 8006694:	460d      	mov	r5, r1
 8006696:	e016      	b.n	80066c6 <__ieee754_atan2+0x76>
 8006698:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800669c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80066a0:	433e      	orrs	r6, r7
 80066a2:	d103      	bne.n	80066ac <__ieee754_atan2+0x5c>
 80066a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	f000 bdce 	b.w	8007248 <atan>
 80066ac:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80066b0:	f006 0602 	and.w	r6, r6, #2
 80066b4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80066b8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80066bc:	d107      	bne.n	80066ce <__ieee754_atan2+0x7e>
 80066be:	2e02      	cmp	r6, #2
 80066c0:	d064      	beq.n	800678c <__ieee754_atan2+0x13c>
 80066c2:	2e03      	cmp	r6, #3
 80066c4:	d066      	beq.n	8006794 <__ieee754_atan2+0x144>
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	4317      	orrs	r7, r2
 80066d0:	d106      	bne.n	80066e0 <__ieee754_atan2+0x90>
 80066d2:	f1be 0f00 	cmp.w	lr, #0
 80066d6:	da68      	bge.n	80067aa <__ieee754_atan2+0x15a>
 80066d8:	a537      	add	r5, pc, #220	@ (adr r5, 80067b8 <__ieee754_atan2+0x168>)
 80066da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066de:	e7f2      	b.n	80066c6 <__ieee754_atan2+0x76>
 80066e0:	4552      	cmp	r2, sl
 80066e2:	d10f      	bne.n	8006704 <__ieee754_atan2+0xb4>
 80066e4:	4293      	cmp	r3, r2
 80066e6:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 80066ea:	d107      	bne.n	80066fc <__ieee754_atan2+0xac>
 80066ec:	2e02      	cmp	r6, #2
 80066ee:	d855      	bhi.n	800679c <__ieee754_atan2+0x14c>
 80066f0:	4b3e      	ldr	r3, [pc, #248]	@ (80067ec <__ieee754_atan2+0x19c>)
 80066f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80066fa:	e7e4      	b.n	80066c6 <__ieee754_atan2+0x76>
 80066fc:	2e02      	cmp	r6, #2
 80066fe:	d851      	bhi.n	80067a4 <__ieee754_atan2+0x154>
 8006700:	4b3b      	ldr	r3, [pc, #236]	@ (80067f0 <__ieee754_atan2+0x1a0>)
 8006702:	e7f6      	b.n	80066f2 <__ieee754_atan2+0xa2>
 8006704:	4553      	cmp	r3, sl
 8006706:	d0e4      	beq.n	80066d2 <__ieee754_atan2+0x82>
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800670e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006712:	da21      	bge.n	8006758 <__ieee754_atan2+0x108>
 8006714:	f1b9 0f00 	cmp.w	r9, #0
 8006718:	da01      	bge.n	800671e <__ieee754_atan2+0xce>
 800671a:	323c      	adds	r2, #60	@ 0x3c
 800671c:	db20      	blt.n	8006760 <__ieee754_atan2+0x110>
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7fa f801 	bl	800072c <__aeabi_ddiv>
 800672a:	f7ff fcaf 	bl	800608c <fabs>
 800672e:	f000 fd8b 	bl	8007248 <atan>
 8006732:	4604      	mov	r4, r0
 8006734:	460d      	mov	r5, r1
 8006736:	2e01      	cmp	r6, #1
 8006738:	d015      	beq.n	8006766 <__ieee754_atan2+0x116>
 800673a:	2e02      	cmp	r6, #2
 800673c:	d017      	beq.n	800676e <__ieee754_atan2+0x11e>
 800673e:	2e00      	cmp	r6, #0
 8006740:	d0c1      	beq.n	80066c6 <__ieee754_atan2+0x76>
 8006742:	a31f      	add	r3, pc, #124	@ (adr r3, 80067c0 <__ieee754_atan2+0x170>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	4620      	mov	r0, r4
 800674a:	4629      	mov	r1, r5
 800674c:	f7f9 fd0c 	bl	8000168 <__aeabi_dsub>
 8006750:	a31d      	add	r3, pc, #116	@ (adr r3, 80067c8 <__ieee754_atan2+0x178>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e016      	b.n	8006786 <__ieee754_atan2+0x136>
 8006758:	a51d      	add	r5, pc, #116	@ (adr r5, 80067d0 <__ieee754_atan2+0x180>)
 800675a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800675e:	e7ea      	b.n	8006736 <__ieee754_atan2+0xe6>
 8006760:	2400      	movs	r4, #0
 8006762:	2500      	movs	r5, #0
 8006764:	e7e7      	b.n	8006736 <__ieee754_atan2+0xe6>
 8006766:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800676a:	461d      	mov	r5, r3
 800676c:	e7ab      	b.n	80066c6 <__ieee754_atan2+0x76>
 800676e:	a314      	add	r3, pc, #80	@ (adr r3, 80067c0 <__ieee754_atan2+0x170>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 fcf6 	bl	8000168 <__aeabi_dsub>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	a111      	add	r1, pc, #68	@ (adr r1, 80067c8 <__ieee754_atan2+0x178>)
 8006782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006786:	f7f9 fcef 	bl	8000168 <__aeabi_dsub>
 800678a:	e782      	b.n	8006692 <__ieee754_atan2+0x42>
 800678c:	a50e      	add	r5, pc, #56	@ (adr r5, 80067c8 <__ieee754_atan2+0x178>)
 800678e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006792:	e798      	b.n	80066c6 <__ieee754_atan2+0x76>
 8006794:	a510      	add	r5, pc, #64	@ (adr r5, 80067d8 <__ieee754_atan2+0x188>)
 8006796:	e9d5 4500 	ldrd	r4, r5, [r5]
 800679a:	e794      	b.n	80066c6 <__ieee754_atan2+0x76>
 800679c:	a510      	add	r5, pc, #64	@ (adr r5, 80067e0 <__ieee754_atan2+0x190>)
 800679e:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067a2:	e790      	b.n	80066c6 <__ieee754_atan2+0x76>
 80067a4:	2400      	movs	r4, #0
 80067a6:	2500      	movs	r5, #0
 80067a8:	e78d      	b.n	80066c6 <__ieee754_atan2+0x76>
 80067aa:	a509      	add	r5, pc, #36	@ (adr r5, 80067d0 <__ieee754_atan2+0x180>)
 80067ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067b0:	e789      	b.n	80066c6 <__ieee754_atan2+0x76>
 80067b2:	bf00      	nop
 80067b4:	f3af 8000 	nop.w
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	bff921fb 	.word	0xbff921fb
 80067c0:	33145c07 	.word	0x33145c07
 80067c4:	3ca1a626 	.word	0x3ca1a626
 80067c8:	54442d18 	.word	0x54442d18
 80067cc:	400921fb 	.word	0x400921fb
 80067d0:	54442d18 	.word	0x54442d18
 80067d4:	3ff921fb 	.word	0x3ff921fb
 80067d8:	54442d18 	.word	0x54442d18
 80067dc:	c00921fb 	.word	0xc00921fb
 80067e0:	54442d18 	.word	0x54442d18
 80067e4:	3fe921fb 	.word	0x3fe921fb
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	080077e0 	.word	0x080077e0
 80067f0:	080077c8 	.word	0x080077c8
 80067f4:	00000000 	.word	0x00000000

080067f8 <__ieee754_pow>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	b091      	sub	sp, #68	@ 0x44
 80067fe:	e9cd 2300 	strd	r2, r3, [sp]
 8006802:	468b      	mov	fp, r1
 8006804:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006808:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800680c:	4682      	mov	sl, r0
 800680e:	ea57 0001 	orrs.w	r0, r7, r1
 8006812:	d112      	bne.n	800683a <__ieee754_pow+0x42>
 8006814:	4653      	mov	r3, sl
 8006816:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800681a:	18db      	adds	r3, r3, r3
 800681c:	4152      	adcs	r2, r2
 800681e:	4298      	cmp	r0, r3
 8006820:	4b91      	ldr	r3, [pc, #580]	@ (8006a68 <__ieee754_pow+0x270>)
 8006822:	4193      	sbcs	r3, r2
 8006824:	f080 84ce 	bcs.w	80071c4 <__ieee754_pow+0x9cc>
 8006828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800682c:	4650      	mov	r0, sl
 800682e:	4659      	mov	r1, fp
 8006830:	f7f9 fc9c 	bl	800016c <__adddf3>
 8006834:	b011      	add	sp, #68	@ 0x44
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	4b8c      	ldr	r3, [pc, #560]	@ (8006a6c <__ieee754_pow+0x274>)
 800683c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006840:	429e      	cmp	r6, r3
 8006842:	465d      	mov	r5, fp
 8006844:	46d1      	mov	r9, sl
 8006846:	d807      	bhi.n	8006858 <__ieee754_pow+0x60>
 8006848:	d102      	bne.n	8006850 <__ieee754_pow+0x58>
 800684a:	f1ba 0f00 	cmp.w	sl, #0
 800684e:	d1eb      	bne.n	8006828 <__ieee754_pow+0x30>
 8006850:	429f      	cmp	r7, r3
 8006852:	d801      	bhi.n	8006858 <__ieee754_pow+0x60>
 8006854:	d10f      	bne.n	8006876 <__ieee754_pow+0x7e>
 8006856:	b171      	cbz	r1, 8006876 <__ieee754_pow+0x7e>
 8006858:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800685c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006860:	ea55 0509 	orrs.w	r5, r5, r9
 8006864:	d1e0      	bne.n	8006828 <__ieee754_pow+0x30>
 8006866:	e9dd 3200 	ldrd	r3, r2, [sp]
 800686a:	18db      	adds	r3, r3, r3
 800686c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006870:	4152      	adcs	r2, r2
 8006872:	429d      	cmp	r5, r3
 8006874:	e7d4      	b.n	8006820 <__ieee754_pow+0x28>
 8006876:	2d00      	cmp	r5, #0
 8006878:	4633      	mov	r3, r6
 800687a:	da39      	bge.n	80068f0 <__ieee754_pow+0xf8>
 800687c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a70 <__ieee754_pow+0x278>)
 800687e:	4297      	cmp	r7, r2
 8006880:	d84e      	bhi.n	8006920 <__ieee754_pow+0x128>
 8006882:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006886:	4297      	cmp	r7, r2
 8006888:	f240 84ab 	bls.w	80071e2 <__ieee754_pow+0x9ea>
 800688c:	153a      	asrs	r2, r7, #20
 800688e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006892:	2a14      	cmp	r2, #20
 8006894:	dd0f      	ble.n	80068b6 <__ieee754_pow+0xbe>
 8006896:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800689a:	fa21 f402 	lsr.w	r4, r1, r2
 800689e:	fa04 f202 	lsl.w	r2, r4, r2
 80068a2:	428a      	cmp	r2, r1
 80068a4:	f040 849d 	bne.w	80071e2 <__ieee754_pow+0x9ea>
 80068a8:	f004 0401 	and.w	r4, r4, #1
 80068ac:	f1c4 0402 	rsb	r4, r4, #2
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d15a      	bne.n	800696a <__ieee754_pow+0x172>
 80068b4:	e00e      	b.n	80068d4 <__ieee754_pow+0xdc>
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d156      	bne.n	8006968 <__ieee754_pow+0x170>
 80068ba:	f1c2 0214 	rsb	r2, r2, #20
 80068be:	fa47 f402 	asr.w	r4, r7, r2
 80068c2:	fa04 f202 	lsl.w	r2, r4, r2
 80068c6:	42ba      	cmp	r2, r7
 80068c8:	f040 8488 	bne.w	80071dc <__ieee754_pow+0x9e4>
 80068cc:	f004 0401 	and.w	r4, r4, #1
 80068d0:	f1c4 0402 	rsb	r4, r4, #2
 80068d4:	4a67      	ldr	r2, [pc, #412]	@ (8006a74 <__ieee754_pow+0x27c>)
 80068d6:	4297      	cmp	r7, r2
 80068d8:	d130      	bne.n	800693c <__ieee754_pow+0x144>
 80068da:	f1b8 0f00 	cmp.w	r8, #0
 80068de:	f280 8479 	bge.w	80071d4 <__ieee754_pow+0x9dc>
 80068e2:	4652      	mov	r2, sl
 80068e4:	465b      	mov	r3, fp
 80068e6:	2000      	movs	r0, #0
 80068e8:	4962      	ldr	r1, [pc, #392]	@ (8006a74 <__ieee754_pow+0x27c>)
 80068ea:	f7f9 ff1f 	bl	800072c <__aeabi_ddiv>
 80068ee:	e7a1      	b.n	8006834 <__ieee754_pow+0x3c>
 80068f0:	2400      	movs	r4, #0
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d139      	bne.n	800696a <__ieee754_pow+0x172>
 80068f6:	4a5d      	ldr	r2, [pc, #372]	@ (8006a6c <__ieee754_pow+0x274>)
 80068f8:	4297      	cmp	r7, r2
 80068fa:	d1eb      	bne.n	80068d4 <__ieee754_pow+0xdc>
 80068fc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006900:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006904:	ea53 0309 	orrs.w	r3, r3, r9
 8006908:	f000 845c 	beq.w	80071c4 <__ieee754_pow+0x9cc>
 800690c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a78 <__ieee754_pow+0x280>)
 800690e:	429e      	cmp	r6, r3
 8006910:	d908      	bls.n	8006924 <__ieee754_pow+0x12c>
 8006912:	f1b8 0f00 	cmp.w	r8, #0
 8006916:	f2c0 8459 	blt.w	80071cc <__ieee754_pow+0x9d4>
 800691a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800691e:	e789      	b.n	8006834 <__ieee754_pow+0x3c>
 8006920:	2402      	movs	r4, #2
 8006922:	e7e6      	b.n	80068f2 <__ieee754_pow+0xfa>
 8006924:	f1b8 0f00 	cmp.w	r8, #0
 8006928:	f04f 0000 	mov.w	r0, #0
 800692c:	f04f 0100 	mov.w	r1, #0
 8006930:	da80      	bge.n	8006834 <__ieee754_pow+0x3c>
 8006932:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006936:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800693a:	e77b      	b.n	8006834 <__ieee754_pow+0x3c>
 800693c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006940:	d106      	bne.n	8006950 <__ieee754_pow+0x158>
 8006942:	4652      	mov	r2, sl
 8006944:	465b      	mov	r3, fp
 8006946:	4650      	mov	r0, sl
 8006948:	4659      	mov	r1, fp
 800694a:	f7f9 fdc5 	bl	80004d8 <__aeabi_dmul>
 800694e:	e771      	b.n	8006834 <__ieee754_pow+0x3c>
 8006950:	4a4a      	ldr	r2, [pc, #296]	@ (8006a7c <__ieee754_pow+0x284>)
 8006952:	4590      	cmp	r8, r2
 8006954:	d109      	bne.n	800696a <__ieee754_pow+0x172>
 8006956:	2d00      	cmp	r5, #0
 8006958:	db07      	blt.n	800696a <__ieee754_pow+0x172>
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	b011      	add	sp, #68	@ 0x44
 8006960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	f7ff bba2 	b.w	80060ac <__ieee754_sqrt>
 8006968:	2400      	movs	r4, #0
 800696a:	4650      	mov	r0, sl
 800696c:	4659      	mov	r1, fp
 800696e:	9302      	str	r3, [sp, #8]
 8006970:	f7ff fb8c 	bl	800608c <fabs>
 8006974:	9b02      	ldr	r3, [sp, #8]
 8006976:	f1b9 0f00 	cmp.w	r9, #0
 800697a:	d127      	bne.n	80069cc <__ieee754_pow+0x1d4>
 800697c:	4a3d      	ldr	r2, [pc, #244]	@ (8006a74 <__ieee754_pow+0x27c>)
 800697e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8006982:	4594      	cmp	ip, r2
 8006984:	d000      	beq.n	8006988 <__ieee754_pow+0x190>
 8006986:	bb0e      	cbnz	r6, 80069cc <__ieee754_pow+0x1d4>
 8006988:	f1b8 0f00 	cmp.w	r8, #0
 800698c:	da05      	bge.n	800699a <__ieee754_pow+0x1a2>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	2000      	movs	r0, #0
 8006994:	4937      	ldr	r1, [pc, #220]	@ (8006a74 <__ieee754_pow+0x27c>)
 8006996:	f7f9 fec9 	bl	800072c <__aeabi_ddiv>
 800699a:	2d00      	cmp	r5, #0
 800699c:	f6bf af4a 	bge.w	8006834 <__ieee754_pow+0x3c>
 80069a0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80069a4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80069a8:	4326      	orrs	r6, r4
 80069aa:	d108      	bne.n	80069be <__ieee754_pow+0x1c6>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	f7f9 fbd8 	bl	8000168 <__aeabi_dsub>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	e795      	b.n	80068ea <__ieee754_pow+0xf2>
 80069be:	2c01      	cmp	r4, #1
 80069c0:	f47f af38 	bne.w	8006834 <__ieee754_pow+0x3c>
 80069c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069c8:	4619      	mov	r1, r3
 80069ca:	e733      	b.n	8006834 <__ieee754_pow+0x3c>
 80069cc:	0fea      	lsrs	r2, r5, #31
 80069ce:	3a01      	subs	r2, #1
 80069d0:	ea52 0c04 	orrs.w	ip, r2, r4
 80069d4:	d102      	bne.n	80069dc <__ieee754_pow+0x1e4>
 80069d6:	4652      	mov	r2, sl
 80069d8:	465b      	mov	r3, fp
 80069da:	e7e9      	b.n	80069b0 <__ieee754_pow+0x1b8>
 80069dc:	f04f 0900 	mov.w	r9, #0
 80069e0:	3c01      	subs	r4, #1
 80069e2:	4314      	orrs	r4, r2
 80069e4:	bf14      	ite	ne
 80069e6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006a74 <__ieee754_pow+0x27c>
 80069ea:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006a80 <__ieee754_pow+0x288>
 80069ee:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80069f2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80069f6:	f240 8107 	bls.w	8006c08 <__ieee754_pow+0x410>
 80069fa:	4b22      	ldr	r3, [pc, #136]	@ (8006a84 <__ieee754_pow+0x28c>)
 80069fc:	429f      	cmp	r7, r3
 80069fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006a78 <__ieee754_pow+0x280>)
 8006a00:	d913      	bls.n	8006a2a <__ieee754_pow+0x232>
 8006a02:	429e      	cmp	r6, r3
 8006a04:	d808      	bhi.n	8006a18 <__ieee754_pow+0x220>
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	da08      	bge.n	8006a1e <__ieee754_pow+0x226>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	b011      	add	sp, #68	@ 0x44
 8006a10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	f000 be40 	b.w	8007698 <__math_oflow>
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	dcf6      	bgt.n	8006a0c <__ieee754_pow+0x214>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	b011      	add	sp, #68	@ 0x44
 8006a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f000 be32 	b.w	800768e <__math_uflow>
 8006a2a:	429e      	cmp	r6, r3
 8006a2c:	d20c      	bcs.n	8006a48 <__ieee754_pow+0x250>
 8006a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	f7f9 ffc1 	bl	80009bc <__aeabi_dcmplt>
 8006a3a:	3800      	subs	r0, #0
 8006a3c:	bf18      	it	ne
 8006a3e:	2001      	movne	r0, #1
 8006a40:	f1b8 0f00 	cmp.w	r8, #0
 8006a44:	daec      	bge.n	8006a20 <__ieee754_pow+0x228>
 8006a46:	e7e2      	b.n	8006a0e <__ieee754_pow+0x216>
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <__ieee754_pow+0x27c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	429e      	cmp	r6, r3
 8006a4e:	d91b      	bls.n	8006a88 <__ieee754_pow+0x290>
 8006a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a54:	2300      	movs	r3, #0
 8006a56:	f7f9 ffb1 	bl	80009bc <__aeabi_dcmplt>
 8006a5a:	3800      	subs	r0, #0
 8006a5c:	bf18      	it	ne
 8006a5e:	2001      	movne	r0, #1
 8006a60:	f1b8 0f00 	cmp.w	r8, #0
 8006a64:	dcd3      	bgt.n	8006a0e <__ieee754_pow+0x216>
 8006a66:	e7db      	b.n	8006a20 <__ieee754_pow+0x228>
 8006a68:	fff00000 	.word	0xfff00000
 8006a6c:	7ff00000 	.word	0x7ff00000
 8006a70:	433fffff 	.word	0x433fffff
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	3fefffff 	.word	0x3fefffff
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	bff00000 	.word	0xbff00000
 8006a84:	43f00000 	.word	0x43f00000
 8006a88:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf8 <__ieee754_pow+0x400>)
 8006a8a:	f7f9 fb6d 	bl	8000168 <__aeabi_dsub>
 8006a8e:	a352      	add	r3, pc, #328	@ (adr r3, 8006bd8 <__ieee754_pow+0x3e0>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	a350      	add	r3, pc, #320	@ (adr r3, 8006be0 <__ieee754_pow+0x3e8>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7f9 fd15 	bl	80004d8 <__aeabi_dmul>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	468b      	mov	fp, r1
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4b50      	ldr	r3, [pc, #320]	@ (8006bfc <__ieee754_pow+0x404>)
 8006aba:	f7f9 fd0d 	bl	80004d8 <__aeabi_dmul>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	a149      	add	r1, pc, #292	@ (adr r1, 8006be8 <__ieee754_pow+0x3f0>)
 8006ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac8:	f7f9 fb4e 	bl	8000168 <__aeabi_dsub>
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	f7f9 fd02 	bl	80004d8 <__aeabi_dmul>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	2000      	movs	r0, #0
 8006ada:	4949      	ldr	r1, [pc, #292]	@ (8006c00 <__ieee754_pow+0x408>)
 8006adc:	f7f9 fb44 	bl	8000168 <__aeabi_dsub>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7f9 fcf4 	bl	80004d8 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7f9 fcee 	bl	80004d8 <__aeabi_dmul>
 8006afc:	a33c      	add	r3, pc, #240	@ (adr r3, 8006bf0 <__ieee754_pow+0x3f8>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	f7f9 fb2b 	bl	8000168 <__aeabi_dsub>
 8006b12:	2400      	movs	r4, #0
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fb24 	bl	800016c <__adddf3>
 8006b24:	4632      	mov	r2, r6
 8006b26:	463b      	mov	r3, r7
 8006b28:	4620      	mov	r0, r4
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	f7f9 fb1c 	bl	8000168 <__aeabi_dsub>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	f7f9 fb16 	bl	8000168 <__aeabi_dsub>
 8006b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b44:	2300      	movs	r3, #0
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b54:	4652      	mov	r2, sl
 8006b56:	465b      	mov	r3, fp
 8006b58:	f7f9 fb06 	bl	8000168 <__aeabi_dsub>
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	f7f9 fcba 	bl	80004d8 <__aeabi_dmul>
 8006b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4689      	mov	r9, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 fcb2 	bl	80004d8 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7f9 faf6 	bl	800016c <__adddf3>
 8006b80:	4652      	mov	r2, sl
 8006b82:	465b      	mov	r3, fp
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	f7f9 fca4 	bl	80004d8 <__aeabi_dmul>
 8006b90:	460b      	mov	r3, r1
 8006b92:	4602      	mov	r2, r0
 8006b94:	4680      	mov	r8, r0
 8006b96:	4689      	mov	r9, r1
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 fae6 	bl	800016c <__adddf3>
 8006ba0:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <__ieee754_pow+0x40c>)
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	468a      	mov	sl, r1
 8006baa:	468b      	mov	fp, r1
 8006bac:	f340 82e0 	ble.w	8007170 <__ieee754_pow+0x978>
 8006bb0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006bb4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006bb8:	4303      	orrs	r3, r0
 8006bba:	f000 81df 	beq.w	8006f7c <__ieee754_pow+0x784>
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f7f9 fef9 	bl	80009bc <__aeabi_dcmplt>
 8006bca:	3800      	subs	r0, #0
 8006bcc:	bf18      	it	ne
 8006bce:	2001      	movne	r0, #1
 8006bd0:	e71d      	b.n	8006a0e <__ieee754_pow+0x216>
 8006bd2:	bf00      	nop
 8006bd4:	f3af 8000 	nop.w
 8006bd8:	60000000 	.word	0x60000000
 8006bdc:	3ff71547 	.word	0x3ff71547
 8006be0:	f85ddf44 	.word	0xf85ddf44
 8006be4:	3e54ae0b 	.word	0x3e54ae0b
 8006be8:	55555555 	.word	0x55555555
 8006bec:	3fd55555 	.word	0x3fd55555
 8006bf0:	652b82fe 	.word	0x652b82fe
 8006bf4:	3ff71547 	.word	0x3ff71547
 8006bf8:	3ff00000 	.word	0x3ff00000
 8006bfc:	3fd00000 	.word	0x3fd00000
 8006c00:	3fe00000 	.word	0x3fe00000
 8006c04:	408fffff 	.word	0x408fffff
 8006c08:	4ad3      	ldr	r2, [pc, #844]	@ (8006f58 <__ieee754_pow+0x760>)
 8006c0a:	402a      	ands	r2, r5
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	f040 817a 	bne.w	8006f06 <__ieee754_pow+0x70e>
 8006c12:	4bd2      	ldr	r3, [pc, #840]	@ (8006f5c <__ieee754_pow+0x764>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f7f9 fc5f 	bl	80004d8 <__aeabi_dmul>
 8006c1a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006c1e:	460b      	mov	r3, r1
 8006c20:	151a      	asrs	r2, r3, #20
 8006c22:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006c26:	4422      	add	r2, r4
 8006c28:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c2a:	4acd      	ldr	r2, [pc, #820]	@ (8006f60 <__ieee754_pow+0x768>)
 8006c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c30:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c34:	4293      	cmp	r3, r2
 8006c36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c3a:	dd08      	ble.n	8006c4e <__ieee754_pow+0x456>
 8006c3c:	4ac9      	ldr	r2, [pc, #804]	@ (8006f64 <__ieee754_pow+0x76c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	f340 8163 	ble.w	8006f0a <__ieee754_pow+0x712>
 8006c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c46:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c4e:	2600      	movs	r6, #0
 8006c50:	00f3      	lsls	r3, r6, #3
 8006c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c54:	4bc4      	ldr	r3, [pc, #784]	@ (8006f68 <__ieee754_pow+0x770>)
 8006c56:	4629      	mov	r1, r5
 8006c58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c60:	461a      	mov	r2, r3
 8006c62:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006c66:	4623      	mov	r3, r4
 8006c68:	4682      	mov	sl, r0
 8006c6a:	f7f9 fa7d 	bl	8000168 <__aeabi_dsub>
 8006c6e:	4652      	mov	r2, sl
 8006c70:	462b      	mov	r3, r5
 8006c72:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006c76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c7a:	f7f9 fa77 	bl	800016c <__adddf3>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	2000      	movs	r0, #0
 8006c84:	49b9      	ldr	r1, [pc, #740]	@ (8006f6c <__ieee754_pow+0x774>)
 8006c86:	f7f9 fd51 	bl	800072c <__aeabi_ddiv>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c96:	f7f9 fc1f 	bl	80004d8 <__aeabi_dmul>
 8006c9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c9e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006ca2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	46ab      	mov	fp, r5
 8006cac:	106d      	asrs	r5, r5, #1
 8006cae:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006cb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006cbc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	f7f9 fc06 	bl	80004d8 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cd4:	f7f9 fa48 	bl	8000168 <__aeabi_dsub>
 8006cd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cdc:	4606      	mov	r6, r0
 8006cde:	460f      	mov	r7, r1
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f7f9 fa40 	bl	8000168 <__aeabi_dsub>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4650      	mov	r0, sl
 8006cee:	4659      	mov	r1, fp
 8006cf0:	f7f9 fa3a 	bl	8000168 <__aeabi_dsub>
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	f7f9 fbee 	bl	80004d8 <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fa30 	bl	8000168 <__aeabi_dsub>
 8006d08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d0c:	f7f9 fbe4 	bl	80004d8 <__aeabi_dmul>
 8006d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f7f9 fbdc 	bl	80004d8 <__aeabi_dmul>
 8006d20:	a37b      	add	r3, pc, #492	@ (adr r3, 8006f10 <__ieee754_pow+0x718>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	f7f9 fbd5 	bl	80004d8 <__aeabi_dmul>
 8006d2e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006f18 <__ieee754_pow+0x720>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 fa1a 	bl	800016c <__adddf3>
 8006d38:	4622      	mov	r2, r4
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	a377      	add	r3, pc, #476	@ (adr r3, 8006f20 <__ieee754_pow+0x728>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fa11 	bl	800016c <__adddf3>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	f7f9 fbc3 	bl	80004d8 <__aeabi_dmul>
 8006d52:	a375      	add	r3, pc, #468	@ (adr r3, 8006f28 <__ieee754_pow+0x730>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fa08 	bl	800016c <__adddf3>
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	462b      	mov	r3, r5
 8006d60:	f7f9 fbba 	bl	80004d8 <__aeabi_dmul>
 8006d64:	a372      	add	r3, pc, #456	@ (adr r3, 8006f30 <__ieee754_pow+0x738>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f7f9 f9ff 	bl	800016c <__adddf3>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	a370      	add	r3, pc, #448	@ (adr r3, 8006f38 <__ieee754_pow+0x740>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f7f9 f9f6 	bl	800016c <__adddf3>
 8006d80:	4622      	mov	r2, r4
 8006d82:	4606      	mov	r6, r0
 8006d84:	460f      	mov	r7, r1
 8006d86:	462b      	mov	r3, r5
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f7f9 fba4 	bl	80004d8 <__aeabi_dmul>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4630      	mov	r0, r6
 8006d96:	4639      	mov	r1, r7
 8006d98:	f7f9 fb9e 	bl	80004d8 <__aeabi_dmul>
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	460d      	mov	r5, r1
 8006da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da4:	4642      	mov	r2, r8
 8006da6:	464b      	mov	r3, r9
 8006da8:	f7f9 f9e0 	bl	800016c <__adddf3>
 8006dac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006db0:	f7f9 fb92 	bl	80004d8 <__aeabi_dmul>
 8006db4:	4622      	mov	r2, r4
 8006db6:	462b      	mov	r3, r5
 8006db8:	f7f9 f9d8 	bl	800016c <__adddf3>
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	468b      	mov	fp, r1
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	f7f9 fb86 	bl	80004d8 <__aeabi_dmul>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4b68      	ldr	r3, [pc, #416]	@ (8006f70 <__ieee754_pow+0x778>)
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	f7f9 f9ca 	bl	800016c <__adddf3>
 8006dd8:	4652      	mov	r2, sl
 8006dda:	465b      	mov	r3, fp
 8006ddc:	f7f9 f9c6 	bl	800016c <__adddf3>
 8006de0:	2400      	movs	r4, #0
 8006de2:	460d      	mov	r5, r1
 8006de4:	4622      	mov	r2, r4
 8006de6:	460b      	mov	r3, r1
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	f7f9 fb74 	bl	80004d8 <__aeabi_dmul>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8006f70 <__ieee754_pow+0x778>)
 8006dfc:	f7f9 f9b4 	bl	8000168 <__aeabi_dsub>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	f7f9 f9b0 	bl	8000168 <__aeabi_dsub>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	4659      	mov	r1, fp
 8006e10:	f7f9 f9aa 	bl	8000168 <__aeabi_dsub>
 8006e14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e18:	f7f9 fb5e 	bl	80004d8 <__aeabi_dmul>
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460f      	mov	r7, r1
 8006e22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fb56 	bl	80004d8 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 f99a 	bl	800016c <__adddf3>
 8006e38:	2400      	movs	r4, #0
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 f991 	bl	800016c <__adddf3>
 8006e4a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006f40 <__ieee754_pow+0x748>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	4620      	mov	r0, r4
 8006e52:	460d      	mov	r5, r1
 8006e54:	f7f9 fb40 	bl	80004d8 <__aeabi_dmul>
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 f980 	bl	8000168 <__aeabi_dsub>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 f97a 	bl	8000168 <__aeabi_dsub>
 8006e74:	a334      	add	r3, pc, #208	@ (adr r3, 8006f48 <__ieee754_pow+0x750>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fb2d 	bl	80004d8 <__aeabi_dmul>
 8006e7e:	a334      	add	r3, pc, #208	@ (adr r3, 8006f50 <__ieee754_pow+0x758>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fb24 	bl	80004d8 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 f968 	bl	800016c <__adddf3>
 8006e9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e9e:	4b35      	ldr	r3, [pc, #212]	@ (8006f74 <__ieee754_pow+0x77c>)
 8006ea0:	2400      	movs	r4, #0
 8006ea2:	4413      	add	r3, r2
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f960 	bl	800016c <__adddf3>
 8006eac:	4682      	mov	sl, r0
 8006eae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eb0:	468b      	mov	fp, r1
 8006eb2:	f7f9 faa7 	bl	8000404 <__aeabi_i2d>
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8006f78 <__ieee754_pow+0x780>)
 8006ebe:	4413      	add	r3, r2
 8006ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eca:	465b      	mov	r3, fp
 8006ecc:	f7f9 f94e 	bl	800016c <__adddf3>
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	f7f9 f94a 	bl	800016c <__adddf3>
 8006ed8:	4632      	mov	r2, r6
 8006eda:	463b      	mov	r3, r7
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	f7f9 f93e 	bl	8000168 <__aeabi_dsub>
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	f7f9 f93a 	bl	8000168 <__aeabi_dsub>
 8006ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ef8:	f7f9 f936 	bl	8000168 <__aeabi_dsub>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4650      	mov	r0, sl
 8006f02:	4659      	mov	r1, fp
 8006f04:	e618      	b.n	8006b38 <__ieee754_pow+0x340>
 8006f06:	2400      	movs	r4, #0
 8006f08:	e68a      	b.n	8006c20 <__ieee754_pow+0x428>
 8006f0a:	2601      	movs	r6, #1
 8006f0c:	e6a0      	b.n	8006c50 <__ieee754_pow+0x458>
 8006f0e:	bf00      	nop
 8006f10:	4a454eef 	.word	0x4a454eef
 8006f14:	3fca7e28 	.word	0x3fca7e28
 8006f18:	93c9db65 	.word	0x93c9db65
 8006f1c:	3fcd864a 	.word	0x3fcd864a
 8006f20:	a91d4101 	.word	0xa91d4101
 8006f24:	3fd17460 	.word	0x3fd17460
 8006f28:	518f264d 	.word	0x518f264d
 8006f2c:	3fd55555 	.word	0x3fd55555
 8006f30:	db6fabff 	.word	0xdb6fabff
 8006f34:	3fdb6db6 	.word	0x3fdb6db6
 8006f38:	33333303 	.word	0x33333303
 8006f3c:	3fe33333 	.word	0x3fe33333
 8006f40:	e0000000 	.word	0xe0000000
 8006f44:	3feec709 	.word	0x3feec709
 8006f48:	dc3a03fd 	.word	0xdc3a03fd
 8006f4c:	3feec709 	.word	0x3feec709
 8006f50:	145b01f5 	.word	0x145b01f5
 8006f54:	be3e2fe0 	.word	0xbe3e2fe0
 8006f58:	7ff00000 	.word	0x7ff00000
 8006f5c:	43400000 	.word	0x43400000
 8006f60:	0003988e 	.word	0x0003988e
 8006f64:	000bb679 	.word	0x000bb679
 8006f68:	08007818 	.word	0x08007818
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	40080000 	.word	0x40080000
 8006f74:	080077f8 	.word	0x080077f8
 8006f78:	08007808 	.word	0x08007808
 8006f7c:	a39a      	add	r3, pc, #616	@ (adr r3, 80071e8 <__ieee754_pow+0x9f0>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	4630      	mov	r0, r6
 8006f84:	4639      	mov	r1, r7
 8006f86:	f7f9 f8f1 	bl	800016c <__adddf3>
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f90:	464b      	mov	r3, r9
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 f8e7 	bl	8000168 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fa2:	f7f9 fd29 	bl	80009f8 <__aeabi_dcmpgt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f47f ae09 	bne.w	8006bbe <__ieee754_pow+0x3c6>
 8006fac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006fb0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006fb4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006fb8:	fa43 fa0a 	asr.w	sl, r3, sl
 8006fbc:	44da      	add	sl, fp
 8006fbe:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006fc2:	489b      	ldr	r0, [pc, #620]	@ (8007230 <__ieee754_pow+0xa38>)
 8006fc4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006fc8:	4108      	asrs	r0, r1
 8006fca:	ea00 030a 	and.w	r3, r0, sl
 8006fce:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006fd2:	f1c1 0114 	rsb	r1, r1, #20
 8006fd6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006fda:	4640      	mov	r0, r8
 8006fdc:	fa4a fa01 	asr.w	sl, sl, r1
 8006fe0:	f1bb 0f00 	cmp.w	fp, #0
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	bfb8      	it	lt
 8006fec:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ff0:	f7f9 f8ba 	bl	8000168 <__aeabi_dsub>
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4689      	mov	r9, r1
 8006ff8:	2400      	movs	r4, #0
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 f8b3 	bl	800016c <__adddf3>
 8007006:	a37a      	add	r3, pc, #488	@ (adr r3, 80071f0 <__ieee754_pow+0x9f8>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	4620      	mov	r0, r4
 800700e:	460d      	mov	r5, r1
 8007010:	f7f9 fa62 	bl	80004d8 <__aeabi_dmul>
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	e9cd 0100 	strd	r0, r1, [sp]
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 f8a2 	bl	8000168 <__aeabi_dsub>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 f89c 	bl	8000168 <__aeabi_dsub>
 8007030:	a371      	add	r3, pc, #452	@ (adr r3, 80071f8 <__ieee754_pow+0xa00>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f7f9 fa4f 	bl	80004d8 <__aeabi_dmul>
 800703a:	a371      	add	r3, pc, #452	@ (adr r3, 8007200 <__ieee754_pow+0xa08>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fa46 	bl	80004d8 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 f88a 	bl	800016c <__adddf3>
 8007058:	4604      	mov	r4, r0
 800705a:	460d      	mov	r5, r1
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007064:	f7f9 f882 	bl	800016c <__adddf3>
 8007068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706c:	4680      	mov	r8, r0
 800706e:	4689      	mov	r9, r1
 8007070:	f7f9 f87a 	bl	8000168 <__aeabi_dsub>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4620      	mov	r0, r4
 800707a:	4629      	mov	r1, r5
 800707c:	f7f9 f874 	bl	8000168 <__aeabi_dsub>
 8007080:	4642      	mov	r2, r8
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	464b      	mov	r3, r9
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	a35d      	add	r3, pc, #372	@ (adr r3, 8007208 <__ieee754_pow+0xa10>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	4604      	mov	r4, r0
 8007098:	460d      	mov	r5, r1
 800709a:	f7f9 fa1d 	bl	80004d8 <__aeabi_dmul>
 800709e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007210 <__ieee754_pow+0xa18>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f7f9 f860 	bl	8000168 <__aeabi_dsub>
 80070a8:	4622      	mov	r2, r4
 80070aa:	462b      	mov	r3, r5
 80070ac:	f7f9 fa14 	bl	80004d8 <__aeabi_dmul>
 80070b0:	a359      	add	r3, pc, #356	@ (adr r3, 8007218 <__ieee754_pow+0xa20>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 f859 	bl	800016c <__adddf3>
 80070ba:	4622      	mov	r2, r4
 80070bc:	462b      	mov	r3, r5
 80070be:	f7f9 fa0b 	bl	80004d8 <__aeabi_dmul>
 80070c2:	a357      	add	r3, pc, #348	@ (adr r3, 8007220 <__ieee754_pow+0xa28>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 f84e 	bl	8000168 <__aeabi_dsub>
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	f7f9 fa02 	bl	80004d8 <__aeabi_dmul>
 80070d4:	a354      	add	r3, pc, #336	@ (adr r3, 8007228 <__ieee754_pow+0xa30>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f847 	bl	800016c <__adddf3>
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	f7f9 f9f9 	bl	80004d8 <__aeabi_dmul>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 f83b 	bl	8000168 <__aeabi_dsub>
 80070f2:	4604      	mov	r4, r0
 80070f4:	460d      	mov	r5, r1
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 f9eb 	bl	80004d8 <__aeabi_dmul>
 8007102:	2200      	movs	r2, #0
 8007104:	e9cd 0100 	strd	r0, r1, [sp]
 8007108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f82a 	bl	8000168 <__aeabi_dsub>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800711c:	f7f9 fb06 	bl	800072c <__aeabi_ddiv>
 8007120:	4632      	mov	r2, r6
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	463b      	mov	r3, r7
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f9d4 	bl	80004d8 <__aeabi_dmul>
 8007130:	4632      	mov	r2, r6
 8007132:	463b      	mov	r3, r7
 8007134:	f7f9 f81a 	bl	800016c <__adddf3>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4620      	mov	r0, r4
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 f812 	bl	8000168 <__aeabi_dsub>
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	f7f9 f80e 	bl	8000168 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	2000      	movs	r0, #0
 8007152:	4938      	ldr	r1, [pc, #224]	@ (8007234 <__ieee754_pow+0xa3c>)
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800715c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007160:	da2e      	bge.n	80071c0 <__ieee754_pow+0x9c8>
 8007162:	4652      	mov	r2, sl
 8007164:	f000 fa00 	bl	8007568 <scalbn>
 8007168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800716c:	f7ff bbed 	b.w	800694a <__ieee754_pow+0x152>
 8007170:	4c31      	ldr	r4, [pc, #196]	@ (8007238 <__ieee754_pow+0xa40>)
 8007172:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007176:	42a3      	cmp	r3, r4
 8007178:	d91a      	bls.n	80071b0 <__ieee754_pow+0x9b8>
 800717a:	4b30      	ldr	r3, [pc, #192]	@ (800723c <__ieee754_pow+0xa44>)
 800717c:	440b      	add	r3, r1
 800717e:	4303      	orrs	r3, r0
 8007180:	d009      	beq.n	8007196 <__ieee754_pow+0x99e>
 8007182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	2300      	movs	r3, #0
 800718a:	f7f9 fc17 	bl	80009bc <__aeabi_dcmplt>
 800718e:	3800      	subs	r0, #0
 8007190:	bf18      	it	ne
 8007192:	2001      	movne	r0, #1
 8007194:	e444      	b.n	8006a20 <__ieee754_pow+0x228>
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	f7f8 ffe5 	bl	8000168 <__aeabi_dsub>
 800719e:	4632      	mov	r2, r6
 80071a0:	463b      	mov	r3, r7
 80071a2:	f7f9 fc1f 	bl	80009e4 <__aeabi_dcmpge>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1eb      	bne.n	8007182 <__ieee754_pow+0x98a>
 80071aa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007240 <__ieee754_pow+0xa48>
 80071ae:	e6fd      	b.n	8006fac <__ieee754_pow+0x7b4>
 80071b0:	469a      	mov	sl, r3
 80071b2:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <__ieee754_pow+0xa4c>)
 80071b4:	459a      	cmp	sl, r3
 80071b6:	f63f aef9 	bhi.w	8006fac <__ieee754_pow+0x7b4>
 80071ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 80071be:	e71b      	b.n	8006ff8 <__ieee754_pow+0x800>
 80071c0:	4621      	mov	r1, r4
 80071c2:	e7d1      	b.n	8007168 <__ieee754_pow+0x970>
 80071c4:	2000      	movs	r0, #0
 80071c6:	491b      	ldr	r1, [pc, #108]	@ (8007234 <__ieee754_pow+0xa3c>)
 80071c8:	f7ff bb34 	b.w	8006834 <__ieee754_pow+0x3c>
 80071cc:	2000      	movs	r0, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	f7ff bb30 	b.w	8006834 <__ieee754_pow+0x3c>
 80071d4:	4650      	mov	r0, sl
 80071d6:	4659      	mov	r1, fp
 80071d8:	f7ff bb2c 	b.w	8006834 <__ieee754_pow+0x3c>
 80071dc:	460c      	mov	r4, r1
 80071de:	f7ff bb79 	b.w	80068d4 <__ieee754_pow+0xdc>
 80071e2:	2400      	movs	r4, #0
 80071e4:	f7ff bb64 	b.w	80068b0 <__ieee754_pow+0xb8>
 80071e8:	652b82fe 	.word	0x652b82fe
 80071ec:	3c971547 	.word	0x3c971547
 80071f0:	00000000 	.word	0x00000000
 80071f4:	3fe62e43 	.word	0x3fe62e43
 80071f8:	fefa39ef 	.word	0xfefa39ef
 80071fc:	3fe62e42 	.word	0x3fe62e42
 8007200:	0ca86c39 	.word	0x0ca86c39
 8007204:	be205c61 	.word	0xbe205c61
 8007208:	72bea4d0 	.word	0x72bea4d0
 800720c:	3e663769 	.word	0x3e663769
 8007210:	c5d26bf1 	.word	0xc5d26bf1
 8007214:	3ebbbd41 	.word	0x3ebbbd41
 8007218:	af25de2c 	.word	0xaf25de2c
 800721c:	3f11566a 	.word	0x3f11566a
 8007220:	16bebd93 	.word	0x16bebd93
 8007224:	3f66c16c 	.word	0x3f66c16c
 8007228:	5555553e 	.word	0x5555553e
 800722c:	3fc55555 	.word	0x3fc55555
 8007230:	fff00000 	.word	0xfff00000
 8007234:	3ff00000 	.word	0x3ff00000
 8007238:	4090cbff 	.word	0x4090cbff
 800723c:	3f6f3400 	.word	0x3f6f3400
 8007240:	4090cc00 	.word	0x4090cc00
 8007244:	3fe00000 	.word	0x3fe00000

08007248 <atan>:
 8007248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4bbc      	ldr	r3, [pc, #752]	@ (8007540 <atan+0x2f8>)
 800724e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007252:	429e      	cmp	r6, r3
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	468b      	mov	fp, r1
 800725a:	d918      	bls.n	800728e <atan+0x46>
 800725c:	4bb9      	ldr	r3, [pc, #740]	@ (8007544 <atan+0x2fc>)
 800725e:	429e      	cmp	r6, r3
 8007260:	d801      	bhi.n	8007266 <atan+0x1e>
 8007262:	d109      	bne.n	8007278 <atan+0x30>
 8007264:	b140      	cbz	r0, 8007278 <atan+0x30>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	f7f8 ff7d 	bl	800016c <__adddf3>
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	e006      	b.n	8007286 <atan+0x3e>
 8007278:	f1bb 0f00 	cmp.w	fp, #0
 800727c:	f340 8123 	ble.w	80074c6 <atan+0x27e>
 8007280:	a593      	add	r5, pc, #588	@ (adr r5, 80074d0 <atan+0x288>)
 8007282:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007286:	4620      	mov	r0, r4
 8007288:	4629      	mov	r1, r5
 800728a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	4bae      	ldr	r3, [pc, #696]	@ (8007548 <atan+0x300>)
 8007290:	429e      	cmp	r6, r3
 8007292:	d811      	bhi.n	80072b8 <atan+0x70>
 8007294:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007298:	429e      	cmp	r6, r3
 800729a:	d80a      	bhi.n	80072b2 <atan+0x6a>
 800729c:	a38e      	add	r3, pc, #568	@ (adr r3, 80074d8 <atan+0x290>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f8 ff63 	bl	800016c <__adddf3>
 80072a6:	2200      	movs	r2, #0
 80072a8:	4ba8      	ldr	r3, [pc, #672]	@ (800754c <atan+0x304>)
 80072aa:	f7f9 fba5 	bl	80009f8 <__aeabi_dcmpgt>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d1e9      	bne.n	8007286 <atan+0x3e>
 80072b2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80072b6:	e027      	b.n	8007308 <atan+0xc0>
 80072b8:	f7fe fee8 	bl	800608c <fabs>
 80072bc:	4ba4      	ldr	r3, [pc, #656]	@ (8007550 <atan+0x308>)
 80072be:	4604      	mov	r4, r0
 80072c0:	429e      	cmp	r6, r3
 80072c2:	460d      	mov	r5, r1
 80072c4:	f200 80b8 	bhi.w	8007438 <atan+0x1f0>
 80072c8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80072cc:	429e      	cmp	r6, r3
 80072ce:	f200 809c 	bhi.w	800740a <atan+0x1c2>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	f7f8 ff49 	bl	800016c <__adddf3>
 80072da:	2200      	movs	r2, #0
 80072dc:	4b9b      	ldr	r3, [pc, #620]	@ (800754c <atan+0x304>)
 80072de:	f7f8 ff43 	bl	8000168 <__aeabi_dsub>
 80072e2:	2200      	movs	r2, #0
 80072e4:	4606      	mov	r6, r0
 80072e6:	460f      	mov	r7, r1
 80072e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7f8 ff3c 	bl	800016c <__adddf3>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f9 fa16 	bl	800072c <__aeabi_ddiv>
 8007300:	f04f 0a00 	mov.w	sl, #0
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	4622      	mov	r2, r4
 800730a:	462b      	mov	r3, r5
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 f8e2 	bl	80004d8 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	f7f9 f8dc 	bl	80004d8 <__aeabi_dmul>
 8007320:	a36f      	add	r3, pc, #444	@ (adr r3, 80074e0 <atan+0x298>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	4606      	mov	r6, r0
 8007328:	460f      	mov	r7, r1
 800732a:	f7f9 f8d5 	bl	80004d8 <__aeabi_dmul>
 800732e:	a36e      	add	r3, pc, #440	@ (adr r3, 80074e8 <atan+0x2a0>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ff1a 	bl	800016c <__adddf3>
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	f7f9 f8cc 	bl	80004d8 <__aeabi_dmul>
 8007340:	a36b      	add	r3, pc, #428	@ (adr r3, 80074f0 <atan+0x2a8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f8 ff11 	bl	800016c <__adddf3>
 800734a:	4632      	mov	r2, r6
 800734c:	463b      	mov	r3, r7
 800734e:	f7f9 f8c3 	bl	80004d8 <__aeabi_dmul>
 8007352:	a369      	add	r3, pc, #420	@ (adr r3, 80074f8 <atan+0x2b0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f8 ff08 	bl	800016c <__adddf3>
 800735c:	4632      	mov	r2, r6
 800735e:	463b      	mov	r3, r7
 8007360:	f7f9 f8ba 	bl	80004d8 <__aeabi_dmul>
 8007364:	a366      	add	r3, pc, #408	@ (adr r3, 8007500 <atan+0x2b8>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f8 feff 	bl	800016c <__adddf3>
 800736e:	4632      	mov	r2, r6
 8007370:	463b      	mov	r3, r7
 8007372:	f7f9 f8b1 	bl	80004d8 <__aeabi_dmul>
 8007376:	a364      	add	r3, pc, #400	@ (adr r3, 8007508 <atan+0x2c0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f8 fef6 	bl	800016c <__adddf3>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f9 f8a8 	bl	80004d8 <__aeabi_dmul>
 8007388:	a361      	add	r3, pc, #388	@ (adr r3, 8007510 <atan+0x2c8>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	4680      	mov	r8, r0
 8007390:	4689      	mov	r9, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 f89f 	bl	80004d8 <__aeabi_dmul>
 800739a:	a35f      	add	r3, pc, #380	@ (adr r3, 8007518 <atan+0x2d0>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f8 fee2 	bl	8000168 <__aeabi_dsub>
 80073a4:	4632      	mov	r2, r6
 80073a6:	463b      	mov	r3, r7
 80073a8:	f7f9 f896 	bl	80004d8 <__aeabi_dmul>
 80073ac:	a35c      	add	r3, pc, #368	@ (adr r3, 8007520 <atan+0x2d8>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 fed9 	bl	8000168 <__aeabi_dsub>
 80073b6:	4632      	mov	r2, r6
 80073b8:	463b      	mov	r3, r7
 80073ba:	f7f9 f88d 	bl	80004d8 <__aeabi_dmul>
 80073be:	a35a      	add	r3, pc, #360	@ (adr r3, 8007528 <atan+0x2e0>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f7f8 fed0 	bl	8000168 <__aeabi_dsub>
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	f7f9 f884 	bl	80004d8 <__aeabi_dmul>
 80073d0:	a357      	add	r3, pc, #348	@ (adr r3, 8007530 <atan+0x2e8>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	f7f8 fec7 	bl	8000168 <__aeabi_dsub>
 80073da:	4632      	mov	r2, r6
 80073dc:	463b      	mov	r3, r7
 80073de:	f7f9 f87b 	bl	80004d8 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4640      	mov	r0, r8
 80073e8:	4649      	mov	r1, r9
 80073ea:	f7f8 febf 	bl	800016c <__adddf3>
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	f7f9 f871 	bl	80004d8 <__aeabi_dmul>
 80073f6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	d144      	bne.n	800748a <atan+0x242>
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f8 feb0 	bl	8000168 <__aeabi_dsub>
 8007408:	e733      	b.n	8007272 <atan+0x2a>
 800740a:	2200      	movs	r2, #0
 800740c:	4b4f      	ldr	r3, [pc, #316]	@ (800754c <atan+0x304>)
 800740e:	f7f8 feab 	bl	8000168 <__aeabi_dsub>
 8007412:	2200      	movs	r2, #0
 8007414:	4606      	mov	r6, r0
 8007416:	460f      	mov	r7, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	4b4b      	ldr	r3, [pc, #300]	@ (800754c <atan+0x304>)
 800741e:	f7f8 fea5 	bl	800016c <__adddf3>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 f97f 	bl	800072c <__aeabi_ddiv>
 800742e:	f04f 0a01 	mov.w	sl, #1
 8007432:	4604      	mov	r4, r0
 8007434:	460d      	mov	r5, r1
 8007436:	e767      	b.n	8007308 <atan+0xc0>
 8007438:	4b46      	ldr	r3, [pc, #280]	@ (8007554 <atan+0x30c>)
 800743a:	429e      	cmp	r6, r3
 800743c:	d21a      	bcs.n	8007474 <atan+0x22c>
 800743e:	2200      	movs	r2, #0
 8007440:	4b45      	ldr	r3, [pc, #276]	@ (8007558 <atan+0x310>)
 8007442:	f7f8 fe91 	bl	8000168 <__aeabi_dsub>
 8007446:	2200      	movs	r2, #0
 8007448:	4606      	mov	r6, r0
 800744a:	460f      	mov	r7, r1
 800744c:	4620      	mov	r0, r4
 800744e:	4629      	mov	r1, r5
 8007450:	4b41      	ldr	r3, [pc, #260]	@ (8007558 <atan+0x310>)
 8007452:	f7f9 f841 	bl	80004d8 <__aeabi_dmul>
 8007456:	2200      	movs	r2, #0
 8007458:	4b3c      	ldr	r3, [pc, #240]	@ (800754c <atan+0x304>)
 800745a:	f7f8 fe87 	bl	800016c <__adddf3>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	f7f9 f961 	bl	800072c <__aeabi_ddiv>
 800746a:	f04f 0a02 	mov.w	sl, #2
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	e749      	b.n	8007308 <atan+0xc0>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	2000      	movs	r0, #0
 800747a:	4938      	ldr	r1, [pc, #224]	@ (800755c <atan+0x314>)
 800747c:	f7f9 f956 	bl	800072c <__aeabi_ddiv>
 8007480:	f04f 0a03 	mov.w	sl, #3
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	e73e      	b.n	8007308 <atan+0xc0>
 800748a:	4b35      	ldr	r3, [pc, #212]	@ (8007560 <atan+0x318>)
 800748c:	4e35      	ldr	r6, [pc, #212]	@ (8007564 <atan+0x31c>)
 800748e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 fe67 	bl	8000168 <__aeabi_dsub>
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f7f8 fe63 	bl	8000168 <__aeabi_dsub>
 80074a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80074ae:	f7f8 fe5b 	bl	8000168 <__aeabi_dsub>
 80074b2:	f1bb 0f00 	cmp.w	fp, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	f6bf aee4 	bge.w	8007286 <atan+0x3e>
 80074be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074c2:	461d      	mov	r5, r3
 80074c4:	e6df      	b.n	8007286 <atan+0x3e>
 80074c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007538 <atan+0x2f0>)
 80074c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074cc:	e6db      	b.n	8007286 <atan+0x3e>
 80074ce:	bf00      	nop
 80074d0:	54442d18 	.word	0x54442d18
 80074d4:	3ff921fb 	.word	0x3ff921fb
 80074d8:	8800759c 	.word	0x8800759c
 80074dc:	7e37e43c 	.word	0x7e37e43c
 80074e0:	e322da11 	.word	0xe322da11
 80074e4:	3f90ad3a 	.word	0x3f90ad3a
 80074e8:	24760deb 	.word	0x24760deb
 80074ec:	3fa97b4b 	.word	0x3fa97b4b
 80074f0:	a0d03d51 	.word	0xa0d03d51
 80074f4:	3fb10d66 	.word	0x3fb10d66
 80074f8:	c54c206e 	.word	0xc54c206e
 80074fc:	3fb745cd 	.word	0x3fb745cd
 8007500:	920083ff 	.word	0x920083ff
 8007504:	3fc24924 	.word	0x3fc24924
 8007508:	5555550d 	.word	0x5555550d
 800750c:	3fd55555 	.word	0x3fd55555
 8007510:	2c6a6c2f 	.word	0x2c6a6c2f
 8007514:	bfa2b444 	.word	0xbfa2b444
 8007518:	52defd9a 	.word	0x52defd9a
 800751c:	3fadde2d 	.word	0x3fadde2d
 8007520:	af749a6d 	.word	0xaf749a6d
 8007524:	3fb3b0f2 	.word	0x3fb3b0f2
 8007528:	fe231671 	.word	0xfe231671
 800752c:	3fbc71c6 	.word	0x3fbc71c6
 8007530:	9998ebc4 	.word	0x9998ebc4
 8007534:	3fc99999 	.word	0x3fc99999
 8007538:	54442d18 	.word	0x54442d18
 800753c:	bff921fb 	.word	0xbff921fb
 8007540:	440fffff 	.word	0x440fffff
 8007544:	7ff00000 	.word	0x7ff00000
 8007548:	3fdbffff 	.word	0x3fdbffff
 800754c:	3ff00000 	.word	0x3ff00000
 8007550:	3ff2ffff 	.word	0x3ff2ffff
 8007554:	40038000 	.word	0x40038000
 8007558:	3ff80000 	.word	0x3ff80000
 800755c:	bff00000 	.word	0xbff00000
 8007560:	08007828 	.word	0x08007828
 8007564:	08007848 	.word	0x08007848

08007568 <scalbn>:
 8007568:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800756c:	4616      	mov	r6, r2
 800756e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007572:	4683      	mov	fp, r0
 8007574:	468c      	mov	ip, r1
 8007576:	460b      	mov	r3, r1
 8007578:	b982      	cbnz	r2, 800759c <scalbn+0x34>
 800757a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800757e:	4303      	orrs	r3, r0
 8007580:	d039      	beq.n	80075f6 <scalbn+0x8e>
 8007582:	4b2f      	ldr	r3, [pc, #188]	@ (8007640 <scalbn+0xd8>)
 8007584:	2200      	movs	r2, #0
 8007586:	f7f8 ffa7 	bl	80004d8 <__aeabi_dmul>
 800758a:	4b2e      	ldr	r3, [pc, #184]	@ (8007644 <scalbn+0xdc>)
 800758c:	4683      	mov	fp, r0
 800758e:	429e      	cmp	r6, r3
 8007590:	468c      	mov	ip, r1
 8007592:	da0d      	bge.n	80075b0 <scalbn+0x48>
 8007594:	a326      	add	r3, pc, #152	@ (adr r3, 8007630 <scalbn+0xc8>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	e01b      	b.n	80075d4 <scalbn+0x6c>
 800759c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80075a0:	42ba      	cmp	r2, r7
 80075a2:	d109      	bne.n	80075b8 <scalbn+0x50>
 80075a4:	4602      	mov	r2, r0
 80075a6:	f7f8 fde1 	bl	800016c <__adddf3>
 80075aa:	4683      	mov	fp, r0
 80075ac:	468c      	mov	ip, r1
 80075ae:	e022      	b.n	80075f6 <scalbn+0x8e>
 80075b0:	460b      	mov	r3, r1
 80075b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075b6:	3a36      	subs	r2, #54	@ 0x36
 80075b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80075bc:	428e      	cmp	r6, r1
 80075be:	dd0c      	ble.n	80075da <scalbn+0x72>
 80075c0:	a31d      	add	r3, pc, #116	@ (adr r3, 8007638 <scalbn+0xd0>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	461c      	mov	r4, r3
 80075c8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80075cc:	f361 74df 	bfi	r4, r1, #31, #1
 80075d0:	4621      	mov	r1, r4
 80075d2:	481d      	ldr	r0, [pc, #116]	@ (8007648 <scalbn+0xe0>)
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	e7e7      	b.n	80075aa <scalbn+0x42>
 80075da:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80075de:	4432      	add	r2, r6
 80075e0:	428a      	cmp	r2, r1
 80075e2:	dced      	bgt.n	80075c0 <scalbn+0x58>
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	dd0a      	ble.n	80075fe <scalbn+0x96>
 80075e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80075ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80075f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075f4:	46ac      	mov	ip, r5
 80075f6:	4658      	mov	r0, fp
 80075f8:	4661      	mov	r1, ip
 80075fa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80075fe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007602:	da09      	bge.n	8007618 <scalbn+0xb0>
 8007604:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007608:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800760c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007610:	480e      	ldr	r0, [pc, #56]	@ (800764c <scalbn+0xe4>)
 8007612:	f041 011f 	orr.w	r1, r1, #31
 8007616:	e7bd      	b.n	8007594 <scalbn+0x2c>
 8007618:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800761c:	3236      	adds	r2, #54	@ 0x36
 800761e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007622:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007626:	4658      	mov	r0, fp
 8007628:	4629      	mov	r1, r5
 800762a:	2200      	movs	r2, #0
 800762c:	4b08      	ldr	r3, [pc, #32]	@ (8007650 <scalbn+0xe8>)
 800762e:	e7d1      	b.n	80075d4 <scalbn+0x6c>
 8007630:	c2f8f359 	.word	0xc2f8f359
 8007634:	01a56e1f 	.word	0x01a56e1f
 8007638:	8800759c 	.word	0x8800759c
 800763c:	7e37e43c 	.word	0x7e37e43c
 8007640:	43500000 	.word	0x43500000
 8007644:	ffff3cb0 	.word	0xffff3cb0
 8007648:	8800759c 	.word	0x8800759c
 800764c:	c2f8f359 	.word	0xc2f8f359
 8007650:	3c900000 	.word	0x3c900000

08007654 <with_errno>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	4616      	mov	r6, r2
 800765c:	f000 f822 	bl	80076a4 <__errno>
 8007660:	4629      	mov	r1, r5
 8007662:	6006      	str	r6, [r0, #0]
 8007664:	4620      	mov	r0, r4
 8007666:	bd70      	pop	{r4, r5, r6, pc}

08007668 <xflow>:
 8007668:	b513      	push	{r0, r1, r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	b10c      	cbz	r4, 8007676 <xflow+0xe>
 8007672:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007676:	e9cd 2300 	strd	r2, r3, [sp]
 800767a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767e:	f7f8 ff2b 	bl	80004d8 <__aeabi_dmul>
 8007682:	2222      	movs	r2, #34	@ 0x22
 8007684:	b002      	add	sp, #8
 8007686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768a:	f7ff bfe3 	b.w	8007654 <with_errno>

0800768e <__math_uflow>:
 800768e:	2200      	movs	r2, #0
 8007690:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007694:	f7ff bfe8 	b.w	8007668 <xflow>

08007698 <__math_oflow>:
 8007698:	2200      	movs	r2, #0
 800769a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800769e:	f7ff bfe3 	b.w	8007668 <xflow>
	...

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	@ (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	200001c0 	.word	0x200001c0

080076b0 <_sbrk>:
 80076b0:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <_sbrk+0x14>)
 80076b2:	4603      	mov	r3, r0
 80076b4:	6811      	ldr	r1, [r2, #0]
 80076b6:	b909      	cbnz	r1, 80076bc <_sbrk+0xc>
 80076b8:	4903      	ldr	r1, [pc, #12]	@ (80076c8 <_sbrk+0x18>)
 80076ba:	6011      	str	r1, [r2, #0]
 80076bc:	6810      	ldr	r0, [r2, #0]
 80076be:	4403      	add	r3, r0
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	4770      	bx	lr
 80076c4:	20000ed8 	.word	0x20000ed8
 80076c8:	20000edc 	.word	0x20000edc

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
